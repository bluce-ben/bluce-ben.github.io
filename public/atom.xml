<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-28T11:08:52.530Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zheng Benwu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ORDER BY与索引</title>
    <link href="http://yoursite.com/2018/08/28/ORDER-BY%E4%B8%8E%E7%B4%A2%E5%BC%95/"/>
    <id>http://yoursite.com/2018/08/28/ORDER-BY与索引/</id>
    <published>2018-08-28T11:04:48.000Z</published>
    <updated>2018-08-28T11:08:52.530Z</updated>
    
    <content type="html"><![CDATA[<p>一条SQL实际上可以分为三步。</p><ol><li>得到数据</li><li>处理数据</li><li>返回处理后的数据</li></ol><p>比如这条语句<code>select sid from zhuyuehua.student where sid &lt; 50000 and id &lt; 50000 order by id desc</code><br>第一步：根据where条件和统计信息生成执行计划，得到数据。<br>第二步：将得到的数据排序。<br><strong>当执行处理数据（order by）时，数据库会先查看第一步的执行计划，看order by 的字段是否在执行计划中利用了索引。如果是，则可以利用索引顺序而直接取得已经排好序的数据。</strong>如果不是，则排序操作。<br>第三步：返回排序后的数据。 </p><p>总结：<br><strong>当order by 中的字段出现在where条件中时，才会利用索引而不排序，更准确的说，order by 中的字段在执行计划中利用了索引时，不用排序操作。</strong></p><p>这个结论不仅对order by有效，对其他需要排序的操作也有效。比如<strong><font color="red">group by 、union 、distinct</font></strong>等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一条SQL实际上可以分为三步。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;得到数据&lt;/li&gt;
&lt;li&gt;处理数据&lt;/li&gt;
&lt;li&gt;返回处理后的数据&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比如这条语句&lt;code&gt;select sid from zhuyuehua.student where sid &amp;
      
    
    </summary>
    
      <category term="SQL" scheme="http://yoursite.com/categories/SQL/"/>
    
      <category term="SQL优化" scheme="http://yoursite.com/categories/SQL%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="SQL优化" scheme="http://yoursite.com/tags/SQL%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Linux 配置支持IPv6</title>
    <link href="http://yoursite.com/2018/08/28/Linux-%E9%85%8D%E7%BD%AE%E6%94%AF%E6%8C%81IPv6/"/>
    <id>http://yoursite.com/2018/08/28/Linux-配置支持IPv6/</id>
    <published>2018-08-28T09:56:05.000Z</published>
    <updated>2018-08-28T10:21:10.209Z</updated>
    
    <content type="html"><![CDATA[<p>由于ipv4已经不能满足当前的使用，ipv6出现了，也必将兼容ipv4的地位。因此，下面是配置ipv6的步骤：</p><h4 id="一、检查Linux是否已经开启ipv6"><a href="#一、检查Linux是否已经开启ipv6" class="headerlink" title="一、检查Linux是否已经开启ipv6"></a>一、检查Linux是否已经开启ipv6</h4><p><code>[root@iz2ze3oyrjbxg32wecre15z /]# ifconfig</code><br><a id="more"></a><br><img src="/uploads/2018/08/network_ipv6_01.png" alt=""></p><p>从结果看出，输出结果没有 ipv6支持，如果支持ipv6，则输出结果会包含 “inet6”。<br><img src="/uploads/2018/08/network_ipv6_02.png" alt=""></p><p>可以测试一下，如果环境已经支持，则可以不用往下看了！</p><h4 id="二、开启ipv6"><a href="#二、开启ipv6" class="headerlink" title="二、开启ipv6"></a>二、开启ipv6</h4><p>（1）找到配置sysctl.conf 文件，路径在：<code>/etc/sysctl.conf</code> ，找到如下配置：<br><img src="/uploads/2018/08/network_ipv6_03.png" alt=""></p><p>如果已经存在，则直接修改，如果不存在，则新增。<br>将列出的ipv6相关配置更改为0<br><img src="/uploads/2018/08/network_ipv6_04.png" alt=""></p><p>（2）找到 disable_ipv6.conf 文件，路径在: <code>/etc/modprobe.d/disable_ipv6.conf</code><br>找到如下配置：<br><img src="/uploads/2018/08/network_ipv6_05.png" alt=""></p><p>列出的配置更改为 0<br><img src="/uploads/2018/08/network_ipv6_06.png" alt=""></p><p>（3）找到 network.conf 文件，路径在：<code>/etc/sysconfig/network</code><br>找到如下配置：<br><img src="/uploads/2018/08/network_ipv6_07.png" alt=""></p><p>将列出的配置更改为 yes<br><img src="/uploads/2018/08/network_ipv6_08.png" alt=""></p><p>（4）重启网络服务<br><code>[root@iz2ze3oyrjbxg32wecre15z /]# service network restart</code></p><p>（5）通过ifconfig 命令检查是否已经启动ipv6<br><code>[root@iz2ze3oyrjbxg32wecre15z /]# ifconfig|grep -i inet6</code><br><img src="/uploads/2018/08/network_ipv6_09.png" alt=""></p><p>结果显示，已经包含 inet6 相关信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于ipv4已经不能满足当前的使用，ipv6出现了，也必将兼容ipv4的地位。因此，下面是配置ipv6的步骤：&lt;/p&gt;
&lt;h4 id=&quot;一、检查Linux是否已经开启ipv6&quot;&gt;&lt;a href=&quot;#一、检查Linux是否已经开启ipv6&quot; class=&quot;headerlink&quot; title=&quot;一、检查Linux是否已经开启ipv6&quot;&gt;&lt;/a&gt;一、检查Linux是否已经开启ipv6&lt;/h4&gt;&lt;p&gt;&lt;code&gt;[root@iz2ze3oyrjbxg32wecre15z /]# ifconfig&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>VPN 与 VPS的区别</title>
    <link href="http://yoursite.com/2018/08/28/VPN-%E4%B8%8E-VPS%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2018/08/28/VPN-与-VPS的区别/</id>
    <published>2018-08-28T09:48:27.000Z</published>
    <updated>2018-08-28T09:50:55.625Z</updated>
    
    <content type="html"><![CDATA[<p>VPS：是Virtual Private Server的英文件缩写，说得是在一台服务器上创建多个相互隔离的虚拟服务器。这些虚拟服务器以最大化的效率共享硬件、软件许可证以及管理资源。对其用户和应用程序来讲，每一个VPS平台的运行和管理都和一台独立主机完全相同，因为每一个VPS都可以独立进行重启，并拥有自己的root访问权限、用户、IP地址、内存、过程、文件、应用程序、系统函数库以及配置文件。<br><a id="more"></a><br>VPN：是Virtual Private Network的英文缩写，也就是虚拟专用网络。在公用网络上建立专用网络，进行加密通讯。在企业网络中有广泛应用。VPN网关通过对数据包的加密和数据包目标地址的转换实现远程访问。VPN有多种分类方式，主要是按协议进行分类。VPN可通过服务器、硬件、软件等多种方式实现。</p><p><strong>VPN和VPS的区别：</strong><br>我们可以把VPS理解为服务器。一台服务器用软件分割开以后，就成了多台服务器，他们有独立的操作系统，具有独立的IP，这个时候每一个小的独立操作系统，就是一个VPS。也可以理解为，VPS就是一个配置低了点的服务器。<br>VPN是一个软件。用一个帐号和密码，我们登陆了以后，我们的机器访问网站或者是上QQ或者是登陆一些网络软件的时候，所显示的和使用的IP都是国外的。也就是说，VPN是一个可以让我们的机器直接连接到国外的网线上的东西。VPN分为两种，一种是静态的VPN，另外一种就是动态的VPN。动态的VPN是每登陆一次，就变化一次IP的。</p><p><strong>VPN的用途：</strong><br>VPN的主要用途：用来做国外的EBAY。<br>VPN在国内最主要的用途：做国外的游戏。例如现在想打国外的游戏币，就要购买VPN，这也是VPN的主要用途。<br>VPN的其它用途：供游戏币工作室来使用，其次是供一些做国外注册类网站的朋友使用。</p><p><strong>VPS的用途：</strong><br>VPS主机主要是从空间转向服务器一个过渡。特点就是价格便宜，但是稳定性一般。<br>VPS是桌面操作的，用远程登陆以后，和自己的机器是一样的布局，可以在上面安装软件等。<br>VPS的另外一个常用的用途，就是用来做下载站。因为毕竟是虚拟主机，所以速度比一般的空间要快得多，同时硬盘也大，适合做下载站。所以一般做迅雷的，都会选择一个VPS主机。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;VPS：是Virtual Private Server的英文件缩写，说得是在一台服务器上创建多个相互隔离的虚拟服务器。这些虚拟服务器以最大化的效率共享硬件、软件许可证以及管理资源。对其用户和应用程序来讲，每一个VPS平台的运行和管理都和一台独立主机完全相同，因为每一个VPS都可以独立进行重启，并拥有自己的root访问权限、用户、IP地址、内存、过程、文件、应用程序、系统函数库以及配置文件。&lt;br&gt;
    
    </summary>
    
      <category term="随记" scheme="http://yoursite.com/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>windows 下设置定时任务</title>
    <link href="http://yoursite.com/2018/08/28/windows-%E4%B8%8B%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://yoursite.com/2018/08/28/windows-下设置定时任务/</id>
    <published>2018-08-28T08:53:45.000Z</published>
    <updated>2018-08-28T10:50:35.608Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 系统可以通过crontab -e 设置定时任务，Windows系统没有crontab命令，但是Windows系统有跟crontab命令比较接近的命令： schtasks 命令。</p><a id="more"></a><h4 id="schtasks-语法"><a href="#schtasks-语法" class="headerlink" title="schtasks 语法"></a>schtasks 语法</h4><h5 id="创建定时任务"><a href="#创建定时任务" class="headerlink" title="创建定时任务"></a>创建定时任务</h5><p><strong>语法</strong><br><code>schtasks /create /tn TaskName /tr TaskRun /sc schedule [/mo modifier] [/d day] [/m month[,month...] [/i IdleTime] [/st StartTime] [/sd StartDate] [/ed EndDate] [/s computer [/u [domain\]user /p password]] [/ru {[Domain\]User | &quot;System&quot;} [/rp Password]] /?</code></p><p><strong>参数</strong><br>/tn TaskName         指定任务的名称。<br>/tr TaskRun 指定任务运行的程序或命令。键入可执行文件、脚本文件或批处理文件的完全合格的路径和文件名。（如果忽略该路径，SchTasks.exe 将假定文件在 Systemroot\System32 目录下。）<br>/sc schedule           指定计划类型。有效值为 MINUTE、HOURLY、DAILY、WEEKLY、MONTHLY、ONCE、ONSTART、ONLOGON、ONIDLE。</p><blockquote><p>值说明<br>MINUTE、HOURLY、DAILY、WEEKLY、MONTHLY         指定计划的时间单位。<br>ONCE     任务在指定的日期和时间运行一次。<br>ONSTART     任务在每次系统启动的时候运行。可以指定启动的日期，或下一次系统启动的时候运行任务。<br>ONLOGON     每当用户（任意用户）登录的时候，任务就运行。可以指定日期，或在下次用户登录的时候运行任务。<br>ONIDLE         只要系统空闲了指定的时间，任务就运行。可以指定日期，或在下次系统空闲的时候运行任务。</p></blockquote><p>/mo modifier         指定任务在其计划类型内的运行频率。这个参数对于 MONTHLY 计划是必需的。对于 MINUTE、HOURLY、DAILY 或 WEEKLY 计划，这个参数有效，但也可选。默认值为 1。</p><blockquote><p>计划类型<br>修饰符<br>说明<br>MINUTE<br>1 ～ 1439<br>任务每 n 分钟运行一次。<br>HOURLY<br>1 ～ 23<br>任务每 n 小时运行一次。<br>DAILY<br>1 ～ 365<br>任务每 n 天运行一次。<br>WEEKLY<br>1 ～ 52<br>任务每 n 周运行一次。<br>MONTHLY<br>1 ～ 12<br>任务每 n 月运行一次。<br>LASTDAY<br>任务在月份的最后一天运行。<br>FIRST、SECOND、THIRD、FOURTH、LAST<br>与 /d day 参数共同使用,并在特定的周和天运行任务。例如，在月份的第三个周三。</p></blockquote><p>/d dirlist         指定周或月的一天。只与 WEEKLY 或 MONTHLY 计划共同使用时有效。</p><blockquote><p>计划类型<br>日期值<br>WEEKLY<br>可选项。有效值是 MON ~ SUN 和 * （每一天）。MON 是默认值。<br>MONTHLY<br>在使用 FIRST、SECOND、THIRD、FOURTH 或 LAST 修饰符 (/mo) 时，需要 MON ～ SUN 中的某个值。1 ～ 31 是可选的，只在没有修饰符或修饰符为 1 ～ 12 类型时有效。默认值是 1 （月份的第一天）。</p></blockquote><p>/m month[,month…]         指定一年中的一个月。有效值是 JAN ～ DEC 和 <em> （每个月）。/m 参数只对于 MONTHLY 计划有效。在使用 LASTDAY 修饰符时，这个参数是必需的。否则，它是可选的，默认值是 </em> （每个月）。<br>/i InitialPageFileSize         指定任务启动之前计算机空闲多少分钟。键入一个 1 ～ 999 之间的整数。这个参数只对于 ONIDLE 计划有效，而且是必需的。<br>/st StartTime                 以 HH:MM:SS 24 小时格式指定时间。默认值是命令完成时的当前本地时间。/st 参数只对于 MINUTE、HOURLY、DAILY、WEEKLY、MONTHLY 和 ONCE 计划有效。它只对于 ONCE 计划是必需的。<br>/sd StartDate                 以 MM/DD/YYYY 格式指定任务启动的日期。默认值是当前日期。/sd 参数对于所有的计划有效，但只对于 ONCE 计划是必需的。<br>/ed EndDate                 指定任务计划运行的最后日期。此参数是可选的。它对于 ONCE、ONSTART、ONLOGON 或 ONIDLE 计划无效。默认情况下，计划没有结束日期。<br>/s Computer                 指定远程计算机的名称或 IP 地址（带有或者没有反斜杠）。默认值是本地计算机。<br>/u [domain]user             使用特定用户帐户的权限运行命令。默认情况下，使用已登录到运行 SchTasks 的计算机上的用户的权限运行命令。<br>/p password                 指定在 /u 参数中指定的用户帐户的密码。如果使用 /u 参数，则需要该参数。<br>/ru {[Domain]User | “System”}         使用指定用户帐户的权限运行任务。默认情况下，使用用户登录到运行 SchTasks 的计算机上的权限运行任务。</p><blockquote><p>值<br>说明<br>[domain}User?<br>指定用户帐户。<br>“System” 或 “”<br>指定操作系统使用的 NT Authority\System 帐户。</p></blockquote><p>/p Password                 指定用户帐户的密码，该用户帐户在 /u 参数中指定。如果在指定用户帐户的时候忽略了这个参数，SchTasks.exe 会提示您输入密码而且不显示键入的文本。使用 NT Authority\System 帐户权限运行的任务不需要密码，SchTasks.exe 也不会提示索要密码。<br>/?                             在命令提示符显示帮助。</p><p><strong>示例</strong><br>（1）计划任务每 20 分钟运行一次。（从脚本创建成功开始计时）<br><code>schtasks /create /sc minute /mo 20 /tn &quot;Security Script&quot; /tr \\central\data\scripts\sec.vbs</code></p><p>（2）计划命令在每小时过五分的时候运行。<br><code>schtasks /create /sc hourly /st 00:05:00 /tn &quot;My App&quot; /tr c:\apps\myapp.exe</code></p><p>（3）计划命令每五小时运行一次（它使用 /mo 参数来指定间隔时间，使用 /sd 参数来指定起始日期。）<br><code>schtasks /create /sc hourly /mo 5 /sd 03/01/2001 /tn &quot;My App&quot; /tr c:\apps\myapp.exe</code></p><p>（4）计划任务每天运行一次<br><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc daily /st 08:00:00 /ed 12/31/2001</code></p><p>（5）计划任务每隔一天运行一次（命令使用 /mo 参数来指定间隔天数。使用 /st 参数来指定起始时间， /sd 参数来指定起始日期。）<br><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc daily /mo 2 /st 13:00:00 /sd 12/31/2001</code></p><p>（6）计划任务每六周运行一次<br><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc weekly /mo 6 /s Server16 /ru Admin01</code><br>（该命令使用 /mo 参数来指定间隔。它也使用 /s 参数来指定远程计算机，使用 /ru 参数来计划任务以用户的 Administrator 帐户权限运行。因为忽略了 /rp 参数，SchTasks.exe 会提示用户输入 Administrator 帐户密码。<br>另外，因为命令是远程运行的，所以命令中所有的路径，包括到 MyApp.exe 的路径，都是指向远程计算机上的路径。）</p><p>（7）计划任务每隔一周在周五运行<br><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc weekly /mo 2 /d FRI</code><br>（下面的命令计划任务每隔一周在周五运行。它使用 /mo 参数来指定两周的间隔，使用 /d 参数来指定是一周内的哪一天。如计划任务在每个周五运行，要忽略 /mo 参数或将其设置为 1。）</p><p>（8）计划任务运行一次<br><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc once /st 00:00:00 /sd 01/01/2002 /ru Admin23 /rp p@ssworD1</code><br>（下面的命令计划 MyApp 程序在 2002 年 1 月 1 日午夜运行一次。它使用 /ru 参数指定以用户的 Administrator 帐户权限运行任务，使用 /rp 参数为 Administrator 帐户提供密码。）</p><p>（9）计划任务在每次系统启动的时候运行（下面的命令计划 MyApp 程序在每次系统启动的时候运行，起始日期是 2001 年 3 月 15 日。）<br><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc onstart /sd 03/15/2001</code></p><p>（10）计划任务在用户登录到远程计算机的时候运行<br><code>schtasks /create /tn &quot;Start Web Site&quot; /tr c:\myiis\webstart.bat /sc onlogon /s Server23</code><br>（下面的命令计划批处理文件在用户（任何用户）每次登录到远程计算机上的时候运行。它使用 /s 参数指定远程计算机。因为命令是远程的，所以命令中所有的路径，包括批处理文件的路径，都指定为远程计算机上的路径。）</p><p>（11）计划某项任务在计算机空闲的时候运行<br><code>schtasks /create /tn &quot;My App&quot; /tr c:\apps\myapp.exe /sc onidle /i 10</code><br>（下面的命令计划 MyApp 程序在计算机空闲的时候运行。它使用必需的 /i 参数指定在启动任务之前计算机必需持续空闲十分钟。）</p><h5 id="立即执行计划任务"><a href="#立即执行计划任务" class="headerlink" title="立即执行计划任务"></a>立即执行计划任务</h5><p>立即运行计划任务。run 操作忽略计划，但使用程序文件位置、用户帐户和存储在任务中的密码立即运行任务。<br><strong>语法</strong><br><code>schtasks /run /tn TaskName [/s computer [/u [domain\]user /p password]] /?</code><br><strong>示例：</strong><br>在本地计算机上运行任务<br>下面的命令启动 “Security Script” 任务。<br><code>schtasks /run /tn &quot;Security Script&quot;</code></p><p>在远程计算机上运行任务<br>下面的命令在远程计算机 Svr01 上运行 Update 任务：<br><code>schtasks /run /tn Update /s Svr01</code></p><h5 id="终止由任务启动的程序"><a href="#终止由任务启动的程序" class="headerlink" title="终止由任务启动的程序"></a>终止由任务启动的程序</h5><p><strong>语法</strong><br><code>schtasks /end /tn TaskName [/s computer [/u [domain\]user /p password]] /?</code><br><strong>示例</strong><br>终止本地计算机上的任务<br>下面的命令终止由 My Notepad 任务启动的 Notepad 实例：<br><code>schtasks /end /tn &quot;My Notepad&quot;</code><br>终止远程计算机上的任务<br>下面的命令终止远程计算机 Svr01 上由 InternetOn 任务启动的 Internet Explorer 实例：<br><code>schtasks /end /tn InternetOn /s Svr01</code></p><h5 id="删除计划任务"><a href="#删除计划任务" class="headerlink" title="删除计划任务"></a>删除计划任务</h5><p><strong>语法</strong><br><code>schtasks /delete /tn {TaskName | *} [/f] [/s computer [/u [domain\]user /p password]] [/?]</code><br><strong>示例</strong><br>（1）从远程计算机上的计划表中删除任务<br>下面的命令从远程计算机上的计划表中删除 “Start Mail” 任务。它使用 /s 参数来标识远程计算机。<br><code>schtasks /delete /tn &quot;Start Mail&quot; /s Svr16</code></p><p>（2）删除所有为本地计算机计划的任务。<br>下面的命令从本地计算机的计划表中删除所有的任务，包括由其它用户计划的任务。它使用 /tn <em> 参数代表计算机上所有的任务，使用/f 参数取消确认消息。<br>`schtasks /delete /tn </em> /f`</p><h5 id="更改计划任务"><a href="#更改计划任务" class="headerlink" title="更改计划任务"></a>更改计划任务</h5><p>更改一个或多个下列任务属性。</p><ul><li>任务运行的程序 (/tr)。</li><li>任务运行的用户帐户 (/ru)。</li><li>用户帐户的密码 (/rp)。</li></ul><p><strong>语法</strong><br><code>schtasks /change /tn TaskName [/s computer [/u [domain\]user /p password]] [/tr TaskRun] [/ru [Domain\]User | &quot;System&quot;] [/rp Password]</code><br><strong>示例</strong><br>（1）更改任务运行的程序<br>下面的命令将 Virus Check 任务运行的程序由 VirusCheck.exe 更改为 VirusCheck2.exe。此命令使用 /tn 参数标识任务，使用 /tr 参数指定任务的新程序。（不能更改任务名称。）<br><code>schtasks /change /tn &quot;Virus Check&quot; /tr C:\VirusCheck2.exe</code></p><p>（2）更改远程任务的用户密码<br>下面的命令更改用于远程计算机 Svr01 上 RemindMe 任务的用户帐户密码。命令使用 /tn 参数标识任务，使用 /s 参数指定远程计算机。它使用 /rp 参数指定新的密码 p@ssWord3。<br>在用户帐户密码过期或更改的时候需要此过程。如果存储在任务中的密码无效，那么任务不会运行。<br><code>schtasks /change /tn RemindMe /s Svr01 /rp p@ssWord3</code></p><h5 id="显示计划任务"><a href="#显示计划任务" class="headerlink" title="显示计划任务"></a>显示计划任务</h5><p>显示计划在计算机上运行的所有任务，包括那些由其它用户计划的任务。<br><strong>语法</strong><br><code>schtasks [/query] [/fo {TABLE | LIST | CSV}] [/nh] [/v] [/s computer [/u [domain\]user /p password]]</code></p><h4 id="Windows下查看定时任务"><a href="#Windows下查看定时任务" class="headerlink" title="Windows下查看定时任务"></a>Windows下查看定时任务</h4><p><img src="/uploads/2018/08/windows_schtasks.png" alt=""></p><h4 id="Windows自定义定时任务"><a href="#Windows自定义定时任务" class="headerlink" title="Windows自定义定时任务"></a>Windows自定义定时任务</h4><p>（1）自定义脚本文件 “.bat”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c:</span><br><span class="line">cd \schtasks</span><br><span class="line">D:\dev\Go\src\myTest\ceshi.exe &gt;&gt; D:\go.txt</span><br></pre></td></tr></table></figure></p><p><strong>说明：</strong><br>在定时执行的bat文件开头加几行命令，先进入存放配置文件的目录。<br>（schtasks的默认其实路径为：C:\Windows\System32）</p><p>（2）设置定时任务<br><code>schtasks /create /sc minute /mo 1 /tn &quot;windows_crontab&quot; /tr d:\schtasks\ceshi.bat</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux 系统可以通过crontab -e 设置定时任务，Windows系统没有crontab命令，但是Windows系统有跟crontab命令比较接近的命令： schtasks 命令。&lt;/p&gt;
    
    </summary>
    
      <category term="Windows" scheme="http://yoursite.com/categories/Windows/"/>
    
    
      <category term="Windows" scheme="http://yoursite.com/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 配置HTTPS及生成CA证书</title>
    <link href="http://yoursite.com/2018/07/29/Nginx-%E9%85%8D%E7%BD%AEHTTPS%E5%8F%8A%E7%94%9F%E6%88%90CA%E8%AF%81%E4%B9%A6/"/>
    <id>http://yoursite.com/2018/07/29/Nginx-配置HTTPS及生成CA证书/</id>
    <published>2018-07-29T10:23:12.000Z</published>
    <updated>2018-07-29T10:33:38.806Z</updated>
    
    <content type="html"><![CDATA[<h4 id="原理详解"><a href="#原理详解" class="headerlink" title="原理详解"></a>原理详解</h4><h5 id="（1）HTTPS-采用对称加密和非对称加密两种形式。"><a href="#（1）HTTPS-采用对称加密和非对称加密两种形式。" class="headerlink" title="（1）HTTPS 采用对称加密和非对称加密两种形式。"></a>（1）HTTPS 采用对称加密和非对称加密两种形式。</h5><p><strong>对称加密：</strong><br>明文M -&gt; 加密算法（包含加密秘钥） -&gt; 生成密文Y发送 -&gt; 解密算法（包含加密秘钥） -&gt; 明文M<br>（注：加密算法中的秘钥 = 解密算法中的秘钥）</p><p><strong>非对称加密：</strong><br>发送方：明文M -&gt; 加密（通过会话秘钥（服务器端生成的公钥）及加密算法） -&gt; 生成密文Y<br>接收方：接收密文Y -&gt; 解密（通过会话秘钥（服务器端生成的私钥）及加密算法） -&gt;明文M<br><em>（注：服务器端生成公私钥，公钥可以公开用于客户端加密传输数据，秘钥保管在服务器端，用于解密数据。私钥很重要，不能泄露。）</em><br><a id="more"></a></p><h5 id="（2）HTTPS-加密协议原理："><a href="#（2）HTTPS-加密协议原理：" class="headerlink" title="（2）HTTPS 加密协议原理："></a>（2）HTTPS 加密协议原理：</h5><p>客户端        -&gt; 发起SSL连接        -&gt; 服务器端（保管唯一私钥）<br>　　　　　　<- 发送公钥="" 　　　　　　-="">发送对称密码（发送对称密码利用公钥加密）<br>　　　　　　<-><br>　　（利用对称秘钥传输数据） </-></-></p><blockquote><p>此种方式安全漏洞：<br>会出现一种中间人：<br>① 在客户端“发起SSL连接”的时候，伪装成服务端接受连接，并再次伪装成客户端向服务端发送SSL连接；<br>② 当服务端接受SSL连接的时候，会向客户端发送“公钥”，然后中间人会伪装成客户端接受“公钥”，就会获取公钥；<br>③ 然后中间人会伪装成服务端向真正客户端发送“公钥”，获取客户端利用“公钥”返回的“对称密码”；<br>④ 到此，中间人就把传输数据的安全信息都获取了，可以进行伪装传输数据了。</p></blockquote><p><strong>为解决此安全漏洞，HTTPS采用了数字证书的方式（即CA证书）。</strong><br>原理即是在发送公钥这一层，将服务端返回公钥改成发送“CA签名证书”，然后，客户端已经安装了服务端生成的证书。对服务端返回的证书进行验证即可。校验通过，客户端发送“对称密码”；校验失败则停止会话。</p><h4 id="秘钥及证书生成"><a href="#秘钥及证书生成" class="headerlink" title="秘钥及证书生成"></a>秘钥及证书生成</h4><p>准备工作：Nginx必备模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#openssl version</span><br><span class="line">OpenSSL 1.0.2k-fips  26 Jan 2017</span><br><span class="line">#nginx -V</span><br><span class="line">--with-http_ssl_module</span><br></pre></td></tr></table></figure></p><h5 id="（1）生成key秘钥"><a href="#（1）生成key秘钥" class="headerlink" title="（1）生成key秘钥"></a>（1）生成key秘钥</h5><p><code>openssl genrsa -idea -out jesonc.key 1024</code></p><h5 id="（2）生成证书签名请求文件（csr文件）"><a href="#（2）生成证书签名请求文件（csr文件）" class="headerlink" title="（2）生成证书签名请求文件（csr文件）"></a>（2）生成证书签名请求文件（csr文件）</h5><p><code>openssl req -new -key jesonc.key -out jesonc.csr</code></p><h5 id="（3）生成证书签名文件（CA文件）"><a href="#（3）生成证书签名文件（CA文件）" class="headerlink" title="（3）生成证书签名文件（CA文件）"></a>（3）生成证书签名文件（CA文件）</h5><p><code>openssl x509 -req -days 3650 -in jesonc.csr -signkey jesonc.key -out jesonc.crt</code></p><h5 id="（4）通过秘钥直接生成证书文件"><a href="#（4）通过秘钥直接生成证书文件" class="headerlink" title="（4）通过秘钥直接生成证书文件"></a>（4）通过秘钥直接生成证书文件</h5><p><code>openssl req -days 3650 -x509 -sha256 -nodes -newkey rsa:2048 -keyout jesonc.key -out jesonc_apple.crt</code></p><h5 id="（5）免密启动服务设置"><a href="#（5）免密启动服务设置" class="headerlink" title="（5）免密启动服务设置"></a>（5）免密启动服务设置</h5><p><code>openssl rsa -in ./jesonc.key -out ./jesonc_nopass.key</code></p><h4 id="HTTPS语法配置"><a href="#HTTPS语法配置" class="headerlink" title="HTTPS语法配置"></a>HTTPS语法配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Syntax： ssl on | off;</span><br><span class="line">Context：http, server</span><br></pre></td></tr></table></figure><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen443;</span><br><span class="line">server_name ip;</span><br><span class="line">ssl on;</span><br><span class="line">ssl_certificate /etc/nginx/ssl_key/jesonc.crt;</span><br><span class="line">ssl_certificate_key/etc/nginx/ssl_key/jesonc.key;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>场景 - 配置苹果要求的证书</p><ol><li>服务器所有的连接使用TLS1.2以上版本（openssl 1.0.2）</li><li>HTTPS证书必须使用SHA256以上哈希算法签名</li><li>HTTPS证书必须使用RSA 2048位或ECC 256位以上公钥算法</li><li>使用向前加密技术</li></ol></blockquote><p><em>（注：查看本地证书要求：<code>openssl x509 -noout -text -in ./jesonc.crt</code>）</em></p><h4 id="HTTPS服务优化"><a href="#HTTPS服务优化" class="headerlink" title="HTTPS服务优化"></a>HTTPS服务优化</h4><p>（1）激活keepalive长连接<br>（2）设置 ssl session缓存<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keepalive_timeout100;</span><br><span class="line"></span><br><span class="line">ssl on;</span><br><span class="line">ssl_session_cache    shared:SSL:10m;</span><br><span class="line">ssl_session_timeout  10m;</span><br></pre></td></tr></table></figure></p><h4 id="升级SSL版本"><a href="#升级SSL版本" class="headerlink" title="升级SSL版本"></a>升级SSL版本</h4><p>（1）下载：<code>wget http://www.openssl.org/source/openssl-1.0.2k.tar.gz</code><br>（2）解压及安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf openssl-1.0.2k.tar.gz</span><br><span class="line">cd openssl-1.0.2k</span><br><span class="line">./config --prefix=/usr/local/openssl</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>（3）将旧的OpenSSL备份<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/openssl /usr/bin/openssl.OFF</span><br><span class="line">mv /usr/include/openssl /usr/include/openssl.OFF</span><br></pre></td></tr></table></figure></p><p>（4）将新的OpenSSL软链接到指定位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl</span><br><span class="line">ln -s /usr/local/openssl/include/openssl /usr/include/openssl</span><br></pre></td></tr></table></figure></p><p>（5）将新安装的openssl的库路径追加到系统的库文件的搜索路径中<br><code>echo &quot;/usr/local/openssl/lib&quot; &gt;&gt; /etc/ld.so.conf</code><br>（6）加载系统库文件，使修改后的/etc/ld.so.conf生效<br><code>ldconfig -v</code><br>（7）查看openssl是否已更新成功<br><code>openssl version -a</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;原理详解&quot;&gt;&lt;a href=&quot;#原理详解&quot; class=&quot;headerlink&quot; title=&quot;原理详解&quot;&gt;&lt;/a&gt;原理详解&lt;/h4&gt;&lt;h5 id=&quot;（1）HTTPS-采用对称加密和非对称加密两种形式。&quot;&gt;&lt;a href=&quot;#（1）HTTPS-采用对称加密和非对称加密两种形式。&quot; class=&quot;headerlink&quot; title=&quot;（1）HTTPS 采用对称加密和非对称加密两种形式。&quot;&gt;&lt;/a&gt;（1）HTTPS 采用对称加密和非对称加密两种形式。&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;对称加密：&lt;/strong&gt;&lt;br&gt;明文M -&amp;gt; 加密算法（包含加密秘钥） -&amp;gt; 生成密文Y发送 -&amp;gt; 解密算法（包含加密秘钥） -&amp;gt; 明文M&lt;br&gt;（注：加密算法中的秘钥 = 解密算法中的秘钥）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非对称加密：&lt;/strong&gt;&lt;br&gt;发送方：明文M -&amp;gt; 加密（通过会话秘钥（服务器端生成的公钥）及加密算法） -&amp;gt; 生成密文Y&lt;br&gt;接收方：接收密文Y -&amp;gt; 解密（通过会话秘钥（服务器端生成的私钥）及加密算法） -&amp;gt;明文M&lt;br&gt;&lt;em&gt;（注：服务器端生成公私钥，公钥可以公开用于客户端加密传输数据，秘钥保管在服务器端，用于解密数据。私钥很重要，不能泄露。）&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 配置常见问题</title>
    <link href="http://yoursite.com/2018/07/29/Nginx-%E9%85%8D%E7%BD%AE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/07/29/Nginx-配置常见问题/</id>
    <published>2018-07-29T10:19:56.000Z</published>
    <updated>2018-07-29T10:33:38.806Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-相同server-name多个虚拟主机优先级访问"><a href="#1-相同server-name多个虚拟主机优先级访问" class="headerlink" title="1. 相同server_name多个虚拟主机优先级访问"></a>1. 相同server_name多个虚拟主机优先级访问</h4><p>答： 相同的server_name，在nginx.conf文件中，会由上往下匹配，匹配成功则不往下继续匹配；而在vhost/下，则依据文件顺序由上往下进行匹配（即文件名称的顺序）。</p><h4 id="2-location匹配优先级"><a href="#2-location匹配优先级" class="headerlink" title="2. location匹配优先级"></a>2. location匹配优先级</h4><p>location方式有三种：</p><ol><li>=     进行普通字符精确匹配，也就是完全匹配</li><li>^~    表示普通字符匹配，使用前缀匹配方式</li><li>~/~*    表示执行一个正则匹配()</li><li>@     用来定义“Named Location”,是专门用来处理“内部重定向”请求的<br>说明：<br>（1）1、2优先级最高，匹配成功后，就不继续往下匹配。而3的优先级低，会一直往下匹配，直到找到最匹配的为止。<br>（2）~与~<em>的区别：~ 表示区分大小写；~</em>则表示不区分大小写。<a id="more"></a></li></ol><h4 id="3-try-files使用"><a href="#3-try-files使用" class="headerlink" title="3. try_files使用"></a>3. try_files使用</h4><p>答：按顺序检查文件是否存在<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">root /opt/app/code/cache;</span><br><span class="line">try_files $uri @php_page;</span><br><span class="line">&#125;</span><br><span class="line">location @php_page &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:9090;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解释：检测$uri文件是否存在，如果不存在，则重定向到@php_page模块。</p><h4 id="4-Nginx的alias和root区别"><a href="#4-Nginx的alias和root区别" class="headerlink" title="4. Nginx的alias和root区别"></a>4. Nginx的alias和root区别</h4><p>（1）root<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /request_path/image/ &#123;</span><br><span class="line">root /local_path/image/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>请求链接：<code>http://hostname/request_path/image/cat.png</code><br>会指向：<code>/local_path/image/request_path/image/cat.png</code><br>（2）alias<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /request_path/image/ &#123;</span><br><span class="line">alias /local_path/image/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>请求链接：<code>http://hostname/request_path/image/cat.png</code><br>会指向：<code>/local_path/image/cat.png</code></p><h4 id="5-用什么方法传递用户的真实IP"><a href="#5-用什么方法传递用户的真实IP" class="headerlink" title="5. 用什么方法传递用户的真实IP"></a>5. 用什么方法传递用户的真实IP</h4><p>可通过第一层代理增加http头变量来传递用户真实IP，后端服务可通过该变量来获取。<br><code>set x_real_ip=$remote_addr</code><br><em>（注：<code>x-forwarded-for</code> 可被用户篡改）</em></p><p><strong>附属一个工具用例：Nginx压测工具 ab</strong><br>示例： <code>ab -n 2000 -c 2 url</code><br>说明：<br>-n     总的请求数<br>-c     并发数<br>-k     是否开启长连接</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1-相同server-name多个虚拟主机优先级访问&quot;&gt;&lt;a href=&quot;#1-相同server-name多个虚拟主机优先级访问&quot; class=&quot;headerlink&quot; title=&quot;1. 相同server_name多个虚拟主机优先级访问&quot;&gt;&lt;/a&gt;1. 相同server_name多个虚拟主机优先级访问&lt;/h4&gt;&lt;p&gt;答： 相同的server_name，在nginx.conf文件中，会由上往下匹配，匹配成功则不往下继续匹配；而在vhost/下，则依据文件顺序由上往下进行匹配（即文件名称的顺序）。&lt;/p&gt;
&lt;h4 id=&quot;2-location匹配优先级&quot;&gt;&lt;a href=&quot;#2-location匹配优先级&quot; class=&quot;headerlink&quot; title=&quot;2. location匹配优先级&quot;&gt;&lt;/a&gt;2. location匹配优先级&lt;/h4&gt;&lt;p&gt;location方式有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;=     进行普通字符精确匹配，也就是完全匹配&lt;/li&gt;
&lt;li&gt;^~    表示普通字符匹配，使用前缀匹配方式&lt;/li&gt;
&lt;li&gt;~/~*    表示执行一个正则匹配()&lt;/li&gt;
&lt;li&gt;@     用来定义“Named Location”,是专门用来处理“内部重定向”请求的&lt;br&gt;说明：&lt;br&gt;（1）1、2优先级最高，匹配成功后，就不继续往下匹配。而3的优先级低，会一直往下匹配，直到找到最匹配的为止。&lt;br&gt;（2）~与~&lt;em&gt;的区别：~ 表示区分大小写；~&lt;/em&gt;则表示不区分大小写。
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Git 常见错误集锦</title>
    <link href="http://yoursite.com/2018/07/21/Git-%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E9%9B%86%E9%94%A6/"/>
    <id>http://yoursite.com/2018/07/21/Git-常见错误集锦/</id>
    <published>2018-07-21T10:40:22.000Z</published>
    <updated>2018-07-21T11:46:12.844Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、git-add出现-“in-unpopulated-submodule-‘A’-“-问题"><a href="#一、git-add出现-“in-unpopulated-submodule-‘A’-“-问题" class="headerlink" title="一、git add出现 “in unpopulated submodule ‘A’ “ 问题"></a>一、git add出现 “in unpopulated submodule ‘A’ “ 问题</h4><p><strong>问题场景：</strong><br>我博客Hexo+GitHub中用到了Next主题，而Next主题是我直接从GitHub上下载使用的。因此我Hexo博客中有.git文件，而Next主题也有.git文件，且这两者文件含义不同。因此，在我git push的时候，报此错误。<br><a id="more"></a></p><p><strong>原因解释：</strong><br>在 ./ 下有一文件夹 命名为“A”，A/ 有之前建立的仓库，我在 ./ 下add commit push 后发现远程仓库内并没有A/的内容，于是我在 A/ 下执行 ”git add .” 提示：“in unpopulated submodule ‘A’ ”（翻译为”在一个无人居住的子模块“，感觉意思是说位于子模块下，无法 add 0.0） </p><p><strong>解决方法是：</strong><br>（1）删除 A/ 的.git 文件夹<br>（2）在 ./ 下输入”git rm -rf –-cached A/“ //谨记：是 A/ ，意为A目录下<br>（3）在 ./ 下输入”git add A”<br>（4）git commit -m “”<br>（5）git push origin master</p><h4 id="二、GitHub上提示package-lock-json中依赖文件需要更新"><a href="#二、GitHub上提示package-lock-json中依赖文件需要更新" class="headerlink" title="二、GitHub上提示package-lock.json中依赖文件需要更新"></a>二、GitHub上提示package-lock.json中依赖文件需要更新</h4><p><strong>问题场景：</strong><br>将文章更新到GitHub上时，偶然间发现提示一个Warning！package-lock.json 依赖文件有漏洞，提示更新。一下就蒙圈了，package-lock.json是啥？怎么更新？<br>经过查找发现，package-lock.json 是npm的包管理文件，即你下载的npm包都记录在里面。<br>那需要怎么更新呢？度娘说直接使用“npm install” 即可，会自动的从package.json里面更新对应包，尝试失败。</p><p><strong>解决方法：</strong><br>直接在Hexo根目录下使用命令：<br><code>npm install packagename</code><br>直接填写对应包名，更新即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、git-add出现-“in-unpopulated-submodule-‘A’-“-问题&quot;&gt;&lt;a href=&quot;#一、git-add出现-“in-unpopulated-submodule-‘A’-“-问题&quot; class=&quot;headerlink&quot; title=&quot;一、git add出现 “in unpopulated submodule ‘A’ “ 问题&quot;&gt;&lt;/a&gt;一、git add出现 “in unpopulated submodule ‘A’ “ 问题&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;问题场景：&lt;/strong&gt;&lt;br&gt;我博客Hexo+GitHub中用到了Next主题，而Next主题是我直接从GitHub上下载使用的。因此我Hexo博客中有.git文件，而Next主题也有.git文件，且这两者文件含义不同。因此，在我git push的时候，报此错误。&lt;br&gt;
    
    </summary>
    
      <category term="版本控制" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="Git" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/"/>
    
      <category term="Git问题" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/Git/Git%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Git问题" scheme="http://yoursite.com/tags/Git%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 实战场景配置</title>
    <link href="http://yoursite.com/2018/07/21/Nginx-%E5%AE%9E%E6%88%98%E5%9C%BA%E6%99%AF%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2018/07/21/Nginx-实战场景配置/</id>
    <published>2018-07-21T10:26:00.000Z</published>
    <updated>2018-07-29T10:33:38.806Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、静态资源配置"><a href="#1、静态资源配置" class="headerlink" title="1、静态资源配置"></a>1、静态资源配置</h4><p>配置语法 - sendfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Syntax : sendfile on | off;</span><br><span class="line">Contaxt: http, server, location, if in location</span><br></pre></td></tr></table></figure></p><p>作用：开启sendfile，则静态数据不会被后端处理（即不会进入用户空间），直接在Nginx层返回数据（即经过内核空间直接返回）。<br><a id="more"></a><br>配置语法 - tcp_nopush （注：sendfile 开启的情况下，提高网络包的传输效率）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Syntax : tcp_nopush on | off;</span><br><span class="line">Contaxt: http, server, location</span><br></pre></td></tr></table></figure></p><p>配置语法 - tcp_nodelay（注：keepalive 连接下，提高网络包的传输实时性）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Syntax : tcp_nodelay on | off;</span><br><span class="line">Contaxt: http, server, location</span><br></pre></td></tr></table></figure></p><p>配置语法 - 压缩<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Syntax : gzip on | off;</span><br><span class="line">Contaxt: http, server, location, if in location</span><br></pre></td></tr></table></figure></p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(jpg|gif|png)$ &#123;</span><br><span class="line">#gzip on;</span><br><span class="line">#gzip_http_version 1.1;</span><br><span class="line">#gzip_comp_level 2;</span><br><span class="line">#gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">root /opt/app/code/images;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2、浏览器缓存配置"><a href="#2、浏览器缓存配置" class="headerlink" title="2、浏览器缓存配置"></a>2、浏览器缓存配置</h4><p>客户端校验过期机制：</p><table><thead><tr><th>校验是否过期</th><th>Expires、Cache-Control(max-age)</th></tr></thead><tbody><tr><td>协议中Etag头信息校验</td><td>Etag</td></tr><tr><td>Last-Modified头信息校验</td><td>Last-Modified</td></tr></tbody></table><p>服务端配置语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax : expires [modified] time;</span><br><span class="line"> expires epoch | max | off;</span><br><span class="line">Contaxt: http, server, location, if in location</span><br></pre></td></tr></table></figure></p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(html|htm)$ &#123;</span><br><span class="line">expires 24h;</span><br><span class="line">root /opt/app/code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3、跨站访问配置"><a href="#3、跨站访问配置" class="headerlink" title="3、跨站访问配置"></a>3、跨站访问配置</h4><p>客户端显示跨域信息：<br><code>Access-Control-Allow-Origin</code><br>服务端设置语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Syntax : add_header name value [always];</span><br><span class="line">Contaxt: http, server, location, if in location</span><br></pre></td></tr></table></figure></p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(html|htm)$ &#123;</span><br><span class="line">add_header Access-Control-Allow-Origin http://www.url.com;</span><br><span class="line">add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;</span><br><span class="line">root /opt/app/code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="4、防盗链配置"><a href="#4、防盗链配置" class="headerlink" title="4、防盗链配置"></a>4、防盗链配置</h4><p>基于http_refer防盗链配置模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Syntax : valid_referers none | blocked | server_names | string ...;</span><br><span class="line">Contaxt: server, location</span><br></pre></td></tr></table></figure></p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location ~ .*\.(jpg|gif|png)$ &#123;</span><br><span class="line">valid_referers none blocked 116.62.103.228; （注：也可使用正则匹配）</span><br><span class="line">if ($invalid_referer) &#123;</span><br><span class="line">return 443;</span><br><span class="line">&#125;</span><br><span class="line">root /opt/app/code/images;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="5、代理配置"><a href="#5、代理配置" class="headerlink" title="5、代理配置"></a>5、代理配置</h4><blockquote><p>代理区别：区别在于代理的对象不一样<br>　　正向代理代理的对象是客户端<br>　　反向代理代理的对象是服务端</p></blockquote><p>配置语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Syntax : proxy_pass URL;</span><br><span class="line">Contaxt: location, if in location, limit_execpt</span><br></pre></td></tr></table></figure></p><h5 id="（1）正向代理"><a href="#（1）正向代理" class="headerlink" title="（1）正向代理"></a>（1）正向代理</h5><p>服务端需限制访问路径，下面服务端只开启对应的IP能够访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">if ( $http_x_forwarded_for !~* &quot;^116\.62\.104\.228&quot; ) &#123;</span><br><span class="line">return 403;</span><br><span class="line">&#125;</span><br><span class="line">root /opt/app/code;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><em>（注：$http_x_forwarded_for 为代理的所有信息，包括客户端的IP。）</em><br>然后再对应的116.62.104.228服务器上配置正向代理即可。配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resolver 8.8.8.8;//Google的一个dns解析</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://$http_host$request_uri;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后再客户端配置好代理服务器（116.62.104.228）即可进行访问。<br>（注：此处服务端配置可不限制访问也可。理解正向代理就是客户端通过代理服务器向外访问。）</p><h5 id="（2）反向代理"><a href="#（2）反向代理" class="headerlink" title="（2）反向代理"></a>（2）反向代理</h5><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~ /test_proxy.html$ &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其它代理配置语法：可浏览Nginx官网进行查看。</p><h4 id="6、负载均衡配置"><a href="#6、负载均衡配置" class="headerlink" title="6、负载均衡配置"></a>6、负载均衡配置</h4><p>配置语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Syntax : upstream name &#123;...&#125;</span><br><span class="line">Context: http</span><br></pre></td></tr></table></figure></p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">upstream imooc &#123;</span><br><span class="line">server 116.62.103.228:8001 down;//不提供服务</span><br><span class="line">server 116.62.103.228:8002 backup;//备份结点</span><br><span class="line">server 116.62.103.228:8003 max_fails=1 fail_timeout=10s; //能够访问，最大试错为1次，服务暂停时间为10s</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://imooc;</span><br><span class="line">include proxy_params;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>负载均衡默认规则是轮询。会依据访问请求来依次进行分配。当其中一台机器宕机，会停止对其访问。<br><strong>后端服务器在负载均衡调度中的状态：</strong></p><table><thead><tr><th>down</th><th>当前的server暂时不参与负载均衡</th></tr></thead><tbody><tr><td>backup</td><td>预留的备份服务器</td></tr><tr><td>max_fails</td><td>允许请求失败的次数</td></tr><tr><td>fail_timeout</td><td>经过max_fails失败后，服务暂停的时间</td></tr><tr><td>max_conns</td><td>限制最大的接收的连接数</td></tr></tbody></table><h5 id="调度算法："><a href="#调度算法：" class="headerlink" title="调度算法："></a>调度算法：</h5><table><thead><tr><th>轮询</th><th>按时间顺序逐一分配到不同的后端服务器</th></tr></thead><tbody><tr><td>加权轮询</td><td>weight值越大，分配到的访问几率越高</td></tr><tr><td>ip_hash</td><td>每个请求按访问IP的hash结果分配，这样来自同一个IP的固定访问一个后端服务器</td></tr><tr><td>url_hash</td><td>按照访问的URL的hash结果分配请求，是每个URL定向到同一个后端服务器</td></tr><tr><td>least_conn</td><td>最少链接数，那个机器连接数少就分发</td></tr><tr><td>hash关键数值</td><td>hash自定义的key</td></tr></tbody></table><p>url_hash 配置语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax : hash key [consistent];</span><br><span class="line">Context: upstream</span><br><span class="line">（This directive appeared in version 1.7.2）</span><br></pre></td></tr></table></figure></p><p><strong>示例：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">upstream imooc &#123;</span><br><span class="line">hash $request_uri;</span><br><span class="line">server 116.62.103.228:8001;</span><br><span class="line">server 116.62.103.228:8002;</span><br><span class="line">server 116.62.103.228:8003; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面示例的意思就是根据 $request_uri的值来计算hash值。此处的key可自定义，只要在配置文件中定义即可。</p><h4 id="7、缓存服务配置（Nginx）"><a href="#7、缓存服务配置（Nginx）" class="headerlink" title="7、缓存服务配置（Nginx）"></a>7、缓存服务配置（Nginx）</h4><p>proxy_cache 配置语法。</p><h4 id="8、CPU亲和设置"><a href="#8、CPU亲和设置" class="headerlink" title="8、CPU亲和设置"></a>8、CPU亲和设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">worker_processes2;</span><br><span class="line">worker_cpu_affinity auto; //Nginx1.9之后</span><br><span class="line">worker_cpu_affinity0101010101010101 1010101010101010;</span><br><span class="line"></span><br><span class="line">worker_rlimit_nofile35535; //worker进程句柄数限制</span><br></pre></td></tr></table></figure><h4 id="9、文件上传漏洞"><a href="#9、文件上传漏洞" class="headerlink" title="9、文件上传漏洞"></a>9、文件上传漏洞</h4><p><code>http://hostname/upload/1.jpg/1.php</code><br>Nginx 将1.jpg作为php代码执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /upload &#123;</span><br><span class="line">root /opt/app/images;</span><br><span class="line">if ($request_filename ~* (.*)\.php) &#123;</span><br><span class="line">return 403;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="10、Nginx动静分离"><a href="#10、Nginx动静分离" class="headerlink" title="10、Nginx动静分离"></a>10、Nginx动静分离</h4><p><strong>实现原理：</strong>就是将静态内容，直接通过Nginx层就返回给用户，无需通过后端PHP处理。而动态数据，则发往后端处理后返回。<br>静态数据包括：html/htm、js/css、jpg/png/gif、zip/rar 等。<br>示例：<br><strong>动态请求：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">proxy_pass 127.0.0.1:9000</span><br><span class="line">proxy_params $SCRIPT$REQUIRT_URI;</span><br><span class="line">proxy_</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>静态内容：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~ \.(jpg|png|gif)$ &#123;</span><br><span class="line">expires 1h;</span><br><span class="line">gzip on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="11、Nginx-之Rewrite配置"><a href="#11、Nginx-之Rewrite配置" class="headerlink" title="11、Nginx 之Rewrite配置"></a>11、Nginx 之Rewrite配置</h4><p><strong>配置语法：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sysntax: rewrite regex replacement [flag];</span><br><span class="line">Context: server, location, if</span><br></pre></td></tr></table></figure></p><p><strong>正则表达式：</strong></p><table><thead><tr><th>.</th><th>匹配除换行符以外的任意字符</th></tr></thead><tbody><tr><td>?</td><td>重复0次或1次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>*</td><td>最少链接数，那个机器连接数少就分发</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>[c]</td><td>匹配单个字符c</td></tr><tr><td>[a-z]</td><td>匹配a-z小写字母的任意一个</td></tr><tr><td>\</td><td>转义字符</td></tr><tr><td>()</td><td>用于匹配括号之间的内容，通过$1、$2调用</td></tr></tbody></table><p>（注：可使用pcretest 来测试正则是否正确。）</p><p><strong>flag：</strong></p><table><thead><tr><th>last</th><th>停止rewrite检测</th></tr></thead><tbody><tr><td>break</td><td>停止rewrite检测</td></tr><tr><td>redirect</td><td>返回302临时重定向，地址栏会显示跳转后的地址</td></tr><tr><td>permanent</td><td>返回301永久重定向，地址栏会显示跳转后的地址</td></tr></tbody></table><p><em>（注：301与302的区别：临时重定向是客户端向服务器请求则返回，若服务器宕机，则不能够访问。永久重定向一旦服务器返回，再次访问则不需要请求服务器。永久性的指向重定向的服务器。）</em></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;1、静态资源配置&quot;&gt;&lt;a href=&quot;#1、静态资源配置&quot; class=&quot;headerlink&quot; title=&quot;1、静态资源配置&quot;&gt;&lt;/a&gt;1、静态资源配置&lt;/h4&gt;&lt;p&gt;配置语法 - sendfile&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Syntax : sendfile on | off;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Contaxt: http, server, location, if in location&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;作用：开启sendfile，则静态数据不会被后端处理（即不会进入用户空间），直接在Nginx层返回数据（即经过内核空间直接返回）。&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Sublime配置代码追踪</title>
    <link href="http://yoursite.com/2018/07/18/Sublime%E9%85%8D%E7%BD%AE%E4%BB%A3%E7%A0%81%E8%BF%BD%E8%B8%AA/"/>
    <id>http://yoursite.com/2018/07/18/Sublime配置代码追踪/</id>
    <published>2018-07-18T11:44:28.000Z</published>
    <updated>2018-07-20T06:07:54.890Z</updated>
    
    <content type="html"><![CDATA[<p>在阅读别人代码的时候，非常喜欢IDE中的追踪代码功能。也想在sublime text中也使用。从网上查找发现可以使用ctags插件。</p><p>下面介绍下如何在sublime text中安装使用ctags：</p><h4 id="1、安装package-control"><a href="#1、安装package-control" class="headerlink" title="1、安装package control"></a>1、安装package control</h4><p>点击<code>Preferences &gt; Browse Packages</code>菜单，进入打开的目录的上层目录，然后再进入Installed Packages/目录，下载Package Control.sublime-package并复制到Installed Packages/目录<br>pControl.sublime-package下载地址：<a href="/uploads/2018/07/Package Control.sublime-package">点击下载</a><br><a id="more"></a></p><p>输入Ctrl+Shift+P（菜单 - Tools - Command Paletter），输入Install Package并回车，输入或选择你需要的插件回车就安装了。<br>如果快捷键不好使，重启Sublime Text。</p><h4 id="2、安装ctags"><a href="#2、安装ctags" class="headerlink" title="2、安装ctags"></a>2、安装ctags</h4><h5 id="（1）安装sublime-text插件"><a href="#（1）安装sublime-text插件" class="headerlink" title="（1）安装sublime text插件"></a>（1）安装sublime text插件</h5><p>输入ctags安装，会发现编辑器左下角正在下载安装。</p><h5 id="（2）安装可执行程序"><a href="#（2）安装可执行程序" class="headerlink" title="（2）安装可执行程序"></a>（2）安装可执行程序</h5><p>下载ctags可执行程序，地址为<code>http://prdownloads.sourceforge.net/ctags/ctags58.zip</code>，解压到一个目录，注意要是纯ASCII字符的目录不要带空格或中文命名的目录。</p><h5 id="（3）配置"><a href="#（3）配置" class="headerlink" title="（3）配置"></a>（3）配置</h5><p>配置可执行文件路径：打开菜单在Preferences菜单中打开<code>Package settings-&gt;ctags-&gt;settings-user和settings-default</code>把default中的配置全部复制到user中，然后改一下command配置项，为ctags的可执行文件路径,即ctags.exe路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Path to ctags executable.</span><br><span class="line">//</span><br><span class="line">// Alter this value if your ctags command is not in the PATH, or if using</span><br><span class="line">// a different version of ctags to that in the path (i.e. for OSX).</span><br><span class="line">//</span><br><span class="line">// NOTE: You *should not* place entire commands here. These commands are</span><br><span class="line">// built automatically using the values below. For example, this is OK:</span><br><span class="line">//</span><br><span class="line">//     &quot;command&quot;: &quot;/usr/bin/ctags&quot;</span><br><span class="line">//</span><br><span class="line">// This, on the other hand, won&apos;t work!</span><br><span class="line">//</span><br><span class="line">//     &quot;command&quot;: &quot;ctags -R -f .tags --exclude=some/path&quot;</span><br><span class="line">//</span><br><span class="line">&quot;command&quot;: &quot;C:/Windows/System32/ctags58/ctags.exe&quot;,</span><br></pre></td></tr></table></figure></p><p>配置快捷键：配置在sublime中使用Ctrl+左键单击函数跳转、Ctrl+右键单击跳回函数调用位置<br>复制以下代码到 <code>Preferences-&gt;Package Settings-&gt;Ctags-&gt;Mouse Bindings-User</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;button&quot;: &quot;button1&quot;,</span><br><span class="line">        &quot;count&quot;: 1,</span><br><span class="line">        &quot;press_command&quot;: &quot;drag_select&quot;,</span><br><span class="line">        &quot;modifiers&quot;: [&quot;ctrl&quot;],</span><br><span class="line">        &quot;command&quot;: &quot;navigate_to_definition&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;button&quot;: &quot;button2&quot;,</span><br><span class="line">        &quot;count&quot;: 1,</span><br><span class="line">        &quot;modifiers&quot;: [&quot;ctrl&quot;],</span><br><span class="line">        &quot;command&quot;: &quot;jump_prev&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h5 id="（4）使用"><a href="#（4）使用" class="headerlink" title="（4）使用"></a>（4）使用</h5><p>在使用函数调转功能前，需要先生成.tags文件，只需在<font color="red">项目文件管理器的项目文件上右键点击Ctags:Rebuild Tags即可</font><strong>（注意，在改动文件之后也许重新生成.tags）</strong></p><h5 id="（5）所有工作都准备充分之后，就可以在函数名上-Ctrl-左键-点击指定函数跳转了，Ctrl-右键返回上一个跳转函数；"><a href="#（5）所有工作都准备充分之后，就可以在函数名上-Ctrl-左键-点击指定函数跳转了，Ctrl-右键返回上一个跳转函数；" class="headerlink" title="（5）所有工作都准备充分之后，就可以在函数名上 Ctrl+左键 点击指定函数跳转了，Ctrl+右键返回上一个跳转函数；"></a>（5）所有工作都准备充分之后，就可以在函数名上 Ctrl+左键 点击指定函数跳转了，Ctrl+右键返回上一个跳转函数；</h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在阅读别人代码的时候，非常喜欢IDE中的追踪代码功能。也想在sublime text中也使用。从网上查找发现可以使用ctags插件。&lt;/p&gt;
&lt;p&gt;下面介绍下如何在sublime text中安装使用ctags：&lt;/p&gt;
&lt;h4 id=&quot;1、安装package-control&quot;&gt;&lt;a href=&quot;#1、安装package-control&quot; class=&quot;headerlink&quot; title=&quot;1、安装package control&quot;&gt;&lt;/a&gt;1、安装package control&lt;/h4&gt;&lt;p&gt;点击&lt;code&gt;Preferences &amp;gt; Browse Packages&lt;/code&gt;菜单，进入打开的目录的上层目录，然后再进入Installed Packages/目录，下载Package Control.sublime-package并复制到Installed Packages/目录&lt;br&gt;pControl.sublime-package下载地址：&lt;a href=&quot;/uploads/2018/07/Package Control.sublime-package&quot;&gt;点击下载&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="编辑器" scheme="http://yoursite.com/categories/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="编辑器" scheme="http://yoursite.com/tags/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>搭建VPS记录</title>
    <link href="http://yoursite.com/2018/07/18/%E6%90%AD%E5%BB%BAVPN%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/07/18/搭建VPN记录/</id>
    <published>2018-07-18T11:43:42.000Z</published>
    <updated>2018-07-20T06:07:54.940Z</updated>
    
    <content type="html"><![CDATA[<p>通过Stack Overflow搜索到一个靠谱点的搭建VPS方法，完成搭建，现整理如下：</p><h4 id="一、服务器端安装"><a href="#一、服务器端安装" class="headerlink" title="一、服务器端安装"></a>一、服务器端安装</h4><h5 id="1、软件安装"><a href="#1、软件安装" class="headerlink" title="1、软件安装"></a>1、软件安装</h5><p>Debian / Ubuntu:<br>　　apt-get install python-pip<br>　　pip install shadowsocks</p><p>CentOS:<br>　　yum install python-setuptools &amp;&amp; easy_install pip<br>　　pip install shadowsocks</p><p>Windows:<br>　　See [Install Server on Windows]<br><a id="more"></a></p><h5 id="2、账号配置及常用命令"><a href="#2、账号配置及常用命令" class="headerlink" title="2、账号配置及常用命令"></a>2、账号配置及常用命令</h5><p>启动：<br>　　ssserver -p 443 -k password -m aes-256-cfb<br>后台启动：<br>　　sudo ssserver -p 443 -k password -m aes-256-cfb –user nobody -d start<br>停止：<br>　　sudo ssserver -d stop<br>检查log日志：<br>　　sudo less /var/log/shadowsocks.log</p><h4 id="二、客户端安装wiki"><a href="#二、客户端安装wiki" class="headerlink" title="二、客户端安装wiki"></a>二、客户端安装wiki</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[Android]:           https://github.com/shadowsocks/shadowsocks-android</span><br><span class="line">[Build Status]:      https://img.shields.io/travis/shadowsocks/shadowsocks/master.svg?style=flat</span><br><span class="line">[Configuration]:     https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File</span><br><span class="line">[Coverage Status]:   https://jenkins.shadowvpn.org/result/shadowsocks</span><br><span class="line">[Coverage]:          https://jenkins.shadowvpn.org/job/Shadowsocks/ws/PYENV/py34/label/linux/htmlcov/index.html</span><br><span class="line">[Debian sid]:        https://packages.debian.org/unstable/python/shadowsocks</span><br><span class="line">[iOS]:               https://github.com/shadowsocks/shadowsocks-iOS/wiki/Help</span><br><span class="line">[Issue Tracker]:     https://github.com/shadowsocks/shadowsocks/issues?state=open</span><br><span class="line">[Install Server on Windows]: https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows</span><br><span class="line">[Mailing list]:      https://groups.google.com/group/shadowsocks</span><br><span class="line">[OpenWRT]:           https://github.com/shadowsocks/openwrt-shadowsocks</span><br><span class="line">[OS X]:              https://github.com/shadowsocks/shadowsocks-iOS/wiki/Shadowsocks-for-OSX-Help</span><br><span class="line">[PyPI]:              https://pypi.python.org/pypi/shadowsocks</span><br><span class="line">[PyPI version]:      https://img.shields.io/pypi/v/shadowsocks.svg?style=flat</span><br><span class="line">[Travis CI]:         https://travis-ci.org/shadowsocks/shadowsocks</span><br><span class="line">[Troubleshooting]:   https://github.com/shadowsocks/shadowsocks/wiki/Troubleshooting</span><br><span class="line">[Wiki]:              https://github.com/shadowsocks/shadowsocks/wiki</span><br><span class="line">[Windows]:           https://github.com/shadowsocks/shadowsocks-csharp</span><br></pre></td></tr></table></figure><h4 id="三、报错集锦"><a href="#三、报错集锦" class="headerlink" title="三、报错集锦"></a>三、报错集锦</h4><h5 id="1、启动服务的时候报："><a href="#1、启动服务的时候报：" class="headerlink" title="1、启动服务的时候报："></a>1、启动服务的时候报：</h5><blockquote><p>AttributeError: /usr/lib/x86_64-linux-gnu/libcrypto.so.1.1: undefined symbol</p></blockquote><p>这个问题是由于在openssl1.1.0版本中，废弃了<code>EVP_CIPHER_CTX_cleanup</code>函数，如官网中所说：</p><blockquote><p>EVP_CIPHER_CTX was made opaque in OpenSSL 1.1.0. As a result, EVP_CIPHER_CTX_reset() appeared and EVP_CIPHER_CTX_cleanup() disappeared.<br>EVP_CIPHER_CTX_init() remains as an alias for EVP_CIPHER_CTX_reset().</p></blockquote><p><strong>修改方法：</strong></p><blockquote><p>(1) 用vim打开文件：vim /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py (该路径请根据自己的系统情况自行修改，如果不知道该文件在哪里的话，可以使用find命令查找文件位置)<br>(2) 跳转到52行（shadowsocks2.8.2版本，其他版本搜索一下cleanup）<br>(3) 进入编辑模式<br>(4) 将第52行libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,)<br>　　改为libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)<br>(5) 再次搜索cleanup（全文件共2处，此处位于111行），将libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx)<br>　　改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx)<br>(6) 保存并退出<br>(7) 启动shadowsocks服务：service shadowsocks start 或 sslocal -c ss配置文件目录<br>(8) 问题解决</p></blockquote><p><strong>插曲：</strong><br>在 Vultr 上面购买的“东京”服务器用来搭建VPN，刚开始购买的是 $2.5/month，上面标注的是 only ipv6，服务器启动后，才发现国内目前还没有普及ipv6，ping都不通，在阿里云服务器上开启ipv6，然后再ping仍然不通。 应该是网络运营商方面没有开启ipv6，所以都出不去，才ping不通。迫不得已，又删除掉服务器，重新购买了 $5/month 的服务器，搭建完毕。</p><p><em>下面查看电脑是否支持IPV6访问：</em><br>登陆<code>http://test-ipv6.com/</code>（如果能上网的话）<br>根据网站给出的信息，判断是否支持IPv6。<br><img src="/uploads/2018/07/vpn_01.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过Stack Overflow搜索到一个靠谱点的搭建VPS方法，完成搭建，现整理如下：&lt;/p&gt;
&lt;h4 id=&quot;一、服务器端安装&quot;&gt;&lt;a href=&quot;#一、服务器端安装&quot; class=&quot;headerlink&quot; title=&quot;一、服务器端安装&quot;&gt;&lt;/a&gt;一、服务器端安装&lt;/h4&gt;&lt;h5 id=&quot;1、软件安装&quot;&gt;&lt;a href=&quot;#1、软件安装&quot; class=&quot;headerlink&quot; title=&quot;1、软件安装&quot;&gt;&lt;/a&gt;1、软件安装&lt;/h5&gt;&lt;p&gt;Debian / Ubuntu:&lt;br&gt;　　apt-get install python-pip&lt;br&gt;　　pip install shadowsocks&lt;/p&gt;
&lt;p&gt;CentOS:&lt;br&gt;　　yum install python-setuptools &amp;amp;&amp;amp; easy_install pip&lt;br&gt;　　pip install shadowsocks&lt;/p&gt;
&lt;p&gt;Windows:&lt;br&gt;　　See [Install Server on Windows]&lt;br&gt;
    
    </summary>
    
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>面试 - 数据库相关问题</title>
    <link href="http://yoursite.com/2018/06/11/%E9%9D%A2%E8%AF%95%20-%20%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2018/06/11/面试 - 数据库相关问题/</id>
    <published>2018-06-11T09:58:07.000Z</published>
    <updated>2018-07-20T06:07:54.755Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1、什么是索引-SQL-Server-2000里有什么类型的索引"><a href="#1、什么是索引-SQL-Server-2000里有什么类型的索引" class="headerlink" title="1、什么是索引?SQL Server 2000里有什么类型的索引?"></a>1、什么是索引?SQL Server 2000里有什么类型的索引?</h5><p>任何有经验的数据库开发人员都应该能够很轻易地回答这个问题。一些经验不太多的开发人员能够回答这个问题，但是有些地方会说不清楚。<br>简单地说，索引是一个数据结构，用来快速访问数据库表格或者视图里的数据。在SQL Server里，它们有两种形式:聚集索引和非聚集索引。聚集索引在索引的叶级保存数据。这意味着不论聚集索引里有表格的哪个(或哪些)字段，这些字段都会按顺序被保存在表格。由于存在这种排序，所以每个表格只会有一个聚集索引。非聚集索引在索引的叶级有一个行标识符。这个行标识符是一个指向磁盘上数据的指针。它允许每个表格有多个非聚集索引。</p><a id="more"></a><h5 id="2、什么是主键-什么是外键"><a href="#2、什么是主键-什么是外键" class="headerlink" title="2、什么是主键?什么是外键?"></a>2、什么是主键?什么是外键?</h5><p>主键是表格里的(一个或多个)字段，只用来定义表格里的行;主键里的值总是唯一的。外键是一个用来建立两个表格之间关系的约束。这种关系一般都涉及一个表格里的主键字段与另外一个表格(尽管可能是同一个表格)里的一系列相连的字段。那么这些相连的字段就是外键。</p><h5 id="3、什么是触发器-SQL-Server-2000有什么不同类型的触发器"><a href="#3、什么是触发器-SQL-Server-2000有什么不同类型的触发器" class="headerlink" title="3、什么是触发器?SQL Server 2000有什么不同类型的触发器?"></a>3、什么是触发器?SQL Server 2000有什么不同类型的触发器?</h5><p>让未来的数据库开发人员知道可用的触发器类型以及如何实现它们是非常有益的。<br>触发器是一种专用类型的存储过程，它被捆绑到SQL Server 2000的表格或者视图上。在SQL Server 2000里，有INSTEAD-OF和AFTER两种触发器。INSTEAD-OF触发器是替代数据操控语言(Data Manipulation Language，DML)语句对表格执行语句的存储过程。例如，如果我有一个用于TableA的INSTEAD-OF-UPDATE触发器，同时对这个表格执行一个更新语句，那么INSTEAD-OF-UPDATE触发器里的代码会执行，而不是我执行的更新语句则不会执行操作。<br>AFTER触发器要在DML语句在数据库里使用之后才执行。这些类型的触发器对于监视发生在数据库表格里的数据变化十分好用。</p><p>您如何确一个带有名为Fld1字段的TableB表格里只具有Fld1字段里的那些值，而这些值同时在名为TableA的表格的Fld1字段里?<br>这个与关系相关的问题有两个可能的答案。第一个答案(而且是您希望听到的答案)是使用外键限制。外键限制用来维护引用的完整性。它被用来确保表格里的字段只保存有已经在不同的(或者相同的)表格里的另一个字段里定义了的值。这个字段就是候选键(通常是另外一个表格的主键)。<br>另外一种答案是触发器。触发器可以被用来保证以另外一种方式实现与限制相同的作用，但是它非常难设置与维护，而且性能一般都很糟糕。由于这个原因，微软建议开发人员使用外键限制而不是触发器来维护引用的完整性。</p><h5 id="4、对一个投入使用的在线事务处理表格有过多索引需要有什么样的性能考虑"><a href="#4、对一个投入使用的在线事务处理表格有过多索引需要有什么样的性能考虑" class="headerlink" title="4、对一个投入使用的在线事务处理表格有过多索引需要有什么样的性能考虑?"></a>4、对一个投入使用的在线事务处理表格有过多索引需要有什么样的性能考虑?</h5><p>你正在寻找进行与数据操控有关的应聘人员。对一个表格的索引越多，数据库引擎用来更新、插入或者删除数据所需要的时间就越多，因为在数据操控发生的时候索引也必须要维护。</p><h5 id="5、你可以用什么来确保表格里的字段只接受特定范围里的值"><a href="#5、你可以用什么来确保表格里的字段只接受特定范围里的值" class="headerlink" title="5、你可以用什么来确保表格里的字段只接受特定范围里的值?"></a>5、你可以用什么来确保表格里的字段只接受特定范围里的值?</h5><p>这个问题可以用多种方式来回答，但是只有一个答案是“好”答案。您希望听到的回答是Check限制，它在数据库表格里被定义，用来限制输入该列的值。<br>触发器也可以被用来限制数据库表格里的字段能够接受的值，但是这种办法要求触发器在表格里被定义，这可能会在某些情况下影响到性能。因此，微软建议使用Check限制而不是其他的方式来限制域的完整性。</p><h5 id="6、对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题"><a href="#6、对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题" class="headerlink" title="6、对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题:"></a>6、对关系型数据库而言，索引是相当重要的概念，请回答有关索引几个问题:</h5><p>a) 索引的目的是什么?<br>b) 索引对数据库系统的负面影响是什么?<br>c) 为数据表建立索引的原则有哪些?<br>d) 什么情况下不宜建立索引?</p><p>答：<br>索引的目的：</p><ol><li>快速访问数据表中的特定信息，提高检索速度</li><li>创建唯一性索引，保证数据库表中每一行数据的唯一性</li><li>加速表和表之间的连接</li><li>使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间</li></ol><p>负面影响：创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间；当对表进行增、删、改的时候索引也要动态维护，这样就降低了数据的维护速度。</p><p>建立索引的原则：</p><ol><li>在最频繁使用的、用以缩小查询范围的字段上建立索引</li><li>在平频繁使用的、需要排序的字段上建立索引</li></ol><p>什么情况下不宜建立索引：</p><ol><li>对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引</li><li>对于一些特殊的数据类型，不宜建立索引，比如文本字段(text)等。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1、什么是索引-SQL-Server-2000里有什么类型的索引&quot;&gt;&lt;a href=&quot;#1、什么是索引-SQL-Server-2000里有什么类型的索引&quot; class=&quot;headerlink&quot; title=&quot;1、什么是索引?SQL Server 2000里有什么类型的索引?&quot;&gt;&lt;/a&gt;1、什么是索引?SQL Server 2000里有什么类型的索引?&lt;/h5&gt;&lt;p&gt;任何有经验的数据库开发人员都应该能够很轻易地回答这个问题。一些经验不太多的开发人员能够回答这个问题，但是有些地方会说不清楚。&lt;br&gt;简单地说，索引是一个数据结构，用来快速访问数据库表格或者视图里的数据。在SQL Server里，它们有两种形式:聚集索引和非聚集索引。聚集索引在索引的叶级保存数据。这意味着不论聚集索引里有表格的哪个(或哪些)字段，这些字段都会按顺序被保存在表格。由于存在这种排序，所以每个表格只会有一个聚集索引。非聚集索引在索引的叶级有一个行标识符。这个行标识符是一个指向磁盘上数据的指针。它允许每个表格有多个非聚集索引。&lt;/p&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>面试 - php易混淆题集锦</title>
    <link href="http://yoursite.com/2018/06/11/%E9%9D%A2%E8%AF%95%20-%20php%E6%98%93%E6%B7%B7%E6%B7%86%E9%A2%98%E9%9B%86%E9%94%A6/"/>
    <id>http://yoursite.com/2018/06/11/面试 - php易混淆题集锦/</id>
    <published>2018-06-11T08:55:20.000Z</published>
    <updated>2018-07-21T10:22:41.689Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-写出如下程序的输出结果（考点：变量判空）"><a href="#1-写出如下程序的输出结果（考点：变量判空）" class="headerlink" title="1. 写出如下程序的输出结果（考点：变量判空）"></a>1. 写出如下程序的输出结果（考点：变量判空）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$a1 = null;</span><br><span class="line">$a2 = false;</span><br><span class="line">$a3 = 0;</span><br><span class="line">$a4 = &apos;&apos;;</span><br><span class="line">$a5 = &apos;0&apos;;</span><br><span class="line">$a6 = &apos;null&apos;;</span><br><span class="line">$a7 = array();</span><br><span class="line">$a8 = array(array());</span><br><span class="line"></span><br><span class="line">echo empty($a1) ? &apos;true&apos; : &apos;false&apos;;             //true</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo empty($a2) ? &apos;true&apos; : &apos;false&apos;;             //true</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo empty($a3) ? &apos;true&apos; : &apos;false&apos;;             //true</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo empty($a4) ? &apos;true&apos; : &apos;false&apos;;             //true</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo empty($a5) ? &apos;true&apos; : &apos;false&apos;;             //false  true</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo empty($a6) ? &apos;true&apos; : &apos;false&apos;;             //false</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo empty($a7) ? &apos;true&apos; : &apos;false&apos;;             //true</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">echo empty($a8) ? &apos;true&apos; : &apos;false&apos;;             //true  false</span><br><span class="line">echo &quot;&lt;hr/&gt;&quot;;</span><br></pre></td></tr></table></figure><a id="more"></a><hr><h5 id="2-写出如下程序的输出结果（考点：变量引用）"><a href="#2-写出如下程序的输出结果（考点：变量引用）" class="headerlink" title="2. 写出如下程序的输出结果（考点：变量引用）"></a>2. 写出如下程序的输出结果（考点：变量引用）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$test = &apos;aaaaaa&apos;;</span><br><span class="line">$abc = &amp;$test;</span><br><span class="line">unset($test);</span><br><span class="line"></span><br><span class="line">echo $abc;              //aaaaaa</span><br><span class="line">echo $test;             //undefined valiable</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;hr/&gt;&quot;;</span><br></pre></td></tr></table></figure><hr><h5 id="3-写出如下程序的输出结果（考点：静态变量）"><a href="#3-写出如下程序的输出结果（考点：静态变量）" class="headerlink" title="3. 写出如下程序的输出结果（考点：静态变量）"></a>3. 写出如下程序的输出结果（考点：静态变量）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$count = 5;</span><br><span class="line">function get_count()&#123;</span><br><span class="line">        static $count = 0;</span><br><span class="line">        return $count++;</span><br><span class="line">&#125;</span><br><span class="line">echo $count;            //5</span><br><span class="line">++$count;</span><br><span class="line"></span><br><span class="line">echo get_count();       //0</span><br><span class="line">echo get_count();       //1</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;hr/&gt;&quot;;</span><br></pre></td></tr></table></figure><hr><h5 id="4-写出如下程序的输出结果（考点：全局变量作用域）"><a href="#4-写出如下程序的输出结果（考点：全局变量作用域）" class="headerlink" title="4. 写出如下程序的输出结果（考点：全局变量作用域）"></a>4. 写出如下程序的输出结果（考点：全局变量作用域）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$GLOBALS[&apos;var1&apos;] = 5;</span><br><span class="line">$var2 = 1;</span><br><span class="line">function get_value()&#123;</span><br><span class="line">        global $var2;</span><br><span class="line">        $var1 = 0;</span><br><span class="line">        return $var2++;</span><br><span class="line">&#125;</span><br><span class="line">get_value();</span><br><span class="line"></span><br><span class="line">echo $var1;     //5</span><br><span class="line">echo $var2;     //2</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;hr/&gt;&quot;;</span><br></pre></td></tr></table></figure><p><strong>全局变量的作用域问题：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function destroy_foo() </span><br><span class="line">&#123;</span><br><span class="line">        global $foo;</span><br><span class="line">        unset($foo);</span><br><span class="line">        // unset($GLOBALS[&apos;foo&apos;]);//清除全局变量$foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$foo = &apos;bar&apos;;</span><br><span class="line">destroy_foo();</span><br><span class="line">echo $foo;      //bar</span><br></pre></td></tr></table></figure></p><p>unset($foo) 的作用是清除函数内的 $foo变量，并没有清除全局变量的$foo，因此执行此函数后，变量仍存在。想要彻底清除$foo，需要清除掉全局变量里的$foo值。</p><hr><h5 id="5-写出如下程序的输出结果（考点：unset对于数组的作用）"><a href="#5-写出如下程序的输出结果（考点：unset对于数组的作用）" class="headerlink" title="5. 写出如下程序的输出结果（考点：unset对于数组的作用）"></a>5. 写出如下程序的输出结果（考点：unset对于数组的作用）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function get_arr($arr)&#123;</span><br><span class="line">        unset($arr[0]);</span><br><span class="line">&#125;</span><br><span class="line">function get_arr2(&amp;$arr)&#123;</span><br><span class="line">        unset($arr[0]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$arr1 = array(1, 2);</span><br><span class="line">$arr2 = array(1, 2);</span><br><span class="line"></span><br><span class="line">get_arr($arr1);</span><br><span class="line">get_arr2($arr2);</span><br><span class="line"></span><br><span class="line">echo count($arr1);      //2</span><br><span class="line">echo count($arr2);      //1</span><br><span class="line"></span><br><span class="line">echo &quot;&lt;hr/&gt;&quot;;</span><br></pre></td></tr></table></figure><hr><h5 id="6-字符串强制转换为整型为0"><a href="#6-字符串强制转换为整型为0" class="headerlink" title="6. 字符串强制转换为整型为0"></a>6. 字符串强制转换为整型为0</h5><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;a1&quot;  =&gt; 0  //首字母a为字符，强制转换为整型为0</span><br><span class="line">&quot;1a&quot;  =&gt; 1      //首字母1为数字，强制转换为整型为1</span><br></pre></td></tr></table></figure></p><hr><h5 id="7-amp-与-amp-amp-的区别"><a href="#7-amp-与-amp-amp-的区别" class="headerlink" title="7. &amp; 与 &amp;&amp; 的区别"></a>7. &amp; 与 &amp;&amp; 的区别</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$a = 10;$b = 10;</span><br><span class="line"></span><br><span class="line">if($a &lt; 4 &amp;&amp; (++$a &gt; 10))&#123;&#125;</span><br><span class="line">if($b &lt; 4 &amp; (++$b &gt; 10))&#123;&#125;</span><br><span class="line"></span><br><span class="line">echo $a;</span><br><span class="line">echo $b;</span><br></pre></td></tr></table></figure><p>&amp; 是按位与操作符，两边都为 1 则为 1。左侧为false，也会运行右侧的代码。<br>&amp;&amp; 是逻辑与操作符，左侧为false，不运行右侧的代码。<br>相同点：都可进行 and 判断。</p><hr><h5 id="8-unset对于数组的作用"><a href="#8-unset对于数组的作用" class="headerlink" title="8. unset对于数组的作用"></a>8. unset对于数组的作用</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$arr = array(</span><br><span class="line">        1=&gt; &apos;a&apos;,</span><br><span class="line">        2=&gt; &apos;bb&apos;,</span><br><span class="line">        3=&gt; &apos;c&apos;,</span><br><span class="line">        4=&gt; &apos;dd&apos;</span><br><span class="line">        );</span><br><span class="line">foreach($arr as $k=&gt;&amp;$v)&#123;</span><br><span class="line">        if($k == 3)&#123;</span><br><span class="line">                $v = &apos;x&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        // unset($v);   //保持键4 的值不变</span><br><span class="line">&#125;</span><br><span class="line">foreach($arr as $k=&gt;$v)&#123;</span><br><span class="line">        echo &quot;&#123;$k&#125;\t&#123;$v&#125;&lt;br/&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：array(‘a’, ‘bb’, ‘x’, ‘x’);<br><em>为什么结果是这样？</em><br>　　因为满足条件语句之后，就把数组的值指向了’x’的内存地址了。因此后面的数组索引都是指向了’x’。<br><em>怎么能让 键4 的值不变？</em><br>　　使用 unset($v) 来清除 指针。</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-写出如下程序的输出结果（考点：变量判空）&quot;&gt;&lt;a href=&quot;#1-写出如下程序的输出结果（考点：变量判空）&quot; class=&quot;headerlink&quot; title=&quot;1. 写出如下程序的输出结果（考点：变量判空）&quot;&gt;&lt;/a&gt;1. 写出如下程序的输出结果（考点：变量判空）&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$a1 = null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a2 = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a3 = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a4 = &amp;apos;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a5 = &amp;apos;0&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a6 = &amp;apos;null&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a7 = array();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$a8 = array(array());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo empty($a1) ? &amp;apos;true&amp;apos; : &amp;apos;false&amp;apos;;             //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo empty($a2) ? &amp;apos;true&amp;apos; : &amp;apos;false&amp;apos;;             //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo empty($a3) ? &amp;apos;true&amp;apos; : &amp;apos;false&amp;apos;;             //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo empty($a4) ? &amp;apos;true&amp;apos; : &amp;apos;false&amp;apos;;             //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo empty($a5) ? &amp;apos;true&amp;apos; : &amp;apos;false&amp;apos;;             //false  true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo empty($a6) ? &amp;apos;true&amp;apos; : &amp;apos;false&amp;apos;;             //false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo empty($a7) ? &amp;apos;true&amp;apos; : &amp;apos;false&amp;apos;;             //true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;&amp;lt;br/&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo empty($a8) ? &amp;apos;true&amp;apos; : &amp;apos;false&amp;apos;;             //true  false&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;&amp;lt;hr/&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="面试" scheme="http://yoursite.com/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令之netstat</title>
    <link href="http://yoursite.com/2018/06/11/Linux%E5%91%BD%E4%BB%A4%E4%B9%8Bnetstat/"/>
    <id>http://yoursite.com/2018/06/11/Linux命令之netstat/</id>
    <published>2018-06-11T08:06:20.000Z</published>
    <updated>2018-07-20T06:07:54.826Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">netstat命令各个参数说明如下：</span><br><span class="line">-a : 显示全部端口</span><br><span class="line">　　-t : 指明显示TCP端口</span><br><span class="line">　　-u : 指明显示UDP端口</span><br><span class="line">　　-l : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)</span><br><span class="line">　　-p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。</span><br><span class="line">　　-n : 不进行DNS轮询，显示IP(可以加速操作)</span><br></pre></td></tr></table></figure><a id="more"></a><p>即可显示当前服务器上所有端口及进程服务，于grep结合可查看某个具体端口及服务情况··<br><code>netstat -ntlp   //查看当前所有tcp端口·</code><br><code>netstat -ntulp |grep 80   //查看所有80端口使用情况·</code><br><code>netstat -an | grep 3306   //查看所有3306端口使用情况·</code></p><p><strong>查看一台服务器上面哪些服务及端口</strong><br><code>netstat  -lanp</code></p><p><strong>查看一个服务有几个端口。比如要查看mysqld</strong><br><code>ps -ef |grep mysqld</code></p><p><strong>查看某一端口的连接数量,比如3306端口</strong><br><code>netstat -pnt |grep :3306 |wc</code></p><p><strong>查看某一端口的连接客户端IP 比如3306端口</strong><br><code>netstat -anp |grep 3306</code></p><p><code>netstat -an 查看网络端口</code></p><p><code>lsof -i :port，使用lsof -i :port就能看见所指定端口运行的程序，同时还有当前连接。</code></p><p><code>nmap 端口扫描</code><br><code>netstat -nupl  (UDP类型的端口)</code><br><code>netstat -ntpl  (TCP类型的端口)</code><br><code>netstat -anp 显示系统端口使用情况</code></p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;netstat命令各个参数说明如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-a : 显示全部端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　-t : 指明显示TCP端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　-u : 指明显示UDP端口&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　-l : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　-p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　-n : 不进行DNS轮询，显示IP(可以加速操作)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="Linux命令" scheme="http://yoursite.com/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>PHP 传值与传引用详解</title>
    <link href="http://yoursite.com/2018/06/05/PHP%20%E4%BC%A0%E5%80%BC%E4%B8%8E%E4%BC%A0%E5%BC%95%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/06/05/PHP 传值与传引用详解/</id>
    <published>2018-06-05T10:03:52.000Z</published>
    <updated>2018-07-20T06:07:54.409Z</updated>
    
    <content type="html"><![CDATA[<p>首先，看两个示例，进行比较：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a = 1; $b = &amp;$a; $c = 2; $a = &amp;$c; $c = 2;</span><br><span class="line">echo $a.&apos;&lt;br/&gt;&apos;;</span><br><span class="line">echo $b.&apos;&lt;br/&gt;&apos;;</span><br><span class="line">echo $c.&apos;&lt;br/&gt;&apos;;</span><br><span class="line">echo &quot;&lt;hr/&gt;&quot;;</span><br></pre></td></tr></table></figure></p><p>此时，$a、$b、$c 的值是多少？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a = 1; $b = &amp;$a; $c = 2; $c = &amp;$a; $c = 2;</span><br><span class="line">echo $a.&apos;&lt;br/&gt;&apos;;</span><br><span class="line">echo $b.&apos;&lt;br/&gt;&apos;;</span><br><span class="line">echo $c.&apos;&lt;br/&gt;&apos;;</span><br><span class="line">echo &quot;&lt;hr/&gt;&quot;;</span><br></pre></td></tr></table></figure><p>此时，$a、$b、$c 的值又是多少？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a = 1; $b = &amp;$a; $c = 2; $c = &amp;$a;</span><br><span class="line">echo $a.&apos;&lt;br/&gt;&apos;;</span><br><span class="line">echo $b.&apos;&lt;br/&gt;&apos;;</span><br><span class="line">echo $c.&apos;&lt;br/&gt;&apos;;</span><br><span class="line">echo &quot;&lt;hr/&gt;&quot;;</span><br></pre></td></tr></table></figure><p>此时，$a、$b、$c 的值又是多少？</p><p><em>（先不要着急往下看，文章的末尾会附属答案。）</em><br><a id="more"></a></p><p>下面对赋值与赋引用进行说明。<br>再看个示例，进行说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$a = 10;//将常量值赋给变量，会为a分配内存空间</span><br><span class="line">$b = $a;//变量赋值给变量，是不是copy了一份副本，b也分配了内存空间呢？</span><br><span class="line">$a = &amp;$c;//引用是不会为c分配空间的，c和a是共用一份空间的。</span><br><span class="line">         //此时，a和c都指向同一个内存空间，且为空。（注：a就不是10了）。</span><br><span class="line"></span><br><span class="line">echo $a;//无输出</span><br><span class="line">echo $c;//无输出</span><br><span class="line">echo PHP_EOL;</span><br><span class="line">echo $b;//由于b是副本，输出10</span><br><span class="line"></span><br><span class="line">$a = 5;</span><br><span class="line">echo $c;//输出5，因为a和c 是指向同一个内存空间</span><br><span class="line">echo PHP_EOL;</span><br><span class="line">echo $b;//由于b是副本，对a的操作不会影响b，输出10</span><br></pre></td></tr></table></figure></p><p><strong>（1）赋值</strong><br>由上面示例可看出，将常量值赋值给变量，会分配内存空间（属于新建变量）；当将变量赋值给变量，只是拷贝一份副本，并不会重新分配内存空间，PHP底层变量计数会加1。只有当这两个变量中的其中任一个改变，才会重新分配内存空间（属于新建变量），且此两个变量的更改与否互相无关。</p><p><strong>（2）赋引用</strong><br>&amp;赋引用的时候，视为一个变量定义了一个别名，增加了一个对内存空间的引用。改变其中一个，会影响其他的引用。而使用unset()时，只是断开了对变量内存空间的引用，内存空间不会释放（底层就是释放了指向内存空间的指针）。<br>由上面示例可看出，赋引用的先后是有影响的。$a=&amp;$c 指把$c的引用地址赋值给$a，且$c的引用地址对应的值为空，因此$a=$c为空。若$c=&amp;$a 指把$a的引用地址赋值给$c，且$a的引用地址对应的值为10，因此$a=$c=10。</p><font color="red"><strong>划重点：赋引用的时候，先后赋引用的顺序是有影响的。</strong></font><hr><font color="red"><strong>示例答案：</strong><br>示例一：$a=2,$b=1,$c=2;<br>示例二：$a=2,$b=2,$c=2;<br>示例三：$a=1,$b=1,$c=1;<br></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，看两个示例，进行比较：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$a = 1; $b = &amp;amp;$a; $c = 2; $a = &amp;amp;$c; $c = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $a.&amp;apos;&amp;lt;br/&amp;gt;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $b.&amp;apos;&amp;lt;br/&amp;gt;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $c.&amp;apos;&amp;lt;br/&amp;gt;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;&amp;lt;hr/&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;此时，$a、$b、$c 的值是多少？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$a = 1; $b = &amp;amp;$a; $c = 2; $c = &amp;amp;$a; $c = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $a.&amp;apos;&amp;lt;br/&amp;gt;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $b.&amp;apos;&amp;lt;br/&amp;gt;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $c.&amp;apos;&amp;lt;br/&amp;gt;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;&amp;lt;hr/&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时，$a、$b、$c 的值又是多少？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$a = 1; $b = &amp;amp;$a; $c = 2; $c = &amp;amp;$a;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $a.&amp;apos;&amp;lt;br/&amp;gt;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $b.&amp;apos;&amp;lt;br/&amp;gt;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo $c.&amp;apos;&amp;lt;br/&amp;gt;&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;&amp;lt;hr/&amp;gt;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;此时，$a、$b、$c 的值又是多少？&lt;/p&gt;
&lt;p&gt;&lt;em&gt;（先不要着急往下看，文章的末尾会附属答案。）&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="PHP知识点" scheme="http://yoursite.com/tags/PHP%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>接口文档说明</title>
    <link href="http://yoursite.com/2018/06/04/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E/"/>
    <id>http://yoursite.com/2018/06/04/接口文档说明/</id>
    <published>2018-06-04T10:35:31.000Z</published>
    <updated>2018-07-20T06:07:54.731Z</updated>
    
    <content type="html"><![CDATA[<p>接口文档编写格式：</p><p>服务名称：<br>video-clip-repeat</p><p>需求概述：<br>很多视频是由相同片段重复播放合成，这种视频信息量低，用户观看体验差，检测出此类视频能有效降低feed、大搜等badcase。</p><p>核心功能：<br>检测出视频是否包含重复片段，如果包含则给出重复片段时间点。</p><a id="more"></a><p>错误码表：</p><table><thead><tr><th>错误码</th><th>错误信息</th><th>解释</th></tr></thead><tbody><tr><td>0</td><td>Success</td><td>成功</td></tr><tr><td>1</td><td>Failed to parse input json.</td><td>配置文件解析错误</td></tr><tr><td>2</td><td>Not found KEY:video_url in input json</td><td>json格式里没有video_url字段</td></tr><tr><td>3</td><td>Video_url value is NULL</td><td>video_url字段的内容为空</td></tr></tbody></table><p>返回信息格式：</p><table><thead><tr><th>参数</th><th>参数类型</th><th>必须</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>err_no</td><td>uint32</td><td>是</td><td>错误码</td><td>0正常，非零错误</td></tr><tr><td>err_msg</td><td>string</td><td>是</td><td>错误信息</td><td>参考错误码表</td></tr><tr><td>result</td><td>string</td><td>否</td><td></td><td>只在err_no为0时有结果</td></tr></tbody></table><p>接口名称：<br>1、接口地址：<br><a href="http://xxxx:8120/xxx" target="_blank" rel="noopener">http://xxxx:8120/xxx</a></p><p>2、HTTP方法：POST</p><p>3、请求参数：<br>格式：json</p><table><thead><tr><th>参数</th><th>类型</th><th>是否必选</th><th>说明     </th></tr></thead><tbody><tr><td>video_url</td><td>string</td><td>是</td><td>视频的url链接，必选参数，不能为空</td></tr><tr><td>type_name</td><td>string</td><td>是</td><td>固定值：video-clip-repeat</td></tr></tbody></table><p>4、输出参数：<br>格式：json</p><table><thead><tr><th>参数</th><th></th><th></th><th>类型</th><th>必须</th><th>说明     </th></tr></thead><tbody><tr><td>ratio</td><td></td><td></td><td>double</td><td>是</td><td>重复片段占视频时长的比例</td></tr><tr><td>video_time</td><td></td><td></td><td>string</td><td>是</td><td>视频总时长</td></tr><tr><td>result</td><td></td><td></td><td>json</td><td>是</td><td>列表列表里面是重复片段组的json</td></tr><tr><td></td><td>scopes</td><td></td><td>json</td><td>是</td><td>列表列表包含了每个重复片段的起始时间</td></tr><tr><td></td><td></td><td>start_time</td><td>string</td><td>是</td><td>片段起始时间，例如：”00:01:58”</td></tr><tr><td></td><td></td><td>end_time</td><td>string</td><td>是</td><td>片段终止时间，例如：”00:01:58”</td></tr></tbody></table><p>5、正确返回值示例：<br>{<br>    “log_id”: 2874085801,<br>    “words_result”: [{<br>        “location”: {<br>            “left”: 69,<br>            “top”: 35,<br>            “width”: 510,<br>            “height”: 100<br>        },<br>        “words”: “DOO”,<br>        “chars”: [{<br>            “location”: {<br>                “left”: 84,<br>                “top”: 40,<br>                “width”: 330,<br>                “height”: 90<br>            },<br>            “char”: “DOO”<br>        }]<br>    }],<br>    “words_result_num”: 1<br>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接口文档编写格式：&lt;/p&gt;
&lt;p&gt;服务名称：&lt;br&gt;video-clip-repeat&lt;/p&gt;
&lt;p&gt;需求概述：&lt;br&gt;很多视频是由相同片段重复播放合成，这种视频信息量低，用户观看体验差，检测出此类视频能有效降低feed、大搜等badcase。&lt;/p&gt;
&lt;p&gt;核心功能：&lt;br&gt;检测出视频是否包含重复片段，如果包含则给出重复片段时间点。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
      <category term="接口" scheme="http://yoursite.com/categories/PHP/%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="接口" scheme="http://yoursite.com/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>接口代码架构</title>
    <link href="http://yoursite.com/2018/06/04/%E6%8E%A5%E5%8F%A3%E4%BB%A3%E7%A0%81%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2018/06/04/接口代码架构/</id>
    <published>2018-06-04T10:35:22.000Z</published>
    <updated>2018-07-20T06:07:55.346Z</updated>
    
    <content type="html"><![CDATA[<p>下面列出接口代码架构格式，不一定完全一致，大概满足需求即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">— InterfaceBase.php //接口基文件</span><br><span class="line">— InterfaceFactory.php     //接口工厂文件，即入口文件（按需求使用）</span><br><span class="line">— GoodInterface.php //商品接口基文件</span><br><span class="line">— CartInterface.php //购物车接口基文件</span><br><span class="line">— Output.php //定义错误码文件</span><br><span class="line">— ......//其它接口文件</span><br><span class="line">— api_1/// 1版本的接口文件夹</span><br><span class="line">— — Good.php   //商品接口文件</span><br><span class="line">— — Cart.php   //购物车接口文件</span><br><span class="line">— — ......   //其它接口文件</span><br><span class="line">— api_2///2版本的接口文件夹</span><br><span class="line">— — Good.php   //商品接口文件</span><br><span class="line">— — ......  //其它接口文件</span><br></pre></td></tr></table></figure></p><p>下面附属重要文件的代码格式，一般不需要改变。<br><a id="more"></a></p><h5 id="接口基文件：InterfaceBase-php"><a href="#接口基文件：InterfaceBase-php" class="headerlink" title="接口基文件：InterfaceBase.php"></a>接口基文件：InterfaceBase.php</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * @file InterfaceBase.php</span><br><span class="line"> * @author ***</span><br><span class="line"> * @date 2017/05/26</span><br><span class="line"> * @brief </span><br><span class="line"> *  </span><br><span class="line"> **/</span><br><span class="line">class Service_data_Ocr_Base_OcrBase &#123;</span><br><span class="line">    protected $_fixed_args = null;      //接口默认参数</span><br><span class="line">    protected $_args = null;            //接口处理参数</span><br><span class="line">    protected $_requestData;            //请求数据</span><br><span class="line">    protected $_resizeImage = null;     //压缩图片数据</span><br><span class="line">    protected $_ocrResizeFactor = 1.0;  //压缩因子</span><br><span class="line">    protected $_service_name = null;    //请求服务</span><br><span class="line">    protected $_appid = null;           //用户APPID</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *@param service name &amp; fixed args</span><br><span class="line">     *@return null</span><br><span class="line">     */</span><br><span class="line">    public function __construct($service_name,$fixed_args) &#123;</span><br><span class="line">        $this-&gt;_service_name = $service_name;</span><br><span class="line">        $this-&gt;_fixed_args = $fixed_args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 入口方法</span><br><span class="line">     *@param input param</span><br><span class="line">     *@return null</span><br><span class="line">     */</span><br><span class="line">    public function run(&amp;$arrInput) &#123;</span><br><span class="line">        $this-&gt;_checkParams($arrInput);</span><br><span class="line">        $this-&gt;_buildRequest($arrInput);</span><br><span class="line">        $this-&gt;_appid = $arrInput[&apos;appid&apos;];</span><br><span class="line">        $rpcResponse = $this-&gt;_getResult();</span><br><span class="line">        $result = $this-&gt;_buildResponse($arrInput,$rpcResponse);</span><br><span class="line">        return $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 检测传入参数数据</span><br><span class="line">     *@param &amp;$arrInput input params from client</span><br><span class="line">     *@return null</span><br><span class="line">     */</span><br><span class="line">    protected function _checkParams(&amp;$arrInput) &#123;</span><br><span class="line">        $ori_image_size = strlen($arrInput[&apos;image&apos;]);</span><br><span class="line">        $this-&gt;_checkImage($arrInput);</span><br><span class="line">        $resize_image_size = strlen($arrInput[&apos;image&apos;]);</span><br><span class="line">        if($resize_image_size !== $ori_image_size) &#123;</span><br><span class="line">            $this-&gt;_resizeImage = $arrInput[&apos;image&apos;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 对图片进行处理 （单独模块拉出来实现，避免一个方法的实现内容过长）</span><br><span class="line">     *@param &amp;$arrInput, $ocrResizeFactor</span><br><span class="line">     *@return null</span><br><span class="line">     */</span><br><span class="line">    protected function _checkImage(&amp;$arrInput) &#123;</span><br><span class="line">        //对图片进行处理</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *@param &amp;$arrInput, $ocrResizeFactor</span><br><span class="line">     * @param: $refusedLen 直接拒绝图片尺寸阈值;$refusedSize 直接拒绝图片大小阈值;$minBoderLen: 直接拒绝的最小尺寸图片</span><br><span class="line">     * @param: $resizeLen 符合压缩图片的边长上限; $resizeSize 符合压缩条件的大小上限</span><br><span class="line">     * @param: $resizedSizeThread 压缩后图片是否请求后端的条件大小</span><br><span class="line">     * @return null</span><br><span class="line">     */</span><br><span class="line">    protected function _checkImageExtra(&amp;$arrInput, $refusedLen, $refusedSize, $resizeLen, $resizeSize, $resizedSizeThread, $minBoderLen = 15) &#123;</span><br><span class="line">        pass;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 单独接口处理请求参数，在每个接口中实现</span><br><span class="line">     *@param build args</span><br><span class="line">     *@return </span><br><span class="line">     */</span><br><span class="line">    protected function _buildArgs(&amp;$arrInput) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 整合请求参数数据</span><br><span class="line">     *@param arrInput</span><br><span class="line">     *@return</span><br><span class="line">     */</span><br><span class="line">    protected function _buildRequest(&amp;$arrInput) &#123;</span><br><span class="line">        $this-&gt;_buildArgs($arrInput);   //调用接口处理参数并返回处理结果</span><br><span class="line">        $appid = $arrInput[&apos;appid&apos;];</span><br><span class="line">        $requestData = array(</span><br><span class="line">            &apos;appid&apos; =&gt; $appid,</span><br><span class="line">            &apos;logid&apos; =&gt; intval(Bd_Log::genLogID()),</span><br><span class="line">            &apos;format&apos; =&gt; &apos;json&apos;,</span><br><span class="line">            &apos;from&apos; =&gt; &apos;openapi&apos;,</span><br><span class="line">            &apos;cmdid&apos; =&gt; &apos;123&apos;,</span><br><span class="line">            &apos;clientip&apos; =&gt; strval($_SERVER[&apos;HTTP_X_REAL_IP&apos;]),</span><br><span class="line">            &apos;data&apos; =&gt; base64_encode($this-&gt;_args),</span><br><span class="line">        );</span><br><span class="line">        $this-&gt;_requestData = $requestData;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 向后端请求数据</span><br><span class="line">     *@param null</span><br><span class="line">     *@return ral response </span><br><span class="line">     */    </span><br><span class="line">    protected function  _getResult() &#123;</span><br><span class="line">        $service_name = $this-&gt;_service_name;</span><br><span class="line">        $arrayHeader = array(</span><br><span class="line">            &apos;pathinfo&apos;   =&gt; &apos;GeneralClassifyService/classify&apos;,</span><br><span class="line">            &apos;Content-Type&apos; =&gt; &apos;application/json&apos;,</span><br><span class="line">        );        </span><br><span class="line">        $arrayReturn = ral($service_name, &apos;post&apos;, $this-&gt;_requestData, *, $arrayHeader);</span><br><span class="line">        $intErrno = ral_get_errno();</span><br><span class="line">        $strErrmsg = ral_get_error();</span><br><span class="line">        if ($intErrno != 0) &#123;</span><br><span class="line">            Bd_Log::warning(&quot;get from ocr ral error.[$intErrno][$strErrmsg] from service_name[$service_name]&quot;);</span><br><span class="line">            throw new Exception(&apos;&apos;, Service_Data_Output::ERRNUM_INTERNAL_ERROR);</span><br><span class="line">        &#125;        </span><br><span class="line">        return $arrayReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 整合数据并返回</span><br><span class="line">     *@param input params &amp; return from ral</span><br><span class="line">     *@return </span><br><span class="line">     */</span><br><span class="line">    protected function _buildResponse($arrInput,$arrayReturn) &#123;</span><br><span class="line">        Util::dealErrResponse($arrayReturn);        //处理错误输出</span><br><span class="line">        $decodedResult = base64_decode($arrayReturn[&apos;result&apos;]);</span><br><span class="line">        $result = json_decode($decodedResult, $assoc=true);</span><br><span class="line">        return $this-&gt;buildResponse($arrInput, $result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *@param arrInput, array        //用户传入数据</span><br><span class="line">     *@param ocrResult, array       //后端处理后数据</span><br><span class="line">     *@return openapiResult, array  //返回整合数组</span><br><span class="line">     */</span><br><span class="line">    protected function buildResponse(&amp;$arrInput, &amp;$ocrResult) &#123;</span><br><span class="line">        // 建立数据并返回</span><br><span class="line">        return $openapiResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口工厂文件：InterfaceFactory-php"><a href="#接口工厂文件：InterfaceFactory-php" class="headerlink" title="接口工厂文件：InterfaceFactory.php"></a>接口工厂文件：InterfaceFactory.php</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line">* @file InterfaceFactory.php</span><br><span class="line">* @brief </span><br><span class="line">* @author ** *</span><br><span class="line">* @version </span><br><span class="line">* @date 2016-08-03</span><br><span class="line"> */</span><br><span class="line">class InterfaceFactory &#123;</span><br><span class="line">    /**</span><br><span class="line">     *@param arrInput</span><br><span class="line">     *@return object of Service_Data_InterfaceProxy</span><br><span class="line">     */</span><br><span class="line">    public static function create(&amp;$arrInput) &#123;</span><br><span class="line">        switch ($arrInput[&apos;openservice&apos;]) &#123;</span><br><span class="line">            case &apos;good&apos;:</span><br><span class="line">                switch ($arrInput[&apos;classify_type&apos;]) &#123;</span><br><span class="line">                    case &apos;clothing&apos;:</span><br><span class="line">                        if (strtolower($arrInput[&apos;version&apos;]) == &apos;v1&apos;) &#123;</span><br><span class="line">                            return new api_v1/ClothingInterface($arrInput);</span><br><span class="line">                        &#125;else &#123;</span><br><span class="line">                            return new api_v2/ClothingInterface($arrInput);</span><br><span class="line">                        &#125;</span><br><span class="line">                    case &apos;shoes&apos;:</span><br><span class="line">                        if (strtolower($arrInput[&apos;version&apos;]) == &apos;v2&apos;) &#123;</span><br><span class="line">                            return new api_v2/ShoesInterface($arrInput);</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            return new api_v1/ShoesInterface($arrInput);</span><br><span class="line">                        &#125;</span><br><span class="line">                    default:</span><br><span class="line">                        throw new Exception(&apos;&apos;, Output::ERRNUM_METHOD_NOT_SUPPORT);</span><br><span class="line">                &#125;</span><br><span class="line">            case &apos;cart&apos;:</span><br><span class="line">                return new CartInterface($arrInput);</span><br><span class="line">            default:</span><br><span class="line">                try &#123;</span><br><span class="line">                    $className = ucfirst($arrInput[&apos;openservice&apos;]).&quot;Interface&quot;;</span><br><span class="line">                    $clazz = new ReflectionClass($className);</span><br><span class="line">                    return $clazz-&gt;newInstance($arrInput);</span><br><span class="line">                &#125; catch (Exception $e) &#123;</span><br><span class="line">                    throw new Exception(&apos;&apos;, Output::ERRNUM_METHOD_NOT_SUPPORT);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="商品接口文件：GoodInterface-php"><a href="#商品接口文件：GoodInterface-php" class="headerlink" title="商品接口文件：GoodInterface.php"></a>商品接口文件：GoodInterface.php</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @file GoodInterface.php</span><br><span class="line"> * @author ***</span><br><span class="line"> * @date 2017/11/16</span><br><span class="line"> * @brief </span><br><span class="line"> *  </span><br><span class="line"> **/</span><br><span class="line">class GoodInterface extends InterfaceBase &#123;</span><br><span class="line">    /*</span><br><span class="line">     *@param null</span><br><span class="line">     *@return null</span><br><span class="line">     */</span><br><span class="line">    public function __construct() &#123;</span><br><span class="line">        $fixed_args = &quot;encoding=1&amp;recg_type=seq&amp;international=1&amp;save_img=true&quot;; //接口默认参数</span><br><span class="line">        parent::__construct(&quot;serverName&quot;,$fixed_args); //传入基文件数据</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户处理对应接口传入数据</span><br><span class="line">     *@param input params outside</span><br><span class="line">     *@return protected memerber:args</span><br><span class="line">     */    </span><br><span class="line">    protected function _buildArgs(&amp;$arrInput) &#123;</span><br><span class="line">        if($arrInput[&apos;object_type&apos;] == &apos;webimage_s1&apos;)&#123;</span><br><span class="line">            $this-&gt;_service_name = &apos;serverName01&apos;;</span><br><span class="line">            $object_type = &apos;webimage_v1&apos;;</span><br><span class="line">        &#125;else if($arrInput[&apos;object_type&apos;] == &apos;webimage_s2&apos;)&#123;</span><br><span class="line">            $this-&gt;_service_name = &apos;serverName01&apos;;</span><br><span class="line">            $object_type = &apos;webimage_v2&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        $args = Util::dealArgs($arrInput);</span><br><span class="line">        $this-&gt;_args = $this-&gt;_args . $args;</span><br><span class="line">        if(isset($arrInput[&apos;language_type&apos;]))&#123;</span><br><span class="line">            $this-&gt;_args = $this-&gt;_args . &quot;&amp;languagetype=CHN_ENG&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $image = $arrInput[&apos;image&apos;];</span><br><span class="line">        //组合处理参数，供请求函数调用</span><br><span class="line">        $this-&gt;_args = $this-&gt;_fixed_args . $this-&gt;_args . &quot;&amp;object_type=&quot; .$object_type. &quot;&amp;image=&quot; .$image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="购物车接口文件：CartInterface-php"><a href="#购物车接口文件：CartInterface-php" class="headerlink" title="购物车接口文件：CartInterface.php"></a>购物车接口文件：CartInterface.php</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * @file CartInterface.php</span><br><span class="line"> * @author ***</span><br><span class="line"> * @date 2018/3/9</span><br><span class="line"> * @brief </span><br><span class="line"> *  </span><br><span class="line"> **/</span><br><span class="line">class CartInterface extends InterfaceBase &#123;</span><br><span class="line">    /*</span><br><span class="line">     *@param null</span><br><span class="line">     *@return null</span><br><span class="line">     */</span><br><span class="line">    public function __construct() &#123;</span><br><span class="line">        $fixed_args = &quot;&quot;;</span><br><span class="line">        parent::__construct(&quot;serverName&quot;,$fixed_args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** </span><br><span class="line">     *@param input params outside</span><br><span class="line">     *@return protected memerber:args</span><br><span class="line">     */</span><br><span class="line">    protected function _buildArgs(&amp;$arrInput) &#123;</span><br><span class="line">        $image = $arrInput[&apos;image&apos;];</span><br><span class="line">        $this-&gt;_args = &quot;object_type=vat_invoice&amp;image=$image&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 接口自定义返回数据</span><br><span class="line">     *@param arrInput, array</span><br><span class="line">     *@param ocrResult, array</span><br><span class="line">     *@return openapiResult, array</span><br><span class="line">     */</span><br><span class="line">    protected function buildResponse(&amp;$arrInput, &amp;$ocrResult) &#123;</span><br><span class="line">        $words_result = $ocrResult[&apos;ret&apos;];</span><br><span class="line">        $words_result_num = count($words_result);</span><br><span class="line">        if($words_result_num == 0)&#123;</span><br><span class="line">            $words_result = array();</span><br><span class="line">        &#125;</span><br><span class="line">        return array(</span><br><span class="line">            &apos;words_result_num&apos; =&gt; $words_result_num,</span><br><span class="line">            &apos;words_result&apos; =&gt; $words_result</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="版本1对应的商品接口文件：Good-php"><a href="#版本1对应的商品接口文件：Good-php" class="headerlink" title="版本1对应的商品接口文件：Good.php"></a>版本1对应的商品接口文件：Good.php</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @file Good.php</span><br><span class="line"> * @author ***</span><br><span class="line"> * @date 2017/11/16</span><br><span class="line"> * @brief </span><br><span class="line"> *  </span><br><span class="line"> **/</span><br><span class="line">class Good extends GoodInterface &#123;</span><br><span class="line">    /*</span><br><span class="line">     *@param null</span><br><span class="line">     *@return null</span><br><span class="line">     */</span><br><span class="line">    public function __construct() &#123; //根据需求可自定义修改</span><br><span class="line">        parent::__construct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 用户处理对应接口传入数据</span><br><span class="line">     *@param input params outside</span><br><span class="line">     *@return protected memerber:args</span><br><span class="line">     */    </span><br><span class="line">    protected function _buildArgs(&amp;$arrInput) &#123;</span><br><span class="line">        $this-&gt;_service_name = &apos;serverName03&apos;;</span><br><span class="line">        $object_type = &apos;webimage_v3&apos;;</span><br><span class="line">        $args = Util::dealArgs($arrInput);</span><br><span class="line">        $this-&gt;_args = $this-&gt;_args . $args;</span><br><span class="line">        if(isset($arrInput[&apos;language_type&apos;]))&#123;</span><br><span class="line">            $this-&gt;_args = $this-&gt;_args . &quot;&amp;languagetype=CHN_ENG&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        $image = $arrInput[&apos;image&apos;];</span><br><span class="line">        //组合处理参数，供请求函数调用</span><br><span class="line">        $this-&gt;_args = $this-&gt;_fixed_args . $this-&gt;_args . &quot;&amp;object_type=&quot; .$object_type. &quot;&amp;image=&quot; .$image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="输出错误整合文件：Output-php"><a href="#输出错误整合文件：Output-php" class="headerlink" title="输出错误整合文件：Output.php"></a>输出错误整合文件：Output.php</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * @author ***</span><br><span class="line"> * @description 输出http请求结果</span><br><span class="line"> */</span><br><span class="line">class Output &#123;</span><br><span class="line">    const ERROR_NO_INVALID_PARAM        = 1;    // 非法参数</span><br><span class="line">    const ERROR_NO_POST_RESPONSE_EMPTY  = 2;    // 后端返回为空</span><br><span class="line">    const ERROR_NO_POST_RESPONSE_ERROR  = 3;    // 后端返回错误</span><br><span class="line">    const ERROR_NO_MOLA_RESPONSE_ERROR  = 4;    // mola返回内容错误</span><br><span class="line">    const ERROR_NO_CACHE_RESPONSE_ERROR = 5;    // cache返回内容错误</span><br><span class="line"></span><br><span class="line">    private static $objTpl = null;                  // 模板对象实例</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param int Errornum to be translated</span><br><span class="line">     * @return string The translated string</span><br><span class="line">     * 根据错误码返回错误文字信息 </span><br><span class="line">     */</span><br><span class="line">    public static function findErrorMsg($intErrNo)</span><br><span class="line">    &#123;</span><br><span class="line">        switch($intErrNo) &#123;</span><br><span class="line">            case self::ERROR_NO_INVALID_PARAM:</span><br><span class="line">                return &apos;参数不合法&apos;;</span><br><span class="line">            case self::ERROR_NO_POST_RESPONSE_EMPTY:</span><br><span class="line">                return &apos;抱歉，后端数据返回为空&apos;;</span><br><span class="line">            case self::ERROR_NO_POST_RESPONSE_ERROR:</span><br><span class="line">                return &apos;抱歉，后端数据返回错误&apos;;</span><br><span class="line">            case self::ERROR_NO_MOLA_RESPONSE_ERROR:</span><br><span class="line">                return &apos;抱歉，MOLA数据返回错误&apos;;</span><br><span class="line">            case self::ERROR_NO_CACHE_RESPONSE_ERROR:</span><br><span class="line">                return &apos;抱歉，CACHE数据返回错误&apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        return &apos;未知错误&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** </span><br><span class="line">     * 根据strCallbackName是否为空，返回json或者jsonp的错误结果</span><br><span class="line">     * @param string </span><br><span class="line">     * @param integer</span><br><span class="line">     * @param string</span><br><span class="line">     * @param array</span><br><span class="line">     * @param array</span><br><span class="line">     * @return </span><br><span class="line">     */</span><br><span class="line">    public static function showErrorJS(</span><br><span class="line">        $strCallbackName,</span><br><span class="line">        $intErrNo,</span><br><span class="line">        $strErrmsg = &apos;&apos;,</span><br><span class="line">        $arrData = array(),</span><br><span class="line">        $arrExtra = array()</span><br><span class="line">    ) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /** </span><br><span class="line">     * 根据strCallbackName是否为空，返回json或者jsonp的成功结果</span><br><span class="line">     * @param string </span><br><span class="line">     * @param array</span><br><span class="line">     * @param array</span><br><span class="line">     * @return </span><br><span class="line">     **/</span><br><span class="line">    public static function showSuccessJS(</span><br><span class="line">        $strCallbackName,</span><br><span class="line">        $arrData,</span><br><span class="line">        $arrExtra = array()</span><br><span class="line">    ) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 返回显示错误信息的json </span><br><span class="line">     * @param integer</span><br><span class="line">     * @param string</span><br><span class="line">     * @param array</span><br><span class="line">     * @param array</span><br><span class="line">     * @return </span><br><span class="line">     */</span><br><span class="line">    public static function showErrorJSON($intErrNo, $strErrmsg = &apos;&apos;, $arrData = array(), $arrExtra = array())</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回包含成功数据信息的json </span><br><span class="line">     * @param array</span><br><span class="line">     * @param array</span><br><span class="line">     * @return </span><br><span class="line">     */</span><br><span class="line">    public static function showSuccessJSON($arrData, $arrExtra = array())</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回显示错误信息的jsonp</span><br><span class="line">     * @param string</span><br><span class="line">     * @param integer</span><br><span class="line">     * @param string</span><br><span class="line">     * @param array</span><br><span class="line">     * @param array</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static function showErrorJSONP(</span><br><span class="line">        $strCallbackName,</span><br><span class="line">        $intErrNo,</span><br><span class="line">        $strErrmsg = &apos;&apos;,</span><br><span class="line">        $arrData = array(),</span><br><span class="line">        $arrExtra = array()</span><br><span class="line">    ) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 返回包含成功数据信息的jsonp</span><br><span class="line">     * @param string</span><br><span class="line">     * @param array</span><br><span class="line">     * @param array</span><br><span class="line">     * @return </span><br><span class="line">     */</span><br><span class="line">    public static function showSuccessJSONP(</span><br><span class="line">        $strCallbackName,</span><br><span class="line">        $arrData,</span><br><span class="line">        $arrExtra = array()</span><br><span class="line">    ) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 显示模版</span><br><span class="line">     * @param string</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static function showSuccessPage($strTemplatePath)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 显示出错模版</span><br><span class="line">     * @param integer</span><br><span class="line">     * @param string</span><br><span class="line">     * @return </span><br><span class="line">     */</span><br><span class="line">    public static function showErrorPage($intErrNo, $strTemplatePath)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取模版对象</span><br><span class="line">     * @param</span><br><span class="line">     * @return object</span><br><span class="line">     */</span><br><span class="line">    public static function getTplInstance()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 如果url上带有debug=true参数，则输出所有模版变量；</span><br><span class="line">     * 如果还带有debugParam参数，则输出特定某一个变量</span><br><span class="line">     * @param</span><br><span class="line">     * @return bool</span><br><span class="line">     */</span><br><span class="line">    public static function makeDebug()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 为openapi定制的输出格式</span><br><span class="line">     * @param array 未经处理的输出格式</span><br><span class="line">     * @param integer int64的日志号</span><br><span class="line">     * @return null</span><br><span class="line">     */</span><br><span class="line">    public static function printOpenapi($arrInput, $intLogid)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="公共处理函数：Util-php"><a href="#公共处理函数：Util-php" class="headerlink" title="公共处理函数：Util.php"></a>公共处理函数：Util.php</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * @file Util.php</span><br><span class="line"> * @author ***</span><br><span class="line"> * @date 2017/06/07 10:57:13</span><br><span class="line"> * @brief </span><br><span class="line"> *  </span><br><span class="line"> **/</span><br><span class="line">class Util &#123;</span><br><span class="line"></span><br><span class="line">    private static $OCR_PASSTHROUGH_PARAMS = array(</span><br><span class="line">        &apos;version&apos; =&gt; &apos;version&apos;,</span><br><span class="line">        &apos;auto_enhance&apos; =&gt; &apos;auto_enhance&apos;,</span><br><span class="line">        &apos;fromproduct&apos; =&gt; &apos;fromproduct&apos;,</span><br><span class="line">    ); </span><br><span class="line"></span><br><span class="line">    /** </span><br><span class="line">     *@param $arrayReturn </span><br><span class="line">     *@return ret</span><br><span class="line">     */</span><br><span class="line">    static public function dealErrResponse($arrayReturn)</span><br><span class="line">    &#123;</span><br><span class="line">        if($arrayReturn[&apos;err_no&apos;] == 0) return;</span><br><span class="line">        if ( $arrayReturn[&apos;err_no&apos;] == 5 ) &#123;</span><br><span class="line">            Bd_Log::addNotice(&apos;ocr_backend_error&apos;, &quot;[&quot; . $arrayReturn[&apos;err_no&apos;] . &quot;][&quot; . $arrayReturn[&apos;err_msg&apos;] . &quot;]&quot;);</span><br><span class="line">            $innerError = json_decode($arrayReturn[&apos;err_msg&apos;], $assoc=true);</span><br><span class="line">            if ( is_array($innerError) ) &#123;</span><br><span class="line">                switch (intval($innerError[&apos;errno&apos;])) &#123;</span><br><span class="line">                    case -1:</span><br><span class="line">                        throw new Exception(&apos;&apos;, Service_Data_Output::ERRNUM_OCR_RECOGNIZE_UNKONWN_ERROR);</span><br><span class="line">                        break;</span><br><span class="line">                    case -2:</span><br><span class="line">                        throw new Exception(&apos;image too large&apos;, Service_Data_Output::ERRNUM_INVALID_IMGSIZE);</span><br><span class="line">                        break;</span><br><span class="line">                    case -3:</span><br><span class="line">                        throw new Exception(&apos;&apos;, Service_Data_Output::ERRNUM_INVALID_IMAGE_FORMAT);</span><br><span class="line">                        break;</span><br><span class="line">                    case -4:</span><br><span class="line">                        throw new Exception(&apos;&apos;, Service_Data_Output::ERRNUM_INVALID_IMAGE_FORMAT);</span><br><span class="line">                        break;</span><br><span class="line">                    case -5:</span><br><span class="line">                        throw new Exception(&apos;&apos;, Service_Data_Output::ERRNUM_INTERNAL_ERROR);</span><br><span class="line">                        break;</span><br><span class="line">                    default:</span><br><span class="line">                        throw new Exception(&apos;&apos;, Service_Data_Output::ERRNUM_UNKNOWN);</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                throw new Exception(&apos;&apos;, Service_Data_Output::ERRNUM_UNKNOWN);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if ($arrayReturn[&apos;err_no&apos;] != 0) &#123;</span><br><span class="line">            Bd_Log::addNotice(&apos;ocr_backend_error&apos;, &quot;[&quot; . $arrayReturn[&apos;err_no&apos;] . &quot;][&quot; . $arrayReturn[&apos;err_msg&apos;] . &quot;]&quot;);</span><br><span class="line">            Bd_Log::warning(&quot;get from service error.[&quot; . $arrayReturn[&apos;err_no&apos;] . &quot;][&quot; . $arrayReturn[&apos;err_msg&apos;] . &quot;]&quot;);</span><br><span class="line">            throw new Exception(&apos;&apos;, Service_Data_Output::ERRNUM_UNKNOWN);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @param $arrInput</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    static public function dealArgs($arrInput)</span><br><span class="line">    &#123;</span><br><span class="line">        $args = &apos;&apos;;</span><br><span class="line">        ;</span><br><span class="line">        return $args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><font color="red">注：以上代码信息只做说明架构思想，所含信息内容可忽略。</font></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面列出接口代码架构格式，不一定完全一致，大概满足需求即可。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;— InterfaceBase.php 		//接口基文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— InterfaceFactory.php 	    //接口工厂文件，即入口文件（按需求使用）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— GoodInterface.php 		//商品接口基文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— CartInterface.php 		//购物车接口基文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— Output.php 				//定义错误码文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— ......					//其它接口文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— api_1/			// 1版本的接口文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— — Good.php 		  //商品接口文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— — Cart.php 		  //购物车接口文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— — ...... 			  //其它接口文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— api_2/			//2版本的接口文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— — Good.php 		  //商品接口文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;— — ......			  //其它接口文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面附属重要文件的代码格式，一般不需要改变。&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
      <category term="接口" scheme="http://yoursite.com/categories/PHP/%E6%8E%A5%E5%8F%A3/"/>
    
    
      <category term="接口" scheme="http://yoursite.com/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Flask - SQLAlchemy 多条件模糊查询</title>
    <link href="http://yoursite.com/2018/04/23/Flask%20-%20SQLAlchemy%20%E5%A4%9A%E6%9D%A1%E4%BB%B6%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/"/>
    <id>http://yoursite.com/2018/04/23/Flask - SQLAlchemy 多条件模糊查询/</id>
    <published>2018-04-23T10:53:25.000Z</published>
    <updated>2018-07-20T06:07:55.138Z</updated>
    
    <content type="html"><![CDATA[<p>在做项目的时候，总会遇到搜索的需求，平常写SQL语句很简单。但是，在Flask 使用SQLAlchemy管理数据库的时候，应该如何使用，做了一下笔记，如下。</p><h4 id="一、使用SQLALchemy"><a href="#一、使用SQLALchemy" class="headerlink" title="一、使用SQLALchemy"></a>一、使用SQLALchemy</h4><p>一般的搜索都需要模糊查询，如果存在多条查询的需求，可如下操作：<br><code>users = User.query.filter(User.name.like(&quot;%&quot;+搜索的内容+&quot;%&quot;), User.age.like(&quot;%&quot;+搜索的内容+&quot;%&quot;)).all()</code></p><p>此种方式有一个弊端，就是不能 “or” 查询，只能 “and” 查询。<br>进行 “or” 查询，我的一个做法就是只能分开查询，然后合并数据即可。<br><a id="more"></a></p><h4 id="二、使用原生SQL操作"><a href="#二、使用原生SQL操作" class="headerlink" title="二、使用原生SQL操作"></a>二、使用原生SQL操作</h4><p>使用 session会话执行 SQL语句。（注：还有一种支持线程安全的方式，可使用 <code>scoped_session()</code>实现）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">from app import db</span><br><span class="line"></span><br><span class="line">sql = &quot;SELECT * FROM `moviecol` \</span><br><span class="line">        LEFT JOIN `movie` ON moviecol.movie_id=movie.id \</span><br><span class="line">        LEFT JOIN `user` ON moviecol.user_id=user.id \</span><br><span class="line">        WHERE movie.title like &apos;%&quot;+keywords+&quot;%&apos; or user.name like &apos;%&quot;+keywords+&quot;%&apos; \</span><br><span class="line">        ORDER BY moviecol.addtime DESC \</span><br><span class="line">        LIMIT &quot;+str(page)+&quot;,&quot;+str(page_config[&apos;moviecol_per_page&apos;])</span><br><span class="line">res = db.session.execute(sql).fetchall()</span><br></pre></td></tr></table></figure></p><p>其中 Session类的相关方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public_methods = (</span><br><span class="line">    &apos;__contains__&apos;, &apos;__iter__&apos;, &apos;add&apos;, &apos;add_all&apos;, &apos;begin&apos;, &apos;begin_nested&apos;,</span><br><span class="line">    &apos;close&apos;, &apos;commit&apos;, &apos;connection&apos;, &apos;delete&apos;, &apos;execute&apos;, &apos;expire&apos;,</span><br><span class="line">    &apos;expire_all&apos;, &apos;expunge&apos;, &apos;expunge_all&apos;, &apos;flush&apos;, &apos;get_bind&apos;,</span><br><span class="line">    &apos;is_modified&apos;, &apos;bulk_save_objects&apos;, &apos;bulk_insert_mappings&apos;,</span><br><span class="line">    &apos;bulk_update_mappings&apos;,</span><br><span class="line">    &apos;merge&apos;, &apos;query&apos;, &apos;refresh&apos;, &apos;rollback&apos;,</span><br><span class="line">    &apos;scalar&apos;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做项目的时候，总会遇到搜索的需求，平常写SQL语句很简单。但是，在Flask 使用SQLAlchemy管理数据库的时候，应该如何使用，做了一下笔记，如下。&lt;/p&gt;
&lt;h4 id=&quot;一、使用SQLALchemy&quot;&gt;&lt;a href=&quot;#一、使用SQLALchemy&quot; class=&quot;headerlink&quot; title=&quot;一、使用SQLALchemy&quot;&gt;&lt;/a&gt;一、使用SQLALchemy&lt;/h4&gt;&lt;p&gt;一般的搜索都需要模糊查询，如果存在多条查询的需求，可如下操作：&lt;br&gt;&lt;code&gt;users = User.query.filter(User.name.like(&amp;quot;%&amp;quot;+搜索的内容+&amp;quot;%&amp;quot;), User.age.like(&amp;quot;%&amp;quot;+搜索的内容+&amp;quot;%&amp;quot;)).all()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此种方式有一个弊端，就是不能 “or” 查询，只能 “and” 查询。&lt;br&gt;进行 “or” 查询，我的一个做法就是只能分开查询，然后合并数据即可。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="Flask" scheme="http://yoursite.com/categories/Python/Flask/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Python 标准模块之 uuiid</title>
    <link href="http://yoursite.com/2018/04/23/Python%20%E6%A0%87%E5%87%86%E6%A8%A1%E5%9D%97%E4%B9%8B%20uuiid/"/>
    <id>http://yoursite.com/2018/04/23/Python 标准模块之 uuiid/</id>
    <published>2018-04-23T10:52:51.000Z</published>
    <updated>2018-07-20T06:07:54.506Z</updated>
    
    <content type="html"><![CDATA[<p>uuid是128位的全局唯一标识符（univeral unique identifier），通常用32位的一个字符串的形式来表现。有时也称guid(global unique identifier)。python中自带了uuid模块来进行uuid的生成和管理工作。</p><p>python中的uuid模块基于信息如MAC地址、时间戳、命名空间、随机数、伪随机数来uuid。具体方法有如下几个：</p><blockquote><p><strong>uuid.getnode()：</strong>获取硬件地址为48位正整数。这是第一次运行，它可能会启动一个单独的程序，可能会很慢。如果所有尝试获取硬件地址都失败，我们选择一个随机的48位数字，其第8位设置为1，如RFC 4122中推荐的那样。“硬件地址”表示网络接口的MAC地址，以及具有多个网络接口可以返回其中任何一个的MAC地址。<br><strong>uuid.uuid1([ node [，clock_seq ] ])：</strong>从主机ID，序列号和当前时间生成一个UUID。如果 没有给出节点，getnode()则用于获取硬件地址。如果 给出clock_seq，它将用作序列号; 否则选择一个随机的14位序列号。（可以保证全球范围内的唯一性。但是可能会危害隐私，因为它会创建一个包含计算机网络地址的UUID。）<br><strong>uuid.uuid3(名称空间，名称)：</strong>根据名称空间标识（这是一个UUID）和一个名称（这是一个字符串）的MD5散列生成一个UUID。<br><strong>uuid.uuid4()：</strong>生成一个随机的UUID。（注：有一定概率重复的）<br><strong>uuid.uuid5 (名称空间，名称)：</strong>根据名称空间标识（这是一个UUID）和名称（它是一个字符串）的SHA-1散列生成一个UUID。（注：和uuid3基本相同，只不过采用的散列算法是sha1）</p></blockquote><a id="more"></a><p>该uuid模块定义了以下用于uuid3()或的名称空间标识符 uuid5()。</p><blockquote><p><strong>uuid.NAMESPACE_DNS</strong><br>当指定此名称空间时，名称字符串是完全限定的域名。<br><strong>uuid.NAMESPACE_URL</strong><br>当这个名字空间被指定时，名字字符串就是一个URL。<br><strong>uuid.NAMESPACE_OID</strong><br>当这个名字空间被指定时，名字字符串就是一个ISO OID。<br><strong>uuid.NAMESPACE_X500</strong><br>当指定此名称空间时，名称字符串是DER中的X.500 DN或文本输出格式。</p></blockquote><p>UUID 实例具有这些只读属性：</p><blockquote><p><strong>UUID.bytes</strong><br>UUID作为一个16字节的字符串（包含以big-endian字节顺序的六个整数字段）。<br><strong>UUID.bytes_le</strong><br>UUID作为16字节的字符串（以 little-endian字节顺序包含time_low，time_mid和time_hi_version）。<br><strong>UUID.fields</strong><br>UUID的六个整数字段的元组，它们也可用作六个单独的属性和两个派生属性：</p></blockquote><table><thead><tr><th>领域</th><th>含义</th></tr></thead><tbody><tr><td>time_low</td><td>UUID的前32位</td></tr><tr><td>time_mid</td><td>UUID的接下来的16位</td></tr><tr><td>time_hi_version</td><td>UUID的接下来的16位</td></tr><tr><td>clock_seq_hi_variant</td><td>UUID的接下来的8位</td></tr><tr><td>clock_seq_low</td><td>UUID的接下来的8位</td></tr><tr><td>node</td><td>UUID的最后48位</td></tr><tr><td>time</td><td>60位时间戳</td></tr><tr><td>clock_seq</td><td>14位序列号</td></tr></tbody></table><blockquote><p><strong>UUID.hex</strong><br>UUID作为32个字符的十六进制字符串。<br><strong>UUID.int</strong><br>UUID是一个128位整数。<br><strong>UUID.urn</strong><br>UUID作为RFC4122中规定的URN。<br><strong>UUID.variant</strong><br>UUID变体，它确定UUID的内部布局。这将是一个常量RESERVED_NCS，RFC_4122， RESERVED_MICROSOFT，或RESERVED_FUTURE。<br><strong>UUID.version</strong><br>UUID版本号（1到5，仅在变体时才有意义 RFC_4122）。</p></blockquote><p>以下是uuid模块典型用法的一些示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import uuid</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; # make a UUID based on the host ID and current time</span><br><span class="line">&gt;&gt;&gt; uuid.uuid1()</span><br><span class="line">UUID(&apos;a8098c1a-f86e-11da-bd1a-00112444be1e&apos;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; # make a UUID using an MD5 hash of a namespace UUID and a name</span><br><span class="line">&gt;&gt;&gt; uuid.uuid3(uuid.NAMESPACE_DNS, &apos;python.org&apos;)</span><br><span class="line">UUID(&apos;6fa459ea-ee8a-3ca4-894e-db77e160355e&apos;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; # make a random UUID</span><br><span class="line">&gt;&gt;&gt; uuid.uuid4()</span><br><span class="line">UUID(&apos;16fd2706-8baf-433b-82eb-8c7fada847da&apos;)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; # make a UUID using a SHA-1 hash of a namespace UUID and a name</span><br><span class="line">&gt;&gt;&gt; uuid.uuid5(uuid.NAMESPACE_DNS, &apos;python.org&apos;)</span><br><span class="line">UUID(&apos;886313e1-3b8a-5372-9b90-0c9aee199e5d&apos;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;uuid是128位的全局唯一标识符（univeral unique identifier），通常用32位的一个字符串的形式来表现。有时也称guid(global unique identifier)。python中自带了uuid模块来进行uuid的生成和管理工作。&lt;/p&gt;
&lt;p&gt;python中的uuid模块基于信息如MAC地址、时间戳、命名空间、随机数、伪随机数来uuid。具体方法有如下几个：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;uuid.getnode()：&lt;/strong&gt;获取硬件地址为48位正整数。这是第一次运行，它可能会启动一个单独的程序，可能会很慢。如果所有尝试获取硬件地址都失败，我们选择一个随机的48位数字，其第8位设置为1，如RFC 4122中推荐的那样。“硬件地址”表示网络接口的MAC地址，以及具有多个网络接口可以返回其中任何一个的MAC地址。&lt;br&gt;&lt;strong&gt;uuid.uuid1([ node [，clock_seq ] ])：&lt;/strong&gt;从主机ID，序列号和当前时间生成一个UUID。如果 没有给出节点，getnode()则用于获取硬件地址。如果 给出clock_seq，它将用作序列号; 否则选择一个随机的14位序列号。（可以保证全球范围内的唯一性。但是可能会危害隐私，因为它会创建一个包含计算机网络地址的UUID。）&lt;br&gt;&lt;strong&gt;uuid.uuid3(名称空间，名称)：&lt;/strong&gt;根据名称空间标识（这是一个UUID）和一个名称（这是一个字符串）的MD5散列生成一个UUID。&lt;br&gt;&lt;strong&gt;uuid.uuid4()：&lt;/strong&gt;生成一个随机的UUID。（注：有一定概率重复的）&lt;br&gt;&lt;strong&gt;uuid.uuid5 (名称空间，名称)：&lt;/strong&gt;根据名称空间标识（这是一个UUID）和名称（它是一个字符串）的SHA-1散列生成一个UUID。（注：和uuid3基本相同，只不过采用的散列算法是sha1）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Python模块" scheme="http://yoursite.com/tags/Python%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Flask 常见错误篇</title>
    <link href="http://yoursite.com/2018/04/16/Flask%20%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E7%AF%87/"/>
    <id>http://yoursite.com/2018/04/16/Flask 常见错误篇/</id>
    <published>2018-04-16T05:31:49.000Z</published>
    <updated>2018-07-20T06:07:55.470Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、在 admin/forms.py 表单文件中使用如下语句报错：</strong><br><code>auth_list = Auth.query.all()</code></p><p>报错信息，如下：</p><blockquote><p>RuntimeError: No application found. Either work inside a view function or push an application contex.</p></blockquote><p>报错信息意思是：没有找到应用程序。可以在视图函数内工作，也可以推动应用程序上下文。<br><a id="more"></a><br>因此，我们就要建立程序上下文，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(config[config_name])</span><br><span class="line">config[config_name].init_app(app)</span><br><span class="line"></span><br><span class="line">with app.app_context():</span><br><span class="line">db.init_app(app)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">return app</span><br></pre></td></tr></table></figure></p><p>就是在初始化的时候，添加 <code>app_context()</code> 上下文。</p><p><strong>2、元组赋值报错，如下：</strong></p><blockquote><p>TypeError: ‘NoneType’ object is not iterable</p></blockquote><p>这个错误提示一般发生在将None赋给多个值时。<br>在判断语句中，当if条件不满足，并且没有else语句时，函数默认返回None。<br>在没有return语句时，python也默认会返回None。<br>调用时，将None赋给多个值时，会出现提示：TypeError: ‘NoneType’ object is not iterable.</p><p><strong>3、模板中使用表单（wtf），报错如下：</strong></p><blockquote><p>TypeError: html_params() got multiple values for keyword argument ‘name’</p></blockquote><p>这个是由于表单中有一个变量为 “render_kw”，其值是键值对字典，且其键不能为 “name”。否则就报错！</p><p><strong>4、Flask 的 validate_on_submit() 老是false ??</strong><br>在 flask中提交表单时使用了validate_on_submit()来验证，但是每次提交时都是false，不知道什么原因啊？<br>但是只要把生成form表单的地方换成 quick_form自动生成，就正常了。<br>最后，通过上网搜索知道问题的原因了，就是CSRF的原因，直接在form里加上csrf_token就行了。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; form.csrf_token &#125;&#125;</span><br><span class="line">&#123;&#123; form.submit() &#125;&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1、在 admin/forms.py 表单文件中使用如下语句报错：&lt;/strong&gt;&lt;br&gt;&lt;code&gt;auth_list = Auth.query.all()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;报错信息，如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RuntimeError: No application found. Either work inside a view function or push an application contex.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;报错信息意思是：没有找到应用程序。可以在视图函数内工作，也可以推动应用程序上下文。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="Flask" scheme="http://yoursite.com/categories/Python/Flask/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask 使用session</title>
    <link href="http://yoursite.com/2018/04/16/Flask%20%E4%BD%BF%E7%94%A8session/"/>
    <id>http://yoursite.com/2018/04/16/Flask 使用session/</id>
    <published>2018-04-16T05:30:53.000Z</published>
    <updated>2018-07-20T06:07:55.646Z</updated>
    
    <content type="html"><![CDATA[<p>1、首先安装session<br><code>pip install flask-session</code></p><p>2、引入框架中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from flask_session import Session</span><br><span class="line">sess = Session()</span><br><span class="line">sess.init_app(app)</span><br></pre></td></tr></table></figure></p><p>3、下面就可以在视图中使用引用使用了<br><code>from flask import session</code></p><a id="more"></a><p><strong>报错集锦：</strong></p><blockquote><p>Flask  session报下面错误：<br>RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.</p></blockquote><p>查找代码发现：<br>SERECT_KEY 已经设定。但是，仍然报此错误。原因是 SESSION_TYPE 未设置，如果不使用 内存缓存的话，可以使文件缓存。即：<br><code>SESSION_TYPE = &#39;filesystem&#39;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1、首先安装session&lt;br&gt;&lt;code&gt;pip install flask-session&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、引入框架中&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from flask_session import Session&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sess = Session()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sess.init_app(app)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3、下面就可以在视图中使用引用使用了&lt;br&gt;&lt;code&gt;from flask import session&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
      <category term="Flask" scheme="http://yoursite.com/categories/Python/Flask/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Flask" scheme="http://yoursite.com/tags/Flask/"/>
    
  </entry>
  
</feed>
