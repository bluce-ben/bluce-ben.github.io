<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-22T10:24:58.311Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zheng Benwu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux命令之date、cal、bc</title>
    <link href="http://yoursite.com/2017/12/22/Linux%E5%91%BD%E4%BB%A4%E4%B9%8Bdate%E3%80%81cal%E3%80%81bc/"/>
    <id>http://yoursite.com/2017/12/22/Linux命令之date、cal、bc/</id>
    <published>2017-12-22T09:42:39.000Z</published>
    <updated>2017-12-22T10:24:58.311Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、显示日期的指令：date"><a href="#1、显示日期的指令：date" class="headerlink" title="1、显示日期的指令：date"></a>1、显示日期的指令：date</h3><p>如果在文字接口中想要知道目前Linux 系统的时间，那举就直接在指令列模式输入date 即可显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[bluce-ben@www ~]$ date</span><br><span class="line">Fri Dec 22 16:06:43 CST 2017</span><br><span class="line">上面显示的是：星期五, 12月22日, 16:06 分, 43 秒，在 2017 年的 CST 时区！</span><br><span class="line">那如果我想要让这个程序显示出『2017/12/22』这样的日期显示方式呢？ 那就使用date 的格式化输出功能吧！</span><br><span class="line">[bluce-ben@www ~]$ date +%Y/%m/%d</span><br><span class="line">2017/12/22</span><br><span class="line">[bluce-ben@www ~]$ date +%H:%M</span><br><span class="line">16:09</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="2、显示日历的指令：cal"><a href="#2、显示日历的指令：cal" class="headerlink" title="2、显示日历的指令：cal"></a>2、显示日历的指令：cal</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[bluce-ben@www ~]$ cal</span><br><span class="line">    December 2017</span><br><span class="line">Su Mo Tu We Th Fr Sa </span><br><span class="line">                            1   2</span><br><span class="line">3    4    5    6   7   8   9</span><br><span class="line">10  11  12  13 14 15 16</span><br><span class="line">17  18  19  20 21 22 23</span><br><span class="line">24  25  26  27 28 29 30</span><br><span class="line">31</span><br></pre></td></tr></table></figure><p>cal (calendar)这个指令可以做的事情还很多，例如你可以显示整年的月历情况：<code>cal 2018</code><br>基本上cal 这个指令可以接的语法为： <code>cal [month] [year]</code></p><h3 id="3、简单好用的计算器：bc"><a href="#3、简单好用的计算器：bc" class="headerlink" title="3、简单好用的计算器：bc"></a>3、简单好用的计算器：bc</h3><p>Linux提供了一支计算程序，就是bc。你在指令列输入bc 后，屏幕会显示出版本信息， 之后就进入到等待指示的阶段。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[bluce-ben@www ~]$ bc</span><br><span class="line">bc 1.06</span><br><span class="line">Copyright 1991-1994, 1997, 1998, 2000 Free Software Foundation, Inc.</span><br><span class="line">This is free software with ABSOLUTELY NO WARRANTY.</span><br><span class="line">For details type `warranty&apos;.</span><br><span class="line">_ &lt;==这个时候，光标会停留在这里等徃你的输入</span><br></pre></td></tr></table></figure></p><p>常用运算符：</p><ul><li>+ 加法</li><li>- 减法</li><li>* 乘法</li><li>/ 除法</li><li>^ 挃数</li><li>% 余数</li></ul><h3 id="补充一些小Tips："><a href="#补充一些小Tips：" class="headerlink" title="补充一些小Tips："></a>补充一些小Tips：</h3><ol><li>[Tab]：如果在command后按时，代表【命令补全】；如果在第二个字以后按，就变成【档案补齐】的功能了。</li><li>[Ctrl] + c：表示中断目前程序的按键。</li><li>[Ctrl] + d：表示【键盘输入结束】的意思，可以用来取代exit的输入。</li><li>在文本模式下，你可以直接按下两个[Tab]按键，可以查看总共有多少指令可以使用。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1、显示日期的指令：date&quot;&gt;&lt;a href=&quot;#1、显示日期的指令：date&quot; class=&quot;headerlink&quot; title=&quot;1、显示日期的指令：date&quot;&gt;&lt;/a&gt;1、显示日期的指令：date&lt;/h3&gt;&lt;p&gt;如果在文字接口中想要知道目前Linux 系统的时间，那举就直接在指令列模式输入date 即可显示：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[bluce-ben@www ~]$ date&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fri Dec 22 16:06:43 CST 2017&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;上面显示的是：星期五, 12月22日, 16:06 分, 43 秒，在 2017 年的 CST 时区！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;那如果我想要让这个程序显示出『2017/12/22』这样的日期显示方式呢？ 那就使用date 的格式化输出功能吧！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[bluce-ben@www ~]$ date +%Y/%m/%d&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2017/12/22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[bluce-ben@www ~]$ date +%H:%M&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16:09&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="每日一个Linux命令" scheme="http://yoursite.com/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E4%B8%AALinux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="Linux命令" scheme="http://yoursite.com/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>道哥自述： 为什么弹性安全网络将诞生最大的人工智能？——《2017阿里技术》</title>
    <link href="http://yoursite.com/2017/12/21/%E9%81%93%E5%93%A5%E8%87%AA%E8%BF%B0%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BC%B9%E6%80%A7%E5%AE%89%E5%85%A8%E7%BD%91%E7%BB%9C%E5%B0%86%E8%AF%9E%E7%94%9F%E6%9C%80%E5%A4%A7%E7%9A%84%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%EF%BC%9F%E2%80%94%E2%80%94%E3%80%8A2017%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    <id>http://yoursite.com/2017/12/21/道哥自述：为什么弹性安全网络将诞生最大的人工智能？——《2017阿里技术》/</id>
    <published>2017-12-21T09:50:54.000Z</published>
    <updated>2017-12-21T09:57:57.719Z</updated>
    
    <content type="html"><![CDATA[<p>　　阿里妹导读：前阵子，阿里科学家王刚、吴翰清同时入选MIT2017年度TR35 开创中国互联网企业先河一文刷爆了朋友圈，阿里巴巴人工智能实验室首席科学家王刚、阿里云首席安全科学家吴翰清同时入选MIT2017。这是自该奖项创立18年以来，第一次中国公司里同时有2人入选榜单。今天，阿里妹分享一篇来自吴翰清（也就是大家熟悉的道哥、小黑）的文章，让我们一起走进道哥的弹性安全网络世界。<br><a id="more"></a><br><img src="/uploads/2017/12/alibaba_daoge_01.png" alt=""><br>　　前些天得知自己入选了MIT的TR35，非常开心。我想这是中国安全技术在国际上被认可的一次证明。但这个荣誉不仅属于我一个人，更属于我团队中所有为此做出过努力和贡献的人，也属于那些敢于和我们一起尝试最新技术的客户们，因为新技术在诞生之初往往是生涩的，但缺少了孵化过程中的磨难，我们永远见不到美丽绽放的那天。我也非常感谢王坚博士、弓峰敏博士、华先胜老师、Dawn Song教授能够成为我的TR35推荐人，感谢你们对我所从事的工作的认可。<br>　　自从参加工作以来，我一直执着于将中国技术推向全球，我认为中国有着最好的安全技术和最好的人，只是缺乏了让他们成长的土壤和展示的舞台。所以我也希望这次MIT对我个人的认可，能够成为一次鼓励中国安全产业的优秀人才和优秀技术成果走向世界的契机。长期以来，我们享受了很多开源技术的红利，但中国技术对世界互联网发展的贡献却非常微薄。我认为这中间有语言的障碍，有文化的障碍，但没有能力的障碍。现在是时候让我们去跨越这些障碍，去解决全球互联网发展过程中遇到的那些问题了。只有中国本土的优秀人才成长起来，中国才会变得更加强大。<br>　　回顾我十多年的工作生涯，期间从事和研究过非常多的技术工作，但我认为唯有「弹性安全网络」的研究是最独特的。「弹性安全网络」不是对现有技术的一种应用， 它是真正的发明了一项此前所没有的技术，提出了一种全新的方法，采用了一个全新的角度来看待现有世界。也因此它能跳出现有的技术框架，带来一些突破性的惊喜。这些惊喜，往往连创造者都没有办法在一开始就想清楚。正如从比特币中抽象出了区块链技术一样，最早我们构建的产品「游戏盾」是用来防御超大流量DDoS攻击，最后抽象出来的「弹性安全网络」技术，却让我们看到了构建下一代互联网的可能性。<br>　　简单来说，弹性安全网络是将DDoS防御前置到网络边缘处。但是，未来真正要做的事情是通过端到端的连接，通过风险控制技术，重新构建一个干净的、安全的互联网。<br>　　前些天《麻省理工学院技术评论》的记者对我做了一次采访，我完整的阐述了一次关于弹性安全网络的构想。我把这次采访的录音放在这里，分享给所有对这项技术感兴趣的人，并附上整理后的文字稿（但依然强烈推荐听录音原文）。未来我希望有更多人参与到对「弹性安全网络」的建设中来。</p><h2 id="为什么要做弹性安全网络"><a href="#为什么要做弹性安全网络" class="headerlink" title="为什么要做弹性安全网络"></a>为什么要做弹性安全网络</h2><p>　　互联网的流量就像流淌在管道里的水，但互联网发展到今天，流量里已经掺杂了太多的东西，变得不再纯粹和健康了。比如说，这些流量里面包含了很多攻击请求，也有很多恶意爬虫请求和一些欺诈行为的请求。<br>　　理想状况下，我们希望未来的流量是干净、健康的，希望把所有的网络攻击前置到整个网络的边缘处。就是说进入这张网络的时候，流量本身就是干净的。这就是clear traffic的概念。<br>　　为了实现这个想法，我们遇到了很多的困难。我们在思考，需要用一个什么样的架构去实现它。刚巧这个时候，我们有一些客户尝试用快速切换的思路来对抗DDoS攻击。这给了我灵感。最终，我把两个东西结合起来，产生了做弹性安全网络的想法。</p><h2 id="什么是弹性安全网络"><a href="#什么是弹性安全网络" class="headerlink" title="什么是弹性安全网络"></a>什么是弹性安全网络</h2><p>　　弹性安全网络真正想要去做的，是替换掉整个互联网最核心的心脏，替换掉DNS，从而让网络变得有弹性，能够快速调度资源，形成一个全新的网络架构。<br>　　事实上，DNS诞生在互联网早期，是互联网1.0时代的产物，是一个开放的协议。到今天，也没有一个独立的运营商来运营整个互联网的DNS Server。它分散在各家不同的运营商。全球可能有上百家运营商，都在提供自己的DNS服务。运营商跟运营商之间的打通，是通过标准的DNS协议进行数据交换。<br>　　这也是为什么这么多年DNS协议都没办法进步的原因，过于碎片化。<br>　　目前，DNS有三个显著问题。第一个，是DNS完全解析的时间过长，这是整个DNS使用中遇到的一个非常大的痛点。<br>　　比如，对于一个大型网站，要把用户的所有流量指向一个新地址。把DNS的解析修改之后，可能需要花两到三天时间，流量才会百分之百的切到新地址去，不会在旧地址上还有残余流量。<br>　　为什么需要两到三天时间？原因是有很多运营商的DNS递归解析服务器，都需要更新自己的数据。而有的运营商还有自己的省级运营商，甚至更下面的地市级的DNS的递归解析。过于碎片化，使得难于进行统一的数据管理，这是今天现实存在的问题。<br>　　第二个问题是今天DNS Server软件中的解析数遇到了瓶颈，没有办法一个名字解析到几千个、甚至上万个，甚至未来十几万个不同地址。一个名字可能最多也就解析到十几个或几十个地址就不能再扩大了。这种瓶颈限制了我们的一些能力拓展。<br>　　第三个就是，原本可以基于DNS去实现的一些安全机制，比如风险控制，并没有建立起来。其实也比较好理解，在互联网1.0时代并没有如今天这般强大的数据能力和计算能力。<br>　　今天，我们要解决这些问题。在整个弹性安全网络的架构下面，我们在构思下一代的互联网应该是什么形态？答案就是通过可靠的快速调度技术把互联网心脏重构掉。<br>　　首先，就是它的快速解析的能力，一定要非常实时以及干净。其次，就是它本身支持的调度能力，要能达到上万的这个级别，规模特别的重要，就是一个名字能够解析到上万个地址、甚至是十几万个地址。<br>　　我们以防御DDoS攻击为切入点，进行尝试。过去防御DDoS攻击时，必须要做的是储备单点大带宽。因为IP是变不了的（在中国的网络环境下由于政策原因暂不考虑anycast的方案）。所以在DNS架构下，就是去硬抗这个IP遇到的流量攻击。比如说300G的流量打过来，必须要有300G的带宽在这里，才能够扛得住。如果只有100G的带宽，那整个机房就被堵死了，甚至可能会影响到运营商的网络稳定。<br>　　这是在过去攻防对抗的思路，就是你攻击打过来多少，我就必须要有多少带宽储备在这儿。这比的是资源，比的是单纯的带宽储备。<br>　　我们现在的思路是，你攻击这个IP，我马上就把这个IP拿掉，不要这个IP了，然后启用一个新的地址，并告诉所有客户，你来访问新地址。<br>　　当然，这时候攻击者会跟随，但是攻击者跟随是有成本的。一般，攻击者跟随到一个新地址，需要大概10多分钟。<br>　　在这个10分钟里，通过数据分析的方式，我们可以分析出攻击者到底是谁，把好人和坏人分离出来，阻止坏人的流量，并同时放干净的流量继续访问，这就是整个弹性安全网络的核心思想。</p><h2 id="如何实现弹性安全网络"><a href="#如何实现弹性安全网络" class="headerlink" title="如何实现弹性安全网络"></a>如何实现弹性安全网络</h2><p>　　弹性安全网络的实现，是通过快速完成上万个地址的调度，从根本上改变过去需要在单点储备大带宽的一种防御方式能力。<br>　　就是，你不需要在单点储备大带宽了，你需要的更多的地址，更强的数据分析能力。<br>　　要知道，单点储备大带宽的价格非常贵。改用这种方式之后，DDoS防御成本可以下降两到三个数量级，因为不需要再单点储备大带宽。<br>　　做完这个之后，我们就发现，其实这个事情，最重要的不是多了一种对抗DDoS攻击的方法，而是改变了DNS本身，这是本质的东西。所以，我们是用一种新技术去解决了一个老问题。</p><h2 id="弹性安全网络将诞生最大的人工智能"><a href="#弹性安全网络将诞生最大的人工智能" class="headerlink" title="弹性安全网络将诞生最大的人工智能"></a>弹性安全网络将诞生最大的人工智能</h2><p>　　沿着弹性安全网络的思路，我们希望通过风险控制来管理整个互联网的资源。<br>　　未来，弹性安全网络将重新定义互联网的入口。通过为每一个访问者建立“足迹库”，分析他是好人还是坏人的概率。一旦判断这次访问请求可能是有风险的，则可以随即让他访问不到这个资源。<br>　　所以，未来最大的人工智能应该是诞生在弹性安全网络，因为整个互联网的资源都被管理起来了，而且是基于每一个访问者的行为沉淀，来判断风险。<br>　　相当于想要进入这个封闭的网络，每个访客要先过安检。只有通过安检才能访问到这个资源。而且，访客所有的历史行为会被积累下来，为未来的风险判断做储备。而今天互联网的心脏– DNS，由于其开放性和碎片性，已经失去了将所有访问数据统一汇聚后进行分析的可能性。<br>　　在一个自成闭环的体系里面，由一家基础设施的提供商，去运营整个网络心脏的这种解析服务。然后也基于这种解析服务，它能够对整个网内的所有访客进行智能分析，最终就能够实现这张网内的所有访客的请求，都是在风险控制之下的，从而构建一个全新的互联网。</p><h2 id="弹性安全网络的未来"><a href="#弹性安全网络的未来" class="headerlink" title="弹性安全网络的未来"></a>弹性安全网络的未来</h2><p>　　今天，一些阿里云上的游戏客户，就是通过弹性安全网络的技术，来调度他们所有的游戏资源，同时对所有玩家进行风险控制的。<br>　　弹性安全网络自成闭环。也就是说，这些使用弹性安全网络的游戏，已经从我们现在的互联网，也就是今天以DNS为支撑的这个互联网里，消失掉了。<br>　　一个玩家，通过DNS，是访问不到弹性安全网络这张网里的所有资源的。未来我们要做的事情就是，不断地去扩大这张网，直到网内可调度的资源覆盖整个互联网的资源。<br>　　目前来看，主要机会就是在IoT和移动互联网，因为这两者实际上是没有DNS的需求的。过去，之所以需要DNS，是因为有一个浏览器，浏览器里面有一个地址栏，这个东西必须通过输入一个好记的地址，才能访问到资源。<br>　　在移动互联网时代，今天手机不需要浏览器，而是直接打开一个App。那这个App访问的是什么东西，它不一定需要DNS来解析。<br>　　这是我们看到今天这个技术有可能走下去的一个非常重要的原因。<br>　　延伸出来，在IoT时代，也是不需要有一个浏览器去访问你所需要访问的服务和资源的。<br>　　所以这是我看到，这张网在未来有可能升级今天整个互联网最重要的一个原因。</p><h2 id="阿里将开放弹性安全网络技术能力"><a href="#阿里将开放弹性安全网络技术能力" class="headerlink" title="阿里将开放弹性安全网络技术能力"></a>阿里将开放弹性安全网络技术能力</h2><p>　　未来，阿里会开放弹性安全网络的技术。<br>　　类似DNS，弹性安全网络本身也不涉及任何访问资源，它只是知道你今天到这个地方来了。就像，一个人今天到某个国家去，需要入关和出关，是一个道理。<br>　　事实上，在很多关键领域，弹性安全网络非常有价值。<br>　　比如，各个国家政府，或者大型企事业单位的专网或内网。如果它是以DNS为核心的话，那这是一个暴露在整张网内的弱点。因为DNS是一个公开的服务。一旦DNS这个单点被瘫痪掉，整张网可能就没法工作了，所以这是非常大的风险。<br>　　所以，弹性安全网络技术，不是为某一个客户设计的，它是为整个互联网设计的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　阿里妹导读：前阵子，阿里科学家王刚、吴翰清同时入选MIT2017年度TR35 开创中国互联网企业先河一文刷爆了朋友圈，阿里巴巴人工智能实验室首席科学家王刚、阿里云首席安全科学家吴翰清同时入选MIT2017。这是自该奖项创立18年以来，第一次中国公司里同时有2人入选榜单。今天，阿里妹分享一篇来自吴翰清（也就是大家熟悉的道哥、小黑）的文章，让我们一起走进道哥的弹性安全网络世界。&lt;br&gt;
    
    </summary>
    
      <category term="书籍" scheme="http://yoursite.com/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>阿里巴巴CTO张建锋： 下一波创新机会，重点关注这三个领域 ——《2017阿里技术》</title>
    <link href="http://yoursite.com/2017/12/21/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4CTO%E5%BC%A0%E5%BB%BA%E9%94%8B%EF%BC%9A%E4%B8%8B%E4%B8%80%E6%B3%A2%E5%88%9B%E6%96%B0%E6%9C%BA%E4%BC%9A%EF%BC%8C%E9%87%8D%E7%82%B9%E5%85%B3%E6%B3%A8%E8%BF%99%E4%B8%89%E4%B8%AA%E9%A2%86%E5%9F%9F-%E2%80%94%E2%80%94%E3%80%8A2017%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    <id>http://yoursite.com/2017/12/21/阿里巴巴CTO张建锋：下一波创新机会，重点关注这三个领域-——《2017阿里技术》/</id>
    <published>2017-12-21T07:28:59.000Z</published>
    <updated>2017-12-21T07:39:06.698Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/2017/12/alibaba_damo_02.png" alt=""><br><a id="more"></a><br>　　2017杭州·云栖大会首日，阿里巴巴集团CTO张建锋宣布成立达摩院，将在全球各地建立实验室，并引入更多高校教授参与其中，未来三年投入1000亿元进行基础科学研发。<br>　　以下为演讲全文：<br>　　大家上午好，我想借这个机会，把阿里巴巴技术的一些想法和大家做一个分享。一年前马老师提出了“五新”战略，其中像“新零售”，我们看到盒马、无人咖啡店，得到了非常快速的发展。今天想首先跟大家分享一下“新技术”，以及“新技术”是怎么跟阿里巴巴的未来结合起来的。</p><h2 id="互联网的第三次波浪潮：智联网、人机自然交互、机器智能"><a href="#互联网的第三次波浪潮：智联网、人机自然交互、机器智能" class="headerlink" title="互联网的第三次波浪潮：智联网、人机自然交互、机器智能"></a>互联网的第三次波浪潮：智联网、人机自然交互、机器智能</h2><p>　　阿里巴巴是一家成长于互联网时代、扎根于互联网时代的一家公司，我们对技术有着非常深刻的体会跟理解。<br>　　互联网时代第一波浪潮，是把计算机从一个单一的工具变成了一个平台，它把信息都连接在一起了，比较有代表性的一些企业，比如作为搜索的像Google，它把全世界散落在单点的数据、信息都连成一个平台，这是它带来最大的价值。<br><img src="/uploads/2017/12/alibaba_zhangjianfeng_01.png" alt=""><br>　　第二波我认为是移动互联网的发展。移动互联网把信息分享、传递变得更加自然，这一波里面，我觉得最大的贡献就是今天我们在讲的，像社交、应用等等。阿里巴巴在这一波浪潮中做了一件跟大家想象中不一样的事情——我们做电子商务不仅提供一个货架，而是通过互联网这个平台，把消费者跟生产者连接在一起，把品牌跟消费者连接在一起。这个连接其实跟其他人说的做零售、做电子商务是有一个非常本质的区别的——这个连接是双向的，通过这个连接可以诞生出、创造出无数新的可能，而不仅仅是说我通过电子商务、从事互联网来提升零售效率。所以到今天为止，我们走出了一条非常独特的道路。<br>　　今天，PC的销量已经连续在下降，萎缩得比较厉害了。现在去电子市场，纯粹卖一台PC，基本上没有什么生存空间了；以手机为代表的无线互联网，手机从2016年开始，基本上稳定在四亿的出货量，在中国，也没有新的增量。手机操作界面已经决定了，这个界面只有一个屏幕，这个屏幕里面可以放的东西是有限的，现在的超级APP基本上占据了手机最主要的入口来源。<br>　　下一波机会来自于什么地方，我们思考后觉得有三个领域值得关注：<br>　　第一个，是智联网。因为现在还有这么多的设备、这么多的物体没有被连接。以IoT为代表的智联网应该是接下来最需要解决的一个问题。这上面我们也做了非常多的尝试，我们做的城市大脑，希望把城市里面所有的物体连接起来，小到井盖、电线杆，再到马路、到红绿灯，都能够通过物联网连接起来，但我们认为光连接是不够的，因为连接只是把所有的人、物聚在一起，我们还需要去感知，还需要去处理数据，最终我们还要实时做出决策，去控制被连接的主体，这才是有价值的智联网。<br><img src="/uploads/2017/12/alibaba_zhangjianfeng_02.png" alt=""><br>　　第二个，新一代人机自然交互。今天我们有了很多交互手段，包括现在非常热门的自动驾驶。自动驾驶目前要解决的主要是一个人机交互的问题。开车一定要拿一个方向盘吗，可能没有这个必要；控制空调就一定要拿摇控器吗，可能也没有这个必要。因为我们可以有更自然的方式，可能是语音，可能是其他的。以苹果手机为代表，它从原先的键盘式操作，升级到屏幕触摸式的操作，但它只是在一个范围之内的升级。我们希望能够把整个人机交互，从家里的一切应用到驾驶，都有全面的升级。<br>　　还有一个，就是机器智能。马老师非常强调我们做的是机器智能。为什么要说我们做的是机器智能，机器智能跟人工智能到底有什么区别？<br>　　我的理解，今天我们很多东西之所以这样做，是因为以前人类就是这么做的——以前的做法都是要人来控制，所以我今天不想让人来控制了，我要机器来控制，所以要模仿人类来控制。举个例子，现在人工智能里面最热门的是做图像识别，我们在交通上也好，在城市管理上也好，装了无数的摄像头，因为我们拍了这么多的照片， 现在我们人看不过来了，所以需要机器来看，所以机器又要模仿人的所有思考方法，重新认识这个图片。但是我们有没有想过，假如这个照片就是用机器来看的，那为什么一定要拍成现在这个照片的样子，它直接可以是机器认识的就可以了，机器可能不一定要4K、8K、高清、彩色，可能是从另外一个角度去理解这个世界。 王坚博士举过一个例子，人的东西一定是最好的吗，狗的嗅觉比人更好，你用机器来模仿，会做得更好吗？<br>　　所以，我们要做的是，把机器变得有智能，而且变成独立的智能，这个智能应该是机器的能力决定的，而不是人类的能力决定的。这也是为什么，我们今天一定要用机器智能这个概念，重新定义我们真正要的智能是怎么样的一个智能。</p><h2 id="平台化、实时化的数据是未来世界的血液"><a href="#平台化、实时化的数据是未来世界的血液" class="headerlink" title="平台化、实时化的数据是未来世界的血液"></a>平台化、实时化的数据是未来世界的血液</h2><p>　　我们今天要做这么多事情，要解决这么多连接的问题，不可避免的会产生大量数据。这个世界一定会被数字化的，我们对此深信不疑，因为只有数字化之后，才有自动化的可能，才有智能化的可能。九年前，阿里巴巴第一次提出阿里巴巴是一家大数据公司，数据是能源，但我今天想说的是，数据不仅是能源，如果机器智能、智联网，包括人机自然交互组成一个人体的话，数据就是血液，没有这个血液，所有上面的一切都没有创新的能量来源。数据，我们认为它远远不止于这个资源，它是组成所有未来一切的血液。这是我们怎么来看待未来这个世界一个非常重要的出发点。<br>　　今后的数据有两个特点非常重要：<br>　　一个是实时性。数据一定要非常实时。以前一个产品要推广，做广告。三个月之后，厂家才知道这个广告做得好不好，这个效果好不好，消费者买不买单，这个时候才能去组织生产、组织安排。现在我们这些数字化的广告，每一分钟都知道我这个效果怎么样。<br>　　第二个，数据一定要平台化，一定要融合贯通。阿里巴巴有三件事情是统一的，其中最重要的一件事情就是数据的统一，我们统一定义、清洗、处理。我举个例子，我们跟小黄车它们合作，把小黄车给联网了，我们知道每一个车的运行轨迹，我们也知道它的密度。知道这个小区到哪个小区，或者哪个小区到哪个地方，骑共享单车的人是不是特别多。这个数据拿到之后，一方面可以改进小黄车的运营效率，这个数据如果被公交公司知道了，公交公司可以优化它的公交线路，现在没有这些数据，公交公司说今天班车在开，我一直往前开好了。所以数据一定要平台化，它只有融会贯通之后，才能产生新的生产力，才能有新的创造力。<br>　　互联网公司跟传统公司有什么不一样，以前我们都讲互联网思维，互联网思维是一个什么样的思维？对于阿里巴巴来讲，我们觉得互联网思维，第一就是一个数据思维——你必须要有数据，你才能做出一些合理的决策。传统公司的CEO跟互联网公司的CEO有很大的不一样，传统公司的CEO，他做一个决定，他想知道这个决定正确还是错误，可能要验证很久。在互联网公司，逍遥子可能跟我们讨论，这个页面按钮应该是红色还是蓝色，为什么做这个决定，他有这个数据，他知道改了之后，这个数据有变化了，他敢于做这种决定。我觉得这就是互联网公司跟传统公司非常大的不一样。<br>　　我们有一个不成文的规定：我们开会，我跟他们讲，第一，你有数据说数据；没有数据，那就说案例；没有案例，就说观点。都没有，那就不要说了，说了也没用。数据是第一位的，有数据，你就跟CEO一样有这个Power，这是互联网思维里面非常重要的一个维度。</p><h2 id="汇聚全球智慧，以科技创新世界的阿里巴巴达摩院"><a href="#汇聚全球智慧，以科技创新世界的阿里巴巴达摩院" class="headerlink" title="汇聚全球智慧，以科技创新世界的阿里巴巴达摩院"></a>汇聚全球智慧，以科技创新世界的阿里巴巴达摩院</h2><p>　　今天我们要做这么多的东西，智联网、人机自然交互、机器智能等等等等，我们后面还有非常多的问题要解决。这些问题包括我们的计算能力、计算平台、算法，自然语言的处理、理解，安全，还有更底层的芯片，更底层的操作系统。因为今天对于阿里巴巴这家公司来说，你已经不可能从市面上买到商用的一些产品来支撑我们未来发展需要的技术。所以我们必须要自己去做更深层次、更高维度的研发。<br>　　科学是什么，科学是用来发现规律、掌握规律的；技术是什么，技术是来利用这个规律的；而工程是来实现这个规律的。阿里巴巴这么多年来，通过双11积累了非常强的工程技术能力。我们今天把双11这一天的技术保障称为“互联网的超级工程”。很多超级工程，比如造世界第一的高楼大桥。而阿里巴巴的双11技术支撑这套体系，要支撑那么大规模的业务，解决无数的技术问题，它就是一个“超级工程”。但今天我们想更进一步，我们觉得光解决工程技术问题不够，我们还想掌握规律、发现规律，这是我们真正能够引领未来、真正能够定义未来的核心要素。<br><img src="/uploads/2017/12/alibaba_zhangjianfeng_03.png" alt=""><br>　　今天，在这里，我们正式宣布成立阿里巴巴的全球研究院。因为我们需要有更多的人才，一起参与，一起来改变这个世界。我们这个研究院有一个独一无二的名字叫做阿里巴巴达摩院。<br>　　我们计划在三年之内，对新技术投资超过1000亿人民币，我们想要在技术上面，真正做一些原创性、根本性的探索。这么多钱干什么，我们想吸引全球一流的人才，我们也始终认为人才是真正的生产力。在阿里巴巴达摩院，不是叫你来做苦行僧的，是叫你来做骑士的，你们是新一代的骑士，你们不是壮士，科学工作者必须得到应得的尊重与荣誉，这就是阿里巴巴达摩院。<br>　　阿里巴巴有这么多的技术、这么多的平台，我们还有一个非常重要的思想，我们不仅去探索未来，不仅服务好我们自己的业务，我们还想通过阿里云这个平台去赋能所有创业者。因为我们是这么想的，所以我们八年前就这么做了——我们做了云计算。我们有这个Believe，我们相信这个事情一定会发生，我们才做这个事情，我们并不是像其它云计算公司一样，因为我要转型升级了，是因为这个东西非常流行。我做云计算，我们真的是因为坚信。<br><img src="/uploads/2017/12/alibaba_damo_03.png" alt=""><br>　　整个达摩院由三个部分组成：<br>　　第一部分，我们在全球各地建自己的实验室，这是阿里巴巴集团自己投资的。我们在以色列、新加坡、莫斯科、西雅图跟圣马特奥都建立了自己的研究机构。在数据智能、智联网、大数据处理等等方面，做一些前沿性的基础性研究，并且能够快速把这些研究成果变成我们业务上可以用的一些东西，也可以通过阿里云这个平台，变成所有人可以使用的一个技术基础设施。<br>　　第二部分，我们是跟高校建立联合研究所。我们跟浙江大学联合成立的前沿技术研究中心运行得非常好，有很多教授、博士在这个平台上工作。为什么吸引他们在这个平台上工作，因为我们有非常大的计算装置，我们有非常多的业务场景。我们采用非常与众不同的方法，别人可能是这样，我有一个项目建好了，然后交给别人来招投标，交给浙大，你来做。我们不是这样——今天这个时代，发现一个问题，跟解决一个问题的难度是一样的。我们在定义未来的世界，发现问题对我们来说也是很大的挑战。我们请他们进来，我们一起来看到底有什么问题，用你们的眼光来看有什么问题，我们一起来解决。我们今天跟浙大、跟伯克利、跟清华大学等都成立了联合实验室，一起来做这个事情。<br>　　第三部分，是我们的产学研平台。这个平台非常有意思，我们把要解决的非常多的问题做成一个列表，发给全球的所有高校、机构。高校、机构的教授、学者，对他们感兴趣的研究方向做一个匹配，然后来写他的Proposal，我们看这个Proposal跟我们是否匹配。我们现在有四十多个项目正在开始启动做，而且这个教授、机构，绝大部分来自于海外，国内很多高校也参加了。<br><img src="/uploads/2017/12/alibaba_damo_01.png" alt=""><br>　　最终我们这个达摩院会是三部分：我们自己会建实验室，跟高校做联合实验室，通过产学研平台这个项目，让更多的教授、机构能够参与进来。最终我们希望以科技来创新这个世界，来改变这个世界，这是我们达摩院的愿景。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/2017/12/alibaba_damo_02.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="书籍" scheme="http://yoursite.com/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>达摩院：阿里巴巴的科技雄心 ——《2017阿里技术》</title>
    <link href="http://yoursite.com/2017/12/21/%E8%BE%BE%E6%91%A9%E9%99%A2%EF%BC%9A%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E7%9A%84%E7%A7%91%E6%8A%80%E9%9B%84%E5%BF%83-%E2%80%94%E2%80%94%E3%80%8A2017%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    <id>http://yoursite.com/2017/12/21/达摩院：阿里巴巴的科技雄心-——《2017阿里技术》/</id>
    <published>2017-12-21T07:03:44.000Z</published>
    <updated>2017-12-21T07:28:17.508Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/uploads/2017/12/alibaba_mayun_01.png" alt=""><br><a id="more"></a><br>　　10月11日，以“飞天·智能”为主题2017杭州·云栖大会在浙江杭州云栖小镇开幕，阿里巴巴董事局主席马云在开幕式上演讲。（本文来源：中国新闻周刊）<br>　　四名科学家同时盖上印章后，两名“武者”展开长卷，淡淡的水墨之间，“达摩院”三个大字跃然纸上。<br><img src="/uploads/2017/12/alibaba_damo_01.png" alt=""><br>　　在武侠世界里，“达摩院”代表着武林绝学和至尊，这是阿里巴巴董事局主席马云为新成立的研究院取的名字。就在2017云栖大会前两周，阿里巴巴集团首席人力官童文红给马云打电话，讨论研究院如何命名，马云灵光一闪，“达摩院”三字脱口而出。<br>　　而在此前长达半年的酝酿中，阿里巴巴内部都将这个新机构称做“阿里巴巴全球创新研究院”。<br>　　“为什么一定要研究院、实验室这样的说法，为什么不能创造一个自己的名字，我觉得达摩院就很好。”马云在给童文红的电话中说，他甚至连英文名都想好了，就是拼音DAMO。<br>　　正如在名称上独辟蹊径一样，马云希望达摩院能走出自己的模式，“我们会学习IBM，学习微软，学习贝尔实验室，学习在过去人类历史科技发展过程中取得的巨大的经验和教训，但我们必须走出自己的路。”<br>　　按照阿里巴巴在云栖大会上的说法，“达摩院”是探索人类科技未来的实验室，阿里巴巴将在研发投入1000亿元，用于涵盖基础科学和颠覆式技术创新的研究。<br>　　在阿里巴巴董事局主席马云看来，这是18岁的阿里巴巴应有的担当精神。他将“达摩院”视为阿里巴巴将留给世界最好的东西之一。有一天即使阿里巴巴不在了，希望“达摩院”还能继续存在。为了做到这一点，“达摩院”必须做到商业与科技、市场与研究的完美结合。</p><h2 id="“向技术要红利！”"><a href="#“向技术要红利！”" class="headerlink" title="“向技术要红利！”"></a>“向技术要红利！”</h2><p>　　在十年前，马云可不是这样想的。那时候的他，曾经坚决反对公司有任何研究室、实验室，因为在他看来，当时阿里巴巴还是一个初创公司，在还没有立足之前就考虑研发是大灾难。<br>　　在“达摩院”筹备组成员、阿里巴巴技术战略部总监刘湘雯的印象中，早在2008年，阿里巴巴就已经从战略层面考虑，从一家电商公司变成一家数据公司。尽管有这样一个愿景，大家却并不知道如何去做。当时，阿里巴巴的平台沉淀了很多数据，怎样去发挥数据的价值，从技术上怎么做，引发了阿里巴巴高层一系列的思考。<br>　　最终，马云选择了相信云计算，成立了阿里云计算有限公司。虽然没有被叫做“研究院”，但在刘湘雯看来，这是阿里巴巴第一次从战略上向科技进行转移。至此，阿里巴巴全面进入云计算，对自身的定位也从一家电商公司变成一家数据驱动的公司。<br>　　2014 年，阿里巴巴成立了iDST（Institute of Data Science&amp;Technologies），这是阿里巴巴集团专注于底层数据技术研究的机构。此前，马云已经把下一个时代命名为DT时代，也就是数据科技时代。而iDST以机器学习、深度学习技术为依托，打造图像视频、语音交互、自然语言理解、智能决策等人工智能核心技术， 为阿里巴巴集团的电商、金融、物流、社交、娱乐等业务提供强大的技术后盾。这些AI技术通过阿里云平台对外形成产品化的输出。<br>　　用刘湘雯的话说，“达摩院”的成立是一个水到渠成的过程，离不开“母体”阿里巴巴的发展。一个公司只有当业务发展到一定的阶段，有足够复杂的场景，足够多的业务体量，才会有足够多的科技难题出现，才能支撑一群科学家在里面做事情，才会产生一家机构，因此，“达摩院”的出现是阿里巴巴发展的必然。<br>　　“如果说阿里云让我们拥有了计算的能力，那么iDST则更多的是提供算法的能力。我们集中建设了这样一批能力，加上本身具有非常丰富的场景跟数据，然后才提出了向更纵深去发展。”刘湘雯解释道。<br>　　刘湘雯第一次听到马云谈到关于建立“达摩院”的设想是在今年3月，阿里巴巴内部召开了首次技术大会，会上马云分享了他的科技愿景。马云认为，此前18年，阿里巴巴的商业场景推动了技术升级，面向未来20年，核心技术升级才能推动商业模式创新，必须建立起NASA这样的机构。<br><img src="/uploads/2017/12/alibaba_damo_02.png" alt=""><br>　　“必须向技术要红利！”这句话，阿里巴巴首席技术官张建锋在会上重复了多次。而早在2016年云栖大会上，马云就提出过“五新”战略，即新零售、新金融、新制造、新技术和新能源。截至2017年3月，新零售已经在落实，新金融正在布局，“已经到半路了”，接下来“必须组建阿里的新技术”。<br>　　在这次技术大会上，马云动员全球两万多名科学家和工程师投身“新技术战略”，并启动“NASA”计划，“面向机器学习、芯片、物联网、操作系统、生物识别这些核心技术，我们将组建崭新的团队，建立新的机制和方法，全力以赴。”马云强调，“以前我们的技术跟着业务走，是‘兵工厂模式’，但手榴弹造得再好，也造不出导弹来。阿里巴巴必须思考建立导弹的机制，成立新技术研发体系，聚焦核心领域的研究。”<br>　　阿里巴巴有着巨大的野心——未来20年，阿里巴巴要构建世界第五大经济体，服务全球20亿消费者，创造1亿就业机会，帮助1000万家企业盈利。因此，“NASA”计划的目标也是面向未来20年，其产品或服务能够覆盖到20亿人。</p><h2 id="“NASA”计划"><a href="#“NASA”计划" class="headerlink" title="“NASA”计划"></a>“NASA”计划</h2><p>　　据刘湘雯介绍，“NASA”计划的2万多人，不仅是研究人员，也包括工程技术人员。近3年来，阿里巴巴人才数量年均增长40％以上，目前拥有2.5万名工程师和科学家，500多位博士。在36位合作人中，有9位拥有工程师背景。<br>　　同时，阿里巴巴也面向全球网罗顶尖科技人才。今年3月，人工智能专家、前南洋理工大学教授王刚加入阿里人工智能实验室。6月26日，亚马逊最顶级的华人科学家任小枫加盟了阿里，出任iDST副院长。<br>　　9月11日，量子技术领域的重量级人物施尧耘加入阿里巴巴，担任阿里云量子技术首席科学家，负责组建并领导阿里云量子计算实验室，同时，施尧耘也在之江实验室担任副主任，该实验室是由浙江省政府、浙江大学、阿里巴巴集团出资成立的混合所有制新型研发机构，9月6日正式挂牌成立。<br>　　按照“NASA”计划，如果2万多人才全涌到阿里巴巴所在地杭州，似乎也并不现实，在人才聚集地建立海外实验室成为实现“NASA”计划的更好方式。就在云栖大会当天，阿里巴巴首席技术官张建锋透露，“达摩院”已经开始在全球各地组建前沿科技研究中心，包括亚洲达摩院、美洲达摩院、欧洲达摩院，并在北京、杭州、新加坡、以色列、圣马特奥、贝尔维尤、莫斯科等地设立不同研究方向的实验室，初期计划引入100名顶尖科学家和研究人员。<br>　　张建锋表示，选择在何地建实验室主要有两个原则，一是根据当地的人才状况，比如以色列的安全做得很好，美国的一些大数据算法人才比较好等；二是跟业务有一些关系，比如新加坡本身是有产业基础的，更有利于科技成果在当地转化。<br>　　据刘湘雯介绍，现在杭州、北京两地的实验室已经在建设中，美洲、欧洲等实验室的人员陆续到位，已经开始做一些事情。新加坡在加快团队建设的速度，可能很短的时间就能到位。俄罗斯和以色列的实验室还处于筹备阶段。<br>　　“NASA”计划已见雏形，但究竟研究哪些领域并没有确定。10月10日，就在云栖大会前一天，13位顶级科学家造访阿里巴巴，并与马云举办了一场座谈。<br>　　在这13位科学家中，包括中国唯一的图灵奖获得者姚期智院士、中国量子力学第一人潘建伟院士、定义了“计算思维”的哥伦比亚大学教授周以真、全球人脸识别技术“开拓者”和“探路者”汤晓鸥教授等。这些科学家研究领域不同，但都参与了“达摩院”的出谋划策。<br>　　数年前，潘建伟曾向阿里巴巴提出，成立一个中科院跟阿里巴巴联合量子计算的实验室。今年7月30日，中国科学院－阿里巴巴量子计算实验室正式成立，实验室将结合阿里云在经典计算算法、架构和云计算方面的技术优势，以及中科院在量子计算和模拟、量子人工智能等方面的优势，颠覆摩尔定律，探索超越经典计算机的下一代超快计算技术。<br>　　“当时我说可能15年之内都不会有产出，也不会有回报。没想到阿里巴巴很快参与进来合作。”潘建伟感慨地说。<br>　　这也是“达摩院”三大组成部分之一，即自主研究中心、与高校和研究机构建立的联合实验室（研究中心）和全球开放研究项目。<br>　　与具有科研优势、地缘优势的著名高校联合建立科研基地是阿里学术合作的主要方式之一。继去年10月成立清华大学－蚂蚁金服金融科技联合实验室，今年1月成立UC Berkeley RISE 实验室之后，“NASA”计划启动以来，5月成立了阿里巴巴－浙江大学前沿技术联合研究中心，阿里巴巴不断探索新的合作模式，汇集诸多技术领域内全球最优秀的学术人才，共同打造高效率的科技创新链条和一体化的创新体系。<br>　　学术合作的另一种方式是发布全球开放研究项目，将阿里巴巴遇到的工程和技术挑战和各个实验室里最强的学术大脑进行碰撞，进而实现工业界与学术界科技能力的融合。在此次云栖大会上，公布了“阿里巴巴创新研究计划（AIR）”2017全球课题评选结果，在13个国家和地区的99个高校与科研机构（国内54个，海外45个）提交申请的234份科研项目提案中，有40余个优秀项目最终入选。<br>　　AIR 是阿里巴巴集团探索科技创新设立的首个全球性科研项目，聚焦技术驱动未来，致力于推进计算机科学领域基础性、前瞻性、突破性的研究，以校企深度合作的方式引领重大科技创新的实践应用，构建技术生态。以此搭建学术界、工业界的合作平台，联合双方优势共同促进前沿技术的发展。<br>　　“一家公司要做长远的科研非常不容易。世界上很少有公司能够做到。阿里巴巴能够有此决心，不只是做跟阿里巴巴商业相关的东西，非常高瞻远瞩。”姚期智对达摩院的雄心表示赞赏。</p><h2 id="来势汹汹"><a href="#来势汹汹" class="headerlink" title="来势汹汹"></a>来势汹汹</h2><p>　　“达摩院”在成立之初，便显出凶猛的势头。在马云的演讲中，已经提出“必须要超越英特尔，必须超越微软，必须超越IBM”，而首批公布的学术委员会更是“星光熠熠”，十人中有三位中国两院院士、五位美国科学院院士，包括世界人工智能泰斗Michael I. Jordan、分布式计算大家李凯、人类基因组计划负责人George M. Church等。<br>　　这样的登场，使得达摩院从一开始便赚足了眼球。<br>　　“科学研究是有其自身规律的，需要大量的资源、资金和人才，而研究的周期和结果更是无法预测，‘达摩院’才刚起步，现在谈发展如何还为时尚早。”一位某知名企业研究机构的工作人员表示。<br>　　“达摩院”首批公布的13个研究领域，包括量子计算、机器学习、基础算法、网络安全、视觉计算、自然语言处理、下一代人机交互、芯片技术、传感器技术、嵌入式系统等，涵盖机器智能、智联网、金融科技等多个产业领域。<br>　　“这是一个综合决策的过程！”刘湘雯表示，从今3月开始，就在确定研究领域，不光有科研人员，还有从事产业研究的人员，以及公司管理层。<br>　　刘湘雯表示，这些领域基本上会基于整个科技发展的规律，一方面是阿里巴巴自身的业务诉求，另外一方面，虽然没有看清楚它对业务有怎样的影响，但从大趋势来看，有可能是颠覆性的，比如量子计算机。<br>　　然而，一些基础性或颠覆性的学科可能投入大，而回报慢，作为一家企业所属的研究院，必须考虑不同类别学科的合理组合。因此要放回产业成熟度的链条上，有一些可能三五年能见到成果，有一些可能需要十年以上。“但究竟是怎样一个比例，目前没法给出一个确切的数字。”刘湘雯说。<br>　　在中国产学研合作促进会秘书长王建华看来，“达摩院”的建立值得鼓励，要创新一种模式，总需要有人先去探索、实践，“达摩院”正是这样一种探索。<br>　　另一个冲击眼球的是阿里巴巴的人才战略，10月16日，“达摩院”宣布，微软亚洲研究院首席研究员聂再清博士、谷歌Tango和DayDream项目技术主管李名杨博士，入职阿里人工智能实验室。<br>　　不难发现，“NASA”计划实施以来，加入阿里和“达摩院”的顶尖人才，除了来自高校和科研院所，有相当一部分来自于知名企业研究院，加上马云对几家研究机构的公开“宣战”，很难不让人联想到“挖墙脚”一词。<br>　　“达摩院”的成立起到了一种“鲶鱼效应”，相当于整个科研生态里出了一个新物种，一定会打破暂时的平衡，也一定会有人才的流动。但即使达摩院从某处吸引了一个人才，造成该处暂时的空缺，肯定会从另一处补进一个人才，使整个系统领域在某个阶段会快速地进行重新定位，重新达成一种平衡，并且这种平衡往往会比原来更健康。<br>　　按照马云对“达摩院”的定位，即“Research for solving the problem with profit and fun（为解决问题研究并带来利润和快乐）”，刘湘雯认为，“达摩院”招揽的人才除了在专业上彼此认可，在时间地点上恰好也适合这些客观条件之外，从软性条件上来说，双方对于愿景的驱动这件事情要有高度的契合。</p><h2 id="经营之道"><a href="#经营之道" class="headerlink" title="经营之道"></a>经营之道</h2><p>　　近年来，阿里巴巴不断加大技术上的投入。财报显示，阿里巴巴2017财年技术投入为170亿元，居中国互联网公司之首。<br>　　此次“达摩院”的成立，阿里巴巴宣布将在3年内投入1000亿元，相当于每年330多亿元，几乎是2017财年技术投入的一倍。但在马云眼里，这笔钱只是给“达摩院”的创业基金，实验室绝不能等资金，要有挣钱意识，才能活下去。“我希望不仅仅靠论文活下来，90％以上研究的东西，不能只在实验室里面，必须在市场上。只有这样，这个实验室才能走得长。”马云说。<br>　　如何挣钱？作为“达摩院”首任院长，张建锋对此回应道，达摩院作为一个依托大数据而建立的新型的研究机构，需要一个产业的支撑。而阿里巴巴拥有诸多业务，有金融科技，有电子商务，有物流等等，都是对研究非常重要的支持。同时，依托于阿里云平台，达摩院可以连接更多的应用场景给客户，使他们通过研究院和阿里云这个平台，能够去做智慧城市，做工业大脑，做医疗大脑，连接更多的行业。“我认为这是现在达摩院最大的价值。”<br>　　刘湘雯认为，阿里巴巴企业的本质决定了“达摩院”在做科技成果转化上是有天然优势的。<br>　　在她看来，一方面，阿里巴巴有丰富的业务场景，都会来到“达摩院”里找他们能用的东西，而“达摩院”通过设立技术开放日，也可以向业务团队去介绍他们的东西。<br>　　另一方面，更大的优势就是阿里云。“阿里云从‘达摩院’这头看，是一个放大器，从客户那头看是一个漏斗。”刘湘雯说。<br>　　在旷视研究院院长孙剑看来，企业研究院分为两种，一种是研究的内容和企业没有太大关系，主要只是起到“保险”的作用，确保公司将来在大的方向上不要走错；另一种是研究和企业，和当前产品能够有效结合，为公司赚钱。<br>　　“其实如果看过去的这些研究院，当一个公司快速发展的时候，或者公司的赚钱是非常没有问题的时候，这个研究院是会蓬勃发展的。但是公司的经济有问题的话，研究院是第一个会被考虑裁减的，因此在企业快速发展，在形势大好的时候，最需要拿出资源投入对未来的投资。”孙剑表示。<br>　　从这一角度，阿里巴巴三年1000亿元的投入，显然能给“达摩院”一个相对宽松的科研环境，但如何运用这笔资金，也是大家关注的焦点。<br>　　刘湘雯表示，达摩院实行的是院长负责制，资金大部分可能会花在人才上，因为对于一个研究院来说，最主要的就是人才，此外，还将用于购买必要的科研设施。<br>　　接下来，“达摩院”既会建自己的研究院，也会建联合的实验室，还会向学术界开放，资金也会朝这三个方向分配。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/2017/12/alibaba_mayun_01.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="书籍" scheme="http://yoursite.com/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>25岁Java工程师如何转型学习人工智能？——《2017阿里技术》</title>
    <link href="http://yoursite.com/2017/12/20/25%E5%B2%81Java%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%A6%82%E4%BD%95%E8%BD%AC%E5%9E%8B%E5%AD%A6%E4%B9%A0%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%EF%BC%9F%E2%80%94%E2%80%94%E3%80%8A2017%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    <id>http://yoursite.com/2017/12/20/25岁Java工程师如何转型学习人工智能？——《2017阿里技术》/</id>
    <published>2017-12-20T07:25:12.000Z</published>
    <updated>2017-12-21T07:04:39.373Z</updated>
    
    <content type="html"><![CDATA[<p>　　“大牛我要问”栏目推出一段时间后，阿里妹收到不少童鞋的来信，其中以职业发展、技术成长的困惑居多。<br>　　今天阿里妹选择了一个颇具有代表性的问题：关于目前大热的AI入门学习，希望能帮助有同样问题的童鞋解惑指路。<br>　　来信问题：25岁Java工程师如何转型学习AI？<br>　　我是一名25岁的Java开发工程师。本科学习的专业是信息与计算科学（数学专业），因为对计算机方面感兴趣，之后培训学习了Java，所以现在从事Java开发。目前就是在电商公司开发一些系统。<br>　　我对人工智能非常感兴趣，对数学的兴趣也从未减弱。人工智能设计的学习材料很多，像我这样的状况，如果想要转型以后从事这方面的工作，具体应该学习些什么？<br><a id="more"></a><br>　　阿里技术童鞋“以均”回信：<br>　　首先，我想聊聊为何深度学习最近这么火。<br>　　外行所见的是2016年AlphaGo 4比1 战胜李世石，掀起了一波AI热潮，DeepMind背后所用的深度学习一时间火得不得了。其实在内行看来，AlphaGo对阵李世石的结果是毫无悬念的，真正的突破在几年前就发生了。<br>　　2012年，Gefferey Hinton的学生Alex使用一个特别构造的深度神经网络（后来就叫AlexNet），在图像识别的专业比赛ImageNet中，得到了远超之前最好成绩的结果，那个时候，整个人工智能领域就已经明白，深度学习的革命已经到来了。<br>　　果然，之后深度学习在包括语音识别，图像理解，机器翻译等传统的人工智能领域都超越了原先各自领域效果最好的方法。从2015年起，工业界内一些嗅觉灵敏的人士也意识到，一场革命或已到来。</p><h1 id="关于基本概念的学习"><a href="#关于基本概念的学习" class="headerlink" title="关于基本概念的学习"></a>关于基本概念的学习</h1><h3 id="机器学习与深度学习"><a href="#机器学习与深度学习" class="headerlink" title="机器学习与深度学习"></a>机器学习与深度学习</h3><p>　　深度学习是机器学习中的一种技术，机器学习包含深度学习。机器学习还包含其他非深度学习的技术，比如支持向量机，决策树，随机森林，以及关于“学习”的一些基本理论，比如，同样都能描述已知数据的两个不同模型，参数更少的那个对未知数据的预测能力更好（奥卡姆剃刀原理）。<br>　　深度学习是一类特定的机器学习技术，主要是深度神经网络学习，在之前经典的多层神经网络的基础上，将网络的层数加深，并辅以更复杂的结构，在有极大量的数据用于训练的情况下，在很多领域得到了比其他方法更好的结果。</p><h3 id="机器学习与大数据"><a href="#机器学习与大数据" class="headerlink" title="机器学习与大数据"></a>机器学习与大数据</h3><p>　　大数据：机器学习的基础，但在多数语境下，更侧重于统计学习方法。<br>　　机器学习，深度学习，数据挖掘，大数据的关系可以用下图表示<br><img src="/uploads/2017/12/DataMining-BigData-MachineLearning-DeepLearning.png" alt=""></p><h2 id="系统学习资料"><a href="#系统学习资料" class="headerlink" title="系统学习资料"></a>系统学习资料</h2><p>　　深度学习火起来之后，网上关于深度学习的资料很多。但是其质量参差不齐。我从2013年开始就关注深度学习，见证了它从一个小圈子的领先技术到一个大众所追捧的热门技术的过程，也看了很多资料。我认为一个高质量的学习资料可以帮助你真正的理解深度学习的本质，并且更好地掌握这项技术，用于实践。<br>　　以下是我所推荐的学习资料：<br>　　首先是视频课程。</p><h3 id="Yaser-Abu-Mostafa"><a href="#Yaser-Abu-Mostafa" class="headerlink" title="Yaser Abu-Mostafa"></a>Yaser Abu-Mostafa</h3><p>　　加州理工的Yaser Abu-Mostafa教授出品的机器学习网络课程，非常系统地讲解了机器学习背后的原理，以及主要的技术。讲解非常深入浅出，让你不光理解机器学习有哪些技术，还能理解它们背后的思想，为什么要提出这项技术，机器学习的一些通用性问题的解决方法（比如用正则化方法解决过拟合）。强烈推荐。<br>　　课程名称：Machine Learning Course - CS 156<br>　　视频地址：<br>　　<a href="https://www.youtube.com/watch?v=mbyG85GZ0PI&amp;list=PLD63A284B7615313A" target="_blank" rel="noopener">https://www.youtube.com/watch?v=mbyG85GZ0PI&amp;list=PLD63A284B7615313A</a></p><h3 id="Geoffrey-Hinton"><a href="#Geoffrey-Hinton" class="headerlink" title="Geoffrey Hinton"></a>Geoffrey Hinton</h3><p>　　深度学习最重要的研究者。也是他和另外几个人（Yann LeCun，Yoshua Bengio等）在神经网络被人工智能业界打入冷宫，进入低谷期的时候仍然不放弃研究，最终取得突破，才有了现在的深度学习热潮。<br>　　他在Coursera上有一门深度学习的课程，其权威性自不待言，但是课程制作的质量以及易于理解的程度，实际上比不上前面Yaser Mostafa的。当然，因为其实力，课程的干货还是非常多的。<br>　　课程名称：Neural Networks for Machine Learning<br>　　课程地址：<a href="https://www.coursera.org/learn/neural-networks" target="_blank" rel="noopener">https://www.coursera.org/learn/neural-networks</a></p><h3 id="UdaCity"><a href="#UdaCity" class="headerlink" title="UdaCity"></a>UdaCity</h3><p>　　Google工程师出品的一个偏重实践的深度学习课程。讲解非常简明扼要，并且注重和实践相结合。推荐。<br>　　课程名称：深度学习<br>　　课程地址：<a href="https://cn.udacity.com/course/deep-learning--ud730" target="_blank" rel="noopener">https://cn.udacity.com/course/deep-learning--ud730</a></p><h3 id="小象学院"><a href="#小象学院" class="headerlink" title="小象学院"></a>小象学院</h3><p>　　国内小象学院出品的一个深度学习课程，理论与实践并重。由纽约城市大学的博士李伟主讲，优点是包含了很多业内最新的主流技术的讲解。值得一看。<br>　　课程名称：深度学习（第四期）<br>　　课程地址： <a href="http://www.chinahadoop.cn/classroom/45/courses" target="_blank" rel="noopener">http://www.chinahadoop.cn/classroom/45/courses</a></p><h3 id="推荐阅读书目"><a href="#推荐阅读书目" class="headerlink" title="推荐阅读书目"></a>推荐阅读书目</h3><p>　　《Deep Learning the Book》 —— 这本书是前面提到的大牛Yoshua Begio的博士生Goodfellow写的。Goodfellow是生成式对抗网络的提出者，生成式对抗网络被Yann LeCun认为是近年最激动人心的深度学习技术想法。这本书比较系统，专业，偏重理论，兼顾实践，是系统学习深度学习不可多得的好教材。<br>　　英文版：<a href="http://deeplearningthebook.com" target="_blank" rel="noopener">http://deeplearningthebook.com</a><br>　　目前Github上已经有人翻译出了中文版：<br>　　<a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">https://github.com/exacity/deeplearningbook-chinese</a></p><h2 id="推荐学习路径"><a href="#推荐学习路径" class="headerlink" title="推荐学习路径"></a>推荐学习路径</h2><p>　　不同的人有不同的需求，有些人希望掌握好理论基础，然后进行实践，有些人希望能够快速上手，马上做点东西，有些人希望理论与实践兼顾。下面推荐几条学习路径，照顾到不同的需求。大家可以根据自己的特点进行选择。<br>　　<strong>Hard way</strong><br>　　Yaser -&gt; Geoffrey Hinton -&gt; UdaCity -&gt; Good Fellow<br>　　特点：理论扎实，步步为营。最完整的学习路径，也是最“难”的。<br>　　推荐指数： 4星<br>　　<strong>Good way</strong><br>　　Yaser -&gt; UdaCity -&gt; 小象学院-&gt; Good Fellow<br>　　特点：理论扎实，紧跟潮流，兼顾实战，最后系统梳理。比较平衡的学习路径。<br>　　推荐指数： 5星<br>　　<strong>“Fast” way</strong><br>　　UdaCity -&gt; Good Fellow<br>　　特点：快速上手，然后完善理论。<br>　　推荐指数： 4星<br>　　<strong>“码农” way</strong><br>　　UdaCity<br>　　特点：快速上手，注重实践。<br>　　推荐指数： 3星</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　“大牛我要问”栏目推出一段时间后，阿里妹收到不少童鞋的来信，其中以职业发展、技术成长的困惑居多。&lt;br&gt;　　今天阿里妹选择了一个颇具有代表性的问题：关于目前大热的AI入门学习，希望能帮助有同样问题的童鞋解惑指路。&lt;br&gt;　　来信问题：25岁Java工程师如何转型学习AI？&lt;br&gt;　　我是一名25岁的Java开发工程师。本科学习的专业是信息与计算科学（数学专业），因为对计算机方面感兴趣，之后培训学习了Java，所以现在从事Java开发。目前就是在电商公司开发一些系统。&lt;br&gt;　　我对人工智能非常感兴趣，对数学的兴趣也从未减弱。人工智能设计的学习材料很多，像我这样的状况，如果想要转型以后从事这方面的工作，具体应该学习些什么？&lt;br&gt;
    
    </summary>
    
      <category term="书籍" scheme="http://yoursite.com/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>技术变化那么快，程序员如何做到不被淘汰？——《2017阿里技术》</title>
    <link href="http://yoursite.com/2017/12/20/%E6%8A%80%E6%9C%AF%E5%8F%98%E5%8C%96%E9%82%A3%E4%B9%88%E5%BF%AB%EF%BC%8C%E7%A8%8B%E5%BA%8F%E5%91%98%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E4%B8%8D%E8%A2%AB%E6%B7%98%E6%B1%B0%EF%BC%9F%E2%80%94%E2%80%94%E3%80%8A2017%E9%98%BF%E9%87%8C%E6%8A%80%E6%9C%AF%E3%80%8B/"/>
    <id>http://yoursite.com/2017/12/20/技术变化那么快，程序员如何做到不被淘汰？——《2017阿里技术》/</id>
    <published>2017-12-20T03:34:28.000Z</published>
    <updated>2017-12-21T07:04:31.568Z</updated>
    
    <content type="html"><![CDATA[<p>作者：空融<br>　　阿里妹导读：写了这么多年的代码，你是否曾经有过这样的迷茫和困惑——技术发展日新月异，奋力追赶的我们，究竟是技术的主人还是技术的奴隶？今天，我们邀请到了蚂蚁金服的技术专家空融，一起来聊聊技术人的软件世界观。<br>　　在浩大的软件世界里，作为一名普通程序员，显得十分渺小，甚至会感到迷茫。我们内心崇拜技术，却也对日新月异的技术抱有深深的恐惧。有时候我会思考难道在技术领域内不断紧跟新潮，不断提升技能就是我的价值所在？那么我是技术的主人还是技术的奴隶？<br>人之所以迷茫往往是找不到工作生活的重心，感受不到工作或生活的价值。那么什么是价值呢？说的大一点就是我改变了世界，说的小一点就是我的所作所为改善了某些问题。如果不清楚自己的行为、目标、价值三者的关系，那么又何来重心？又如何能分得清重要性与优先级呢？<br><a id="more"></a><br>　　程序员的迷茫不仅仅是面对技术繁杂的无力感，更重要的是因为长期埋没于软件世界的浩大的分工体系中，无法看清从业务到软件架构的价值链条，无法清楚定位自己在分工体系的位置，处理不好自身与技术、业务的关系所致。<br>　　很多程序员打心底不喜欢业务，这一点我曾经也经历过，我更宁愿从事框架工具、技术组件研究的相关事情。我有个朋友经常吐槽我说：”你们天天加班加点写了那么多代码，然后呢？有改变什么吗？还不是写出了一堆垃圾。”仔细想想很多时候业务在我们脑海中存留的只是逻辑和流程，我们丢失的是对业务场景的感受，对用户痛点的体会，对业务发展的思考。这些都是与价值紧密相关的部分。我们很自然的用战术的勤快掩盖战略的懒惰！那么这样的后果就是我们把自己限死在流水线的工位上，阉割了自己能够发现业务价值的能力，而过多关注新技术对职场竞争力的价值。这也就是我们面对繁杂技术，而产生技术学习焦虑症的根本原因。</p><h3 id="业务、技术与软件系统的价值链"><a href="#业务、技术与软件系统的价值链" class="headerlink" title="业务、技术与软件系统的价值链"></a>业务、技术与软件系统的价值链</h3><p>　　那么什么是业务呢？就是指某种有目的的工作或工作项目，业务的目的就是解决人类社会与吃喝住行息息相关的领域问题，包括物质的需求和精神的需求，使开展业务活动的主体和受众都能得到利益。通俗的讲业务就是用户的痛点，是业务提供方（比如公司）的盈利点。而技术则是解决问题的工具和手段。比如为了解决用户随时随地购物的业务问题时，程序员利用web技术构建电子商务App，而当需求升级为帮助用户快速选购商品时，程序员会利用数据算法等技术手段构建推荐引擎。 技术如果脱离了业务，那么技术应用就无法很好的落地，技术的研究也将失去场景和方向。而业务脱离了技术，那么业务的开展就变得极其昂贵和低效。<br>　　所以回过头来我们想想自己没日没夜写了那么多的代码从而构建起来的软件系统，它的价值何在呢？说白了就是为了解决业务问题，所以当你所从事的工作内容并不能为解决业务问题带来多大帮助的时候，你应该要及时做出调整。那么软件系统又是如何体现它自身的价值呢？在我看来有如下几个方面的体现：<br>　　<strong>业务领域与功能：</strong>比如支付宝立足支付领域而推出的转账、收款功能等，比如人工智能自动驾驶系统等。<br>　　<strong>服务能力：</strong>这就好比火车站购票窗口，评判它的服务能力的标准就是它能够同时处理多少用户的购票业务，能不能在指定时间内完成购票业务，能不能7*8小时持续工作。对应到软件系统领域，则表现为以下三个方面：</p><pre><code>* 系统正确性(程序能够正确表述业务流程，没有Bug)* 可用性（可以7＊24小时＊365不间歇工作）* 大规模（高并发，高吞吐量）</code></pre><p>　　互联网公司正是借助大规模的软件系统承载着繁多的业务功能，使其拥有巨大的服务能力并借助互联网技术突破了空间限制，高效低廉解决了业务问题，创造了丰厚的利润，这是人肉所不可比拟的。<br>　　理解了这一层面的概念，你就可以清楚这个价值链条：<font color="red">公司依靠软件系统提供业务服务而创造价值，程序员则是通过构建并持续演进软件系统服务能力以及业务功能以支撑公司业务发展从而创造价值。</font><br>　　有了这个价值链条，我们就可以反思自己的工作学习对软件系统的服务能力提升起到了多大的推动作用？可以反思自己的工作学习是否切实在解决领域的业务问题，还是只是做一些意义不大的重复性工作。<br>　　前两天面试了一个候选人，他的工作是从事票务系统开发，他说自己在研究linux内核与汇编语言，我就问他linux内核和汇编语言的学习对你的工作产生了哪些帮助？能否举一个例子？他哑口无言，我内心就觉得这样一个热爱学习的好苗子正迷茫找不到重心，正在做一件浪费精力的事情。<font color="red">正确的学习方式应该是将学习与具体业务场景结合起来，和公司通过软件系统开展业务服务而创造价值，程序员通过提升软件系统服务能力创造价值这一链条串接起来，从对这些价值产生帮助的程度去思考优先级。学习本身没有错，错的往往就是那颗初心。</font><br>　　现在你再来看高并发分布式相关的知识，你会发现并不是因为这些知识比较高深、比较时髦，很多公司有需求才值得学习，而是他们对价值链条有着实实在在的贡献。</p><h3 id="价值驱动的架构"><a href="#价值驱动的架构" class="headerlink" title="价值驱动的架构"></a>价值驱动的架构</h3><p>　　一谈到软件系统，人们免不了想起架构这件事来。之所以此处去谈及架构是因为每一个程序员本质都是软件架构体系中的一分子，我们可能深埋于体系流水线之中，感受不到位置和价值。但如果站在架构这一高度去看这些问题则将会非常透彻。那么架构究竟是什么？和上述的价值链又有什么关系呢？</p><h3 id="什么是架构？"><a href="#什么是架构？" class="headerlink" title="什么是架构？"></a><font color="red">什么是架构？</font></h3><p>　　在我看来软件架构就是将人员、技术等资源组织起来以解决业务问题，支撑业务增长的一种活动。可能比较抽象，我想我们可以从架构师的一些具体工作任务来理解这句话含义：<br>　　<strong>组织业务：</strong>架构师通过探索和研究业务领域的知识，构建自身看待业务的”世界观”。他会基于这种认识拆分业务生命周期，确立业务边界，构建出了一套解决特定业务问题的领域模型，并且确认模型之间、领域之间的关系与协作方式，完成了对业务领域内的要素的组织工作。<br>　　<strong>组织技术：</strong>为了能在计算机世界中运作人类社会的业务模型，架构师需要选用计算机世界中合适的框架、中间件、编程语言、网络协议等技术工具依据之前设计方案组织起来形成一套软件系统方案，在我看来软件系统就像是一种技术组织，即技术组件、技术手段依据某种逻辑被组织起来了，这些技术工具被确定了职责，有了明确分工，并以实现业务功能为目标集合在了一起。比如RPC框架或消息队列被用于内部系统之间的通信服务就如同信使一般，而数据库则负责记录结果，它更像是一名书记员。<br>　　<strong>组织人员：</strong>为了能够实现利用软件系统解决业务问题的目标，架构师还需要关注软件系统的构建过程，他以实现软件系统为号召，从公司组织中聚集一批软件工程师，并将这些人员按不同工种、不同职责、不同系统进行组织，确定这些人员之间的协作方式，并关注这个组织系统是否运作良好比如沟通是否顺畅、产出是否达到要求、能否按时间完成等。<br>　　<strong>组织全局，对外输出：</strong>架构师的首要目标是解决业务问题，推动业务增长。所以他非常关心软件的运行状况。因为只有在软件系统运行起来后，才能对外提供服务，才能在用户访问的过程中，解决业务问题。架构师需要关注运行过程中产生的数据比如业务成功率，系统运行资源占用数据、用户反馈信息、业务增长情况等，这些信息将会帮助架构师制定下一步架构目标和方向。<br>　　所以软件架构不仅仅只是选用什么框架、选用什么技术组件这么简单。它贯穿了对人的组织、对技术的组织、对业务的组织，并将这三种组织以解决业务问题这一目标有机的结合在了一起。<br>　　很多面试的候选人在被问及他所开发的系统采用什么架构的问题时，只会罗列出一些技术组件、技术框架等技术要素，这样看来其根本没有理清架构的深层含义。也有一些架构师只专注对底层技术的研究，以为打造一个卓越的系统是非常牛逼的事情，可是他忽略了软件系统的价值是以解决业务问题的能力、支撑业务增长的能力为衡量标准，所以最后生产出了很多对组织，对业务没有帮助的系统。</p><h3 id="成本与收益"><a href="#成本与收益" class="headerlink" title="成本与收益"></a>成本与收益</h3><p>　　正如之前所说软件系统只有在运行的时候才能创造价值，也就是说软件系统能否7*24小时＊365天稳定的工作关系到公司的收益水平。所以开发团队对生产环境的发布总是小心翼翼，对解决生产环境的问题总是加班加点。而<font color="red">软件系统的成本则体现在软件构建过程，这时候我们就能理解那些工程技术如项目管理、敏捷开发、 单元测试、持续集成、持续构建，版本管理等的价值了，他们有的是保证软件系统正确性，有的是为了降低沟通成本，有的是为了提升开发效率等但总的来说就是为了降低软件的构建成本。</font>所以在提升系统服务能力，创造更多业务收益的同时，降低构建成本也是一种提升收益的有效手段。<br>　　作为一名软件工程师而言，我们往往处在软件构建过程体系中的某个环节，我们可以基于成本与收益的关系去思考自己每一项技能的价值，学习新的有价值的技能，甚至在工作中基于成本与收益的考量选择合适的技术。比如在逻辑不大发生变化的地方，没有必要去做过多的设计，应用各种花俏的设计模式等浪费时间。这样我们才能成为技术的主人。</p><h3 id="架构目标需要适应业务的发展"><a href="#架构目标需要适应业务的发展" class="headerlink" title="架构目标需要适应业务的发展"></a>架构目标需要适应业务的发展</h3><p>　　架构的目标就是为了支撑业务增长，就是提升软件系统的服务能力。可是话虽说如此，但真实却要做很多取舍。比如对初创团队而言，其产品是否解决业务问题这一设想还没得到确认，就立即去构造一个高性能、高可用的分布式系统，这样的架构目标远超出业务发展的需求，最后的结果就是浪费大量人力物力，却得不到任何起色。架构师需要审时度势，仔细衡量正确性、大规模、可用性三者的关系，比如今年业务蓬勃发展日均订单300万，基于对未来的可能预测，明年可能有3000 万的订单，那么架构师应该要着重考虑大规模和可用性。而且每一点提升的程度，也需要架构师衡量把握，比如可用性要达到2个9还是3个9。<br>　　回顾自己以往的工作很多时候就是因为没有确立架构目标导致浪费了组织很多资源，比如在之前的创业团队中，由于本人有一定的代码洁癖，经常会花费很多时间和同事计较代码质量，这样本可以更快上线的功能却需要被延迟，当时过度追求正确性的行为是与创业团队快速验证想法的业务需求不匹配的。<br>　　另外一点比较深刻的案例则是在本人担任一个技术团队负责人的时候，在一次述职报告的时候，leader问我对接下来团队工作有什么计划？我当时说了一堆什么改进代码质量，每天晨会，任务透明化，建立迭代机制等等，然后就被各种批驳一通。当时团队基本以外包人员为主，人员水平较差，开发出来的金融系统也是千疮百孔而这条业务线最重要的业务价值则是按计划实现潜在投资方的需求，争取拉到投资。所以不久leader就召集测试架构的相关人员与我这边一同梳理对核心功能的测试工作，将研发、测试、上线的流程自动化。<br>　　当时并不理解这样做核心价值是什么。但回过头来看这样的工作方式恰好符合了业务发展的需求，即确保系统是符合设计需求的，保证系统达到可接受的正确性，为后续能过快速前进打下基础，最重要的是为企业降低了构建成本。所以程序员想要工作出业绩，必须认清楚系统背后的业务价值，按价值去梳理工作优先级，而不是像我一般过度纠结细节，追求技术理想化。</p><h3 id="成也分工，败也分工"><a href="#成也分工，败也分工" class="headerlink" title="成也分工，败也分工"></a>成也分工，败也分工</h3><p>　　正如在程序员的迷茫那一章节提到的：<font color="red">程序员的迷茫因为长期埋没于软件世界的浩大的分工体系中，无法看清从业务到软件架构的价值链条，无法清楚定位自己在分工体系的位置，处理不好自身与技术、业务的关系所致，</font>所以在这里我想谈谈分工。架构师为了使软件系统更好的服务业务，必然将软件系统生命周期进行拆分，比如分出开发生命周期、测试生命周期、用户访问生命周期、软件运维生命周期，并根据不同的生命周期划分出不同的职责与角色。<br>　　比如开发人员负责开发周期负责完成软件研发，测试人员负责对开发人员交付的成果进行测试等，于是就形成了分工。一旦分工形成，每一个分工组织都会有自己的价值追求，架构师关注的顶层的价值即软件系统能否支撑业务增长被分工的形式打碎到各个组织中。分工是有其价值的，他使得复杂昂贵的任务可以被简单、并行、可替换的流水线方式解决。但久而久之，价值碎片化的问题就出现了，比如测试人员只关注找出更多问题，开发人员只关注快速开发更多的系统，运维人员只关注保障系统稳定。<br>　　三者之间常常都只站在自己的立场去要求对方怎么做，没有人再关注整体价值，产生诸多矛盾增加软件实施成本。而身处流水线中的一员，又因为困扰于重复性工作， 迷茫于工作的意义，甚至感觉自己做为了人的创意与灵感都被扼杀了。所以我的朋友吐槽我说你写了那么多代码然后并没有怎么样是非常有道理的，那是因为我只关注着做为流水工人的价值要求，看不到生态链最顶端的价值。<br>　　我们仔细想想那些团队领导，精英领袖哪一个不是为着更广大的价值所负责，比如项目经理只需要关心自身项目的商业价值，而公司CEO则关心公司范畴内所有业务的总体商业价值。所以关注的价值越大且职位也就越高。这些高层领导者们把控着整体的价值链条，及时纠正底层分工组织的价值目标与整体价值目标出现偏差的问题。</p><h3 id="从价值出发－找寻学习与工作的新思路"><a href="#从价值出发－找寻学习与工作的新思路" class="headerlink" title="从价值出发－找寻学习与工作的新思路"></a>从价值出发－找寻学习与工作的新思路</h3><p>　　迷茫能引发思考，架构则塑造了视野，而价值则是我们之所以存活，之所以工作的逻辑起点。基于这样一种价值思维，对我们的学习和工作又可以有哪些改启示呢？<br>　　<strong>明确自身的业务相关主体：</strong>找出你工作的协作关系网内的业务方和客户方，这样你就可以从客户方中找到离你最近的业务价值点，从你的业务方中挖掘更多的资源。甚至你可以按这个思路顺着网络向上或向下挖掘价值链条，整合更多的上下游资源以实现更大的价值。<br>　　<strong>向前一步，为更大的价值负责：</strong><font color="red">不要因为自己是开发人员就不去关注软件运维，不要因为只是测试就不关注软件开发，因为你关注的越多你越能看清全局的价值目标。如果只关注一亩三分地，那么注定这辈子只能困守在这一亩三分地里，成为一名流水线上焦虑至死的码农。试着转变思维，从架构师的角度思考价值问题，看看能否将技术贯穿到业务、到用户、到最终的价值去。</font>之前我的朋友说过要把产品经理踢到运营位置去，把程序员踢到产品经理位置去，这样才是正确做事方式。这句话也是类似的意思，向前一步才能懂得怎么做的更好。<br>　　<strong>像架构师一样思考，用价值找寻重心：</strong><font color="red">人的迷茫是因为找不到重心，而价值的意义在于引导我们思考做哪些事情才能实现价值，先做哪些事情会比后做哪些事情更能创造收益。像架构师那样全局性思考，把遇到问题进行拆分，把学习到的事物串联起来，努力构成完整的价值链条。</font><br>　　<strong>学会连接，构建体系：</strong>前几天看到一篇文章对今日头条的产品形态极尽批判之词，指责它的智能算法将人类封死在自己的喜好之中，将人类社会进一步碎片化。这似乎很有道理，有趣的是互联网将我们连接至广袤的世界，却也把我们封闭在独属于自己的小世界里。依旧是我的那位朋友，他说他的最大价值在于连接，将不同的人连接在一起，有趣的事情可能就会即将发生。<br>　　或许算法的天性就是顺从与迎合，但人最终想理解这个世界还是需要依靠自身的行动与不同人之间建立联系，这也是一种摆脱流水线限制的有效方式。另外，我们自身也是某种事物连接的产物，比如架构师，他是业务、技术、管理连接在一起的一种产物。所以我们应当树立自身的知识体系以吸收融合新知识，将孤立的概念连接起来，形成自身的价值链条。比如这篇文章将我从事技术开发经验、与对架构的理解以及自身过往经历结合起来，这也是一种内在的体系梳理。<br>　　作者简介：空融，网名“D调的暖冬”。现就职蚂蚁金服，从事支付宝身份认证相关领域的技术开发。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：空融&lt;br&gt;　　阿里妹导读：写了这么多年的代码，你是否曾经有过这样的迷茫和困惑——技术发展日新月异，奋力追赶的我们，究竟是技术的主人还是技术的奴隶？今天，我们邀请到了蚂蚁金服的技术专家空融，一起来聊聊技术人的软件世界观。&lt;br&gt;　　在浩大的软件世界里，作为一名普通程序员，显得十分渺小，甚至会感到迷茫。我们内心崇拜技术，却也对日新月异的技术抱有深深的恐惧。有时候我会思考难道在技术领域内不断紧跟新潮，不断提升技能就是我的价值所在？那么我是技术的主人还是技术的奴隶？&lt;br&gt;人之所以迷茫往往是找不到工作生活的重心，感受不到工作或生活的价值。那么什么是价值呢？说的大一点就是我改变了世界，说的小一点就是我的所作所为改善了某些问题。如果不清楚自己的行为、目标、价值三者的关系，那么又何来重心？又如何能分得清重要性与优先级呢？&lt;br&gt;
    
    </summary>
    
      <category term="书籍" scheme="http://yoursite.com/categories/%E4%B9%A6%E7%B1%8D/"/>
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>谈谈MySQL隐式类型转换【转】</title>
    <link href="http://yoursite.com/2017/12/18/%E8%B0%88%E8%B0%88MySQL%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E3%80%90%E8%BD%AC%E3%80%91/"/>
    <id>http://yoursite.com/2017/12/18/谈谈MySQL隐式类型转换【转】/</id>
    <published>2017-12-18T03:52:21.000Z</published>
    <updated>2017-12-18T05:24:38.946Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　今天我们继续回到MySQL系列文章中,谈一谈MySQL中隐式类型转换。(其实我最早知道是在慢SQL优化中知道的隐式类型转换概念的),在说隐式类型转换之前,首先我们通过一个实例来看看是怎么回事。<br><a id="more"></a></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>本文中所有的操作,都是基于该数据结构(有兴趣的童鞋,可以实验):</p><pre><code>create table t_base_user(   oid bigint(20) not null primary key auto_increment,  name varchar(30) null comment &quot;name&quot;,  email varchar(30) null comment &quot;email&quot;,  age int null comment &quot;age&quot;,  telephone varchar(30) null comment &quot;telephone&quot;,  status tinyint(4) null comment &quot;0 无效 1 有效&quot;,  created_at datetime null default now() comment &quot;创建时间&quot;,  updated_at datetime null default now() comment &quot;修改时间&quot;  )### 新建索引alter table t_base_user add index idx_email(email);alter table t_base_user add index idx_name(name);alter table t_base_user add index idx_telephone(telephone);### 新增记录: INSERT INTO `test`.`t_base_user` (`name`, `email`, `age`, `telephone`, `status`, `created_at`, `updated_at`) VALUES (&apos;111111&apos;, &apos;andytohome@gmail.com&apos;, &apos;111&apos;, &apos;12345678901&apos;, &apos;1&apos;, now(),now());</code></pre><h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>  首先我们基于上述数据结构中,我们来看看下面这个执行计划:</p><blockquote><p>explain select * from t_base_user where telephone=12345678901;</p></blockquote><p>执行计划结果:</p><pre><code>id | select_type |    table    | type | possible_keys | key  | key_len | ref  | rows | Extra-- | ----------- | ----------- | ---- | ------------- | ---- | ------- | ---- | ---- | ------------1  | SIMPLE      | t_base_user | ALL  | idx_telephone | NULL | NULL    | NULL | 1    | Using where</code></pre><p>细心的童鞋应该已经看出来了,为什么数据结构中已经在telephone字段上新建了idx_telephone，而上述语句并没有走索引,而是全表扫描。这是为什么呢？带着这疑问,我们来看看今天的主角–MySQL隐式类型转换</p><h3 id="什么隐式类型转换？"><a href="#什么隐式类型转换？" class="headerlink" title="什么隐式类型转换？"></a>什么隐式类型转换？</h3><p>  在MySQL中:</p><blockquote><p>当操作符与不同类型的操作数一起使用时，会发生类型转换以使操作数兼容。则会发生转换隐式</p></blockquote><p>也就是说,MySQL会根据需要自动将数字转换为字符串，将字符串转换数字。看到这个概念之后,是不是有一种茅塞顿开的感觉。哦… 原来在数据结构中telephone字段为字符串(varchar)类型,而我们传的手机号是数字类型。现在我们将SQL修改下:</p><blockquote><p>select * from t_base_user where telephone=”1234567890”;</p></blockquote><p>再看看执行计划上述语句的执行计划:</p><blockquote><p>explain select * from t_base_user where telephone=”1234567890”;</p></blockquote><p>结果:</p><pre><code>id | select_type |    table    | type | possible_keys |      key      | key_len | ref  | rows | Extra-- | ----------- | ----------- | ---- | ------------- | ------------- | ------- | ---- | ---- | ------------1  | SIMPLE      | t_base_user | ref  | idx_telephone | idx_telephone |   63    | const|   1  | Using index condition</code></pre><p>从这里看,现在语句已经走索引了。为了加深我们对隐式类型转换的印象,我们再多看看几个隐式类型转换案例:<br>案例一: 字符串转换为数字</p><blockquote><p>mysql &gt; SELECT 1+’1’;</p></blockquote><p>结果:</p><blockquote><p>mysql &gt; 2</p></blockquote><p>案例二: 数字转换为字符串</p><blockquote><p>mysql -&gt; SELECT CONCAT(1024,’ andyqian’);</p></blockquote><p>结果:<br>‘1,’ test’;</p><p>此时CONCAT(字符拼接)函数就进行了隐式类型转换。</p><h3 id="如何避免隐式类型转换"><a href="#如何避免隐式类型转换" class="headerlink" title="如何避免隐式类型转换?"></a>如何避免隐式类型转换?</h3><p>　　只有当清楚的知道隐式类型转换的规则，才能从根本上避免产生隐式类型转换。MySQL也在官网描述了进行隐式类型转换的一些规则如下:</p><p><strong>1. 隐式类型转换规则:</strong></p><ul><li>如果一个或两个参数都是NULL，比较的结果是NULL，除了NULL安全的&lt;=&gt;相等比较运算符。对于NULL &lt;=&gt; NULL，结果为true。不需要转换</li><li>如果比较操作中的两个参数都是字符串，则将它们作为字符串进行比较。</li><li>如果两个参数都是整数，则将它们作为整数进行比较。</li><li>如果不与数字进行比较，则将十六进制值视为二进制字符串</li><li>如果其中一个参数是十进制值，则比较取决于另一个参数。 如果另一个参数是十进制或整数值，则将参数与十进制值进行比较，如果另一个参数是浮点值，则将参数与浮点值进行比较</li><li>如果其中一个参数是TIMESTAMP或DATETIME列，另一个参数是常量，则在执行比较之前将常量转换为时间戳。</li><li>在所有其他情况下，参数都是作为浮点数（实数）比较的。</li></ul><p><strong>2. 使用CAST函数显示转换</strong><br>我们可以使用CAST显示的将类型进行转换,如下所示:</p><blockquote><p>mysql&gt; SELECT 38.8, CAST(38.8 AS CHAR);</p></blockquote><p>结果:</p><blockquote><p>mysql &gt; 38.8, ‘38.8’</p></blockquote><p>如上述中:</p><blockquote><p>select * from t_base_user where telephone=cast(15608464487 as char);</p></blockquote><p>查看执行计划,我们也可以看出,这个时候也走索引了。</p><p><strong>3. 类型一致</strong><br>  这里说的类型一致,指的是在写SQL时,参数类型一定要与数据库中的类型一致,避免产生隐式类型转换,就如刚才在文首时,如果多检查,写的SQL的参数类型与数据库中字段类型一致，也就不会不走索引了，你说是不是？</p><h3 id="小心隐式类型转换"><a href="#小心隐式类型转换" class="headerlink" title="小心隐式类型转换"></a>小心隐式类型转换</h3><p>　　这里再重申一次,写SQL时一定要检查参数类型与数据库字段类型一致,(如果参数不一致,也要使用CAST函数显示转换成一致)否则造成隐式类型转换,不走索引,后果简直不堪设想, 在前面《写会MySQL索引》这篇文章中提到过,不走索引,轻则造成慢查询，重则造成数据库服务器CPU100%。唉,说到这里,不瞒你说，我就吃过不少MySQL隐式类型转换的亏,导致了慢查询。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>　　看到这里,是不是有一种，数据表设计还真不是件容易的事情。需要考虑的因素太多太多了,需要考虑字段类型,索引设计,还有各种约束条件等等。也一定要谨慎谨慎再谨慎！其实换个角度就更容易理解了,大家都知道高楼大厦都是需要一个好的地基的,在数据库表设计中,前期的表结构设计就是这个地基，其重要性可想而知。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　今天我们继续回到MySQL系列文章中,谈一谈MySQL中隐式类型转换。(其实我最早知道是在慢SQL优化中知道的隐式类型转换概念的),在说隐式类型转换之前,首先我们通过一个实例来看看是怎么回事。&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>互联网行业职位简称总结</title>
    <link href="http://yoursite.com/2017/12/14/%E4%BA%92%E8%81%94%E7%BD%91%E8%A1%8C%E4%B8%9A%E8%81%8C%E4%BD%8D%E7%AE%80%E7%A7%B0%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/12/14/互联网行业职位简称总结/</id>
    <published>2017-12-14T02:53:59.000Z</published>
    <updated>2017-12-14T03:29:07.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见互联网职位英文缩写：PM、RD、FE、UE、UI、QA、OP、DBA等"><a href="#常见互联网职位英文缩写：PM、RD、FE、UE、UI、QA、OP、DBA等" class="headerlink" title="常见互联网职位英文缩写：PM、RD、FE、UE、UI、QA、OP、DBA等"></a><font color="red">常见互联网职位英文缩写：PM、RD、FE、UE、UI、QA、OP、DBA等</font></h2><h3 id="PM"><a href="#PM" class="headerlink" title="PM"></a>PM</h3><p><strong>项目经理( Project Manager )</strong><br>　　从职业角度，是指企业建立以项目经理责任制为核心，对项目实行质量、安全、进度、成本管理的责任保证体系和全面提高项目管理水平设立的重要管理岗位。项目经理是为项目的成功策划和执行负总责的人。<br>　　项目经理是项目团队的领导者，项目经理首要职责是在预算范围内按时优质地领导项目小组完成全部项目工作内容，并使客户满意。为此项目经理必须在一系列的项目计划、组织和控制活动中做好领导工作，从而实现项目目标。<br>　　<strong>当然在互联网公司这个有着项目经理or产品经理的意思。</strong><br><a id="more"></a></p><h3 id="RD"><a href="#RD" class="headerlink" title="RD"></a>RD</h3><p><strong>研发（Research and Development）</strong><br>　　如：软件RD工程师就是软件研发工程师，诸如PHP程序猿，Java程序猿，无论是爱疯的还是安卓的都是属于这一类别。偏向于后端的技术实现。</p><h3 id="FE"><a href="#FE" class="headerlink" title="FE"></a>FE</h3><p><strong>前端（Front-End）；前端开发（Front-End Development）</strong><br>　　FE是web前端研发、前端开发的意思！</p><h3 id="UE"><a href="#UE" class="headerlink" title="UE"></a>UE</h3><p><strong>用户体验（User Experience，简称UX或 UE）</strong><br>　　是一种纯主观的在用户使用一个产品（服务）的过程中建立起来的心理感受。因为它是纯主观的，就带有一定的不确定因素。<br>　　个体差异也决定了每个用户的真实体验是无法通过其他途径来完全模拟或再现的。但是对于一个界定明确的用户群体来讲，其用户体验的共性是能够经由良好设计的实验来认识到。<br>　　计算机技术和互联网的发展，使技术创新形态正在发生转变，以用户为中心、以人为本越来越得到重视，用户体验也因此被称做创新2.0模式的精髓。<br>　　另外还有有个组合叫法：UED（产品交互设计师，用户体验师）。</p><h3 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h3><p><strong>用户界面（User Interface）</strong><br>　　UI设计则是指对软件的人机交互、操作逻辑、界面美观的整体设计。好的UI设计不仅是让软件变得有个性有品味，还要让软件的操作变得舒适、简单、自由、充分体现软件的定位和特点。<br>　　UI还有其它的意义，如Unit Interval，Univ of Iowa，Unlock Instruction，Urgent Interrupt。</p><h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><p><strong>测试（QUALITY ASSURANCE，中文意思是“质量保证”）</strong><br>　　其在ISO8402：1994中的定义是“为了提供足够的信任表明实体能够满足质量要求，而在质量管理体系中实施并根据需要进行证实的全部有计划和有系统的活动”。有些推行ISO9000的组织会设置这样的部门或岗位，负责ISO9000标准所要求的有关质量保证的职能，担任这类工作的人员就叫做QA人员。</p><h3 id="OP"><a href="#OP" class="headerlink" title="OP"></a>OP</h3><p><strong>运维（Operations）</strong><br>　　OP这个词语代表的意思很多，这个简称来自于英文的Operations一词。我也不清楚谁最早用op代表运维工程师，不过2010年开始，这个词慢慢被很多人所知道。<br>　　OP工作内容主要就是维护公司的服务器能够正常提供服务，细分的话包括系统部分，网络部分，应用程序部分，数据库部分，具体根据公司的规模和职位职能不同，运维的定义也不同。现在市面上主要的OP有三种：网络游戏运维，网站运维，大型项目测试和生产环境运维。</p><h3 id="DBA"><a href="#DBA" class="headerlink" title="DBA"></a>DBA</h3><p><strong>数据库管理员（Database Administrator，简称DBA）</strong><br>　　是一个负责管理和维护数据库服务器的人。数据库管理员负责全面管理和控制数据库系统。这个职位对不同的人意味着不同的意义。<br>　　另外还有DB，既数据库（Database）。</p><h2 id="还有就是互联网产品设计常用文档类型的缩写：-BRD、MRD、PRD、FSD等"><a href="#还有就是互联网产品设计常用文档类型的缩写：-BRD、MRD、PRD、FSD等" class="headerlink" title="还有就是互联网产品设计常用文档类型的缩写： BRD、MRD、PRD、FSD等"></a><font color="red">还有就是互联网产品设计常用文档类型的缩写： BRD、MRD、PRD、FSD等</font></h2><h3 id="BRD"><a href="#BRD" class="headerlink" title="BRD"></a>BRD</h3><p><strong>商业需求文档（Business Requirement Document）</strong><br>　　是基于商业目标或价值所描述的产品需求内容文档（报告）。其核心的用途就是用于产品在投入研发之前，由企业高层作为决策评估的重要依据。其内容涉及市场分析，销售策略，盈利预测等，通常是供决策层们讨论的演示文档，一般比较短小精炼，没有产品细节。</p><h3 id="MRD"><a href="#MRD" class="headerlink" title="MRD"></a>MRD</h3><p><strong>市场需求文档（Market Requirements Document）</strong><br>　　获得老大的认同后，产品进入实施，需要先出MRD，具体来说要有更细致的市场与竞争对手分析，通过哪些功能来实现商业目的，功能/非功能需求分哪几块，功能的优先级等等。实际工作中，这个阶段PD可能的产出物有Mind Manager的思维图，Excel的Feature List等。<br>　　市场需求文档（MRD）重点放在为一个被提议的新产品或者现有产品的改进定义市场需求。与BRD指出商业问题和解决这些问题的解决方案不同，MRD更深入提议解决方案的细节。它包括一些或者所有这些细节：</p><pre><code>a. 解决商业问题所需要的特色b. 市场竞争分析c. 功能和非功能需求d. 特色/需求的优先级e. 用例</code></pre><p>　　MRD通常是由拥有产品经理，产品营销经理或者行业分析师头衔的人撰写的。MRD通常是一份连续的5-25页Word文档，或者正如之后描述那样在一些机构中甚至更长。</p><h3 id="PRD"><a href="#PRD" class="headerlink" title="PRD"></a>PRD</h3><p><strong>产品需求文档（Product Requirements Document）</strong><br>　　进步一细化，这部分是PD写得最多的内容，也就是传统意义上的需求分析，我们这里主要指UC（use case）文档。主要内容有，功能使用的具体描述（每个UC一般有用例简述、行为者、前置条件、后置条件、UI描述、流程/子流程/分支流程，等几大块），Visio做的功能点业务流程，界面的说明，demo等。Demo方面，可能用dreamweaver、ps甚至画图板简单画一下，有时候也会有UI/UE支持，出高保真的demo，开发将来可以直接用的那种。<br>　　产品需求文档（PRD）重点放在为一个被提议的新产品或者现有产品的改进定义市场需求。与MRD侧重于从市场需要角度看需求的不同，PRD侧重于从产品本身角度看待需求。通常在特点和功能需求上更深入细节，并也可能包括屏幕截图和用户界面流程。在那些MRD不包括具体需求和用例的机构中，PRD就包含这些具体内容。PRD通常是由拥有产品经理，行业分析师或者产品分析师头衔的人撰写的。PRD通常是一份连续的20-50页Word文档，或者针对复杂产品甚至更长。<br>　　提醒：一些机构将这里描述的MRD和PRD合并成一个文档，并称最后的文档为MRD。在这种情况下，MRD包括本段描述的内容，也包括上一段描述PRD的内容，并且可能超过50页。</p><h3 id="FSD"><a href="#FSD" class="headerlink" title="FSD"></a>FSD</h3><p><strong>功能详细说明（Functional Specifications Document）</strong><br>　　有一点像“概要设计”，这步就开始往开发衔接了，产品UI、业务逻辑的细节都要确定，细化文档并保持更新。相应的，有很多内容，比如表结构设计，要由项目经理来编写了。<br>　　功能规格文档（FSD）把焦点集中在实现，定义产品功能需求的全部细节。FSD可能通过一张张的截屏和一条条功能点来定义产品规格。这是一份可以直接让工程师创建产品的文档。<br>　　与MRD和PRD侧重于以市场需要和产品角度看需求不同，FSD把重点放在了以表格形式定义产品细节，再让工程师实现这些细节。FSD也可能包括完整的屏幕截图和UI设计细节。<br>　　FSD通常是由拥有产品分析师，工程领导或者项目经理头衔的人撰写的 – 作者通常属于工程部门。通常一个连续几十页的Word或类似文档。</p><h2 id="剩下的这些都是大佬的职位缩写：-CEO、COO、CFO、CTO、CIO等"><a href="#剩下的这些都是大佬的职位缩写：-CEO、COO、CFO、CTO、CIO等" class="headerlink" title="剩下的这些都是大佬的职位缩写： CEO、COO、CFO、CTO、CIO等"></a><font color="red">剩下的这些都是大佬的职位缩写： CEO、COO、CFO、CTO、CIO等</font></h2><h3 id="CEO"><a href="#CEO" class="headerlink" title="CEO"></a>CEO</h3><p><strong>首席执行官(Chief executive officer)</strong><br>　　是美国人在20世纪60年代进行公司治理结构改革创新时的产物。<br>　　由于市场风云变幻，决策的速度和执行的力度比以往任何时候都更加重要。 传统的“董事会决策、经理层执行”的公司体制已经难以满足决策的需要。而且， 决策层和执行层之间存在的信息传递时滞和沟通障碍、决策成本的增加，已经严 重影响经理层对企业重大决 策的快速反应和执行能力。而解决这一问题的首要一 点，就是让经理人拥有更多自主决策的权力，让经理人更多为自己的决策奋斗、对 自己的行为负责。CEO就是这种变革的产物。CEO在某种意义上代表着将原来董事会 手中的一些决策权过渡到经营层手中。<br>　　CEO与总经理，形式上都是企业的“一把手”，CEO既是行政一把手，又是股东 权益代言人————大多数情况下，CEO是作为董事会成员出现的，总经理则不一定 是董事会成员。从这个意义上讲，CEO代表着企业，并对企业经营负责。 由于国外没有类似的上级主管和来自四面八方的牵制，CEO的权威比国内的总经理们更绝对，但他们绝不会像总经理那样过多介入公司的具体事务。CEO作出总体决 策后，具体执行权力就会下放。所以有人说，CEO就像我国50%的董事长加上50%的总经理。<br>　　一般来讲，CEO的主要职责有三方面：①对公司所有重大事务和人事任免进行决 策，决策后，权力就下放给具体主管，CEO具体干预的较少；②营造一种促使员工愿 意为公司服务的企业文化；③把公司的整体形象推销出去。</p><h3 id="CTO"><a href="#CTO" class="headerlink" title="CTO"></a>CTO</h3><p><strong>首席技术官或技术主管(Chief technology officer)</strong><br>　　基本上就是一个技术大拿，熟练掌握公司地核心技术，并可以带领团队开发或使用新技术来帮助公司达到目标。基本上CTO不会是公司地最高层。<br>　　CTO有时候也会成为公司地最高层，特别是一些以技术为核心竞争力地企业来说。首先，我们来解读一下什么是CTO。其实，CTO（首席技术官）作为一个外来名词，在中国还不多见，随着网络热潮传进中国地CXO系列中地一员，CTO给人留下地印象只是技术人员所能达到地最高职位。“但当技术日益成为影响企业发展地决定因素时，CTO也就成为对企业发展起着决定性作用地人群之一。<br>　　在美国，CTO除了负责技术支持和技术改良等日常工作外，其主要职责是设计公司地未来工作。从某种意义上说，CTO地首要工作是提出公司未来两三年内地产品和服务地技术发展方向。<br>　　尽管CTO这个名词是引进来了，但在角色职能定义方面同国外还存在一定差距。作为一个高科技公司地CTO，其更多地工作应该是前瞻性地，也就是制定下一代产品地策略和进行研究工作，属于技术战略地重要执行者。<br>　　在国内来看，大部分地企业里地“CTO”都是过去地“工程师”摇身一变而成地，因此带着很强地技术色彩。在一些通过技术安身立命地高科技企业，这些工程师出身地CTO也往往能够占据核心领导地位。但是在其他地行业中，例如一些传统地行业，一些把市场营销能力作为核心竞争力地企业，CTO地作用就大打折扣，CIO就逐渐浮出水面了。</p><h3 id="CIO"><a href="#CIO" class="headerlink" title="CIO"></a>CIO</h3><p><strong>首席信息官或信息总监(Chief information officer)</strong><br>　　具有技术背景或对技术有些了解地公司高层。<br>　　通常CIO向CEO汇报，或向CFO汇报。CIO不需要是个技术大拿，但对技术必须非常敏感，并能发掘技术带给公司地潜力。随着IT在各公司地重要性日渐提高，CIO地地位也渐高，有时能进入公司地最高决策层。CIO是个桥梁，把公司地商业模式和技术连接起来。<br>　　他通过组织和利用企业地IT资源，为企业创造效益。通过信息化掌握了企业地业务命脉以及战略方向地CIO，很可能向决策管理层地地位继续上升，直到达到权力地顶峰—CEO。<br>　　一家美国主导企业地首席执行官和一群首席信息官进行了一次谈话，讨论首席信息官在现代公司中地作用。在谈话进行到一半地时候，他直截了当地说：“首席信息官也许是我最重要地经理人。没有他们，我不知道我地公司会是怎样。”由此可见CIO在企业中地重要作用了。<br>　　在CIO成功地基本素质中，其中有一项是要精通企业以及相关行业地知识。要搞信息化，一个CIO至少要熟悉企业地研发、生产、计划、营销、市场、物流等核心业务流程，熟悉企业地财务管理、组织结构、行政程序、人力资源管理等基础资源，以及企业发展地远景、价值观等企业地文化范畴。在这基础上，CIO才能对企业地IT建设和信息资源做出正确地规划。<br>　　因此如果你想成为一个成功地CIO，那么最好远离电脑，去积极培养作为企业管理者应该具备地各种能力。对500名CIO所做地调查发现，70%地人认为通往成功地关键是有效地沟通；58%地人选择谙熟商业流程和运作；而46%地人则认为战略性地思想和计划能力很重要。而此前被认为很重要地IT技能，只获得了10%地认可。这不能不说是一个巨大地观念改变。</p><h3 id="CFO"><a href="#CFO" class="headerlink" title="CFO"></a>CFO</h3><p><strong>首席财务官或财务总监(Chief financial officer)</strong><br>　　现代公司中最重要、最有价值的顶尖管理职位之一，是掌握着企业的神经系统(财务信息)和血液系统(现金资源)灵魂人物。<br>　　做一名成功的CFO需要具备丰富的金融理论知识和实务经验。公司理财与金融市场交互、项目估价、风险管理、产品研发、战略规划、企业核心竞争力的识别与建立以及洞悉信息技术及电子商务对企业的冲击等自然都是CFO职责范围内的事。<br>　　在一个大型公司运作中，CFO是一个穿插在金融市场操作和公司内部财务管理之间的角色。担当CFO的人才大多是拥有多年在金融市场驰骋经验的人。在美国，优秀的CFO常常在华尔街做过成功的基金经理人。</p><h3 id="COO"><a href="#COO" class="headerlink" title="COO"></a>COO</h3><p><strong>首席运营官(Chief operating officer)</strong><br>　　职责主要是负责公司的日常营运，辅助CEO的工作。<br>　　一般来讲，COO负责公司职能管理组织体系的建设，并代表CEO处理企业的日常职能事务。如果公司未设有总裁职务，则COO还要承担整体业务管理的职能，主管企业营销与综合业务拓展，负责建立公司整个的销售策略与政策，组织生产经营，协助CEO制定公司的业务发展计划，并对公司的经营绩效进行考核。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;常见互联网职位英文缩写：PM、RD、FE、UE、UI、QA、OP、DBA等&quot;&gt;&lt;a href=&quot;#常见互联网职位英文缩写：PM、RD、FE、UE、UI、QA、OP、DBA等&quot; class=&quot;headerlink&quot; title=&quot;常见互联网职位英文缩写：PM、RD、FE、UE、UI、QA、OP、DBA等&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;常见互联网职位英文缩写：PM、RD、FE、UE、UI、QA、OP、DBA等&lt;/font&gt;&lt;/h2&gt;&lt;h3 id=&quot;PM&quot;&gt;&lt;a href=&quot;#PM&quot; class=&quot;headerlink&quot; title=&quot;PM&quot;&gt;&lt;/a&gt;PM&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;项目经理( Project Manager )&lt;/strong&gt;&lt;br&gt;　　从职业角度，是指企业建立以项目经理责任制为核心，对项目实行质量、安全、进度、成本管理的责任保证体系和全面提高项目管理水平设立的重要管理岗位。项目经理是为项目的成功策划和执行负总责的人。&lt;br&gt;　　项目经理是项目团队的领导者，项目经理首要职责是在预算范围内按时优质地领导项目小组完成全部项目工作内容，并使客户满意。为此项目经理必须在一系列的项目计划、组织和控制活动中做好领导工作，从而实现项目目标。&lt;br&gt;　　&lt;strong&gt;当然在互联网公司这个有着项目经理or产品经理的意思。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随记" scheme="http://yoursite.com/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>PHP的几种运行模式</title>
    <link href="http://yoursite.com/2017/12/13/PHP%E7%9A%84%E5%87%A0%E7%A7%8D%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/12/13/PHP的几种运行模式/</id>
    <published>2017-12-13T09:29:42.000Z</published>
    <updated>2017-12-13T09:36:44.384Z</updated>
    
    <content type="html"><![CDATA[<p>首先，我们来看看PHP的架构图：<br><img src="/uploads/2017/12/php_core_framework.jpg" alt=""><br><a id="more"></a><br>　　<strong>SAPI（Server Application Programming Interface服务端应用编程端口）提供了一个和外部通信的接口，使得PHP可以和其他应用进行交互数据。</strong> php默认提供了很多种SAPI，常见的给apache的mod_php，CGI，FastCGI，还有Shell的CLI。</p><h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><p>　　以CGI的方式运行，CGI英文叫做公共网关接口，就是Apache在遇到PHP脚本的时候会将PHP程序提交给CGI应用程序（php-cgi.exe）解释，CGI方式在遇到连接请求（用户 请求）先要创建cgi的子进程，激活一个CGI进程（解析器会解析php.ini文件，初始化执行环境），然后处理请求，处理完后再以CGI规定的格式返回处理后的结果给Apache，结束这个子进程。之后Apache再将结果响应给请求的用户。这就是fork-and-execute模式。所以用cgi 方式的服务器有多少连接请求就会有多少cgi子进程，子进程反复加载是cgi性能低下的主要原因。都会当用户请求数量非常多时，会大量挤占系统的资源如内 存，CPU时间等，造成效能低下。</p><font color="red">（注：php-cgi 是PHP的解释器。）</font><h2 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h2><p>　　以FastCGI的方式运行，目的是提高CGI程序性能。这种形式是CGI的加强版本，CGI是单进程，多线程的运行方式，程序执行完成之后就会销毁，所以每次都需要加载配置和环境变量fork-and-execute（创建-执行）。而FastCGI则不同，FastCGI 像是一个常驻 (long-live) 型的 CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去 fork 一次。PHP使用PHP-FPM(FastCGI Process Manager)，全称PHP FastCGI进程管理器进行管理。<br>　　Web Server启动时载入FastCGI进程管理器(IIS ISAPI或Apache Module)。FastCGI进程管理器自身初始化，启动多个CGI解释器进程 (在任务管理器中可见多个php-cgi.exe)并等待来自Web Server的连接。<br>　　当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。<br>　　FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器(运行在Web Server中)的下一个连接。 在CGI模式中，php-cgi在此便退出了。</p><h2 id="APACHE2HANDLER（mod-php）"><a href="#APACHE2HANDLER（mod-php）" class="headerlink" title="APACHE2HANDLER（mod_php）"></a>APACHE2HANDLER（mod_php）</h2><p>　　PHP作为Apache模块，Apache服务器在系统启动后，预先生成多个进程副本驻留在内存中，一旦有请求出 现，就立即使用这些空余的子进程进行处理，这样就不存在生成子进程造成的延迟了。这些服务器副本在处理完一次HTTP请求之后并不立即退出，而是停留在计算机中等待下次请求。对于客户浏览器的请求反应更快，性能较高。<br><em>注：实现FastCGI协议的还有 PHP-FPM（Nginx）、Spawn-FCGI（Lighttp）。</em></p><h2 id="CLI（Command-Line-Interface，即命令行接口）"><a href="#CLI（Command-Line-Interface，即命令行接口）" class="headerlink" title="CLI（Command Line Interface，即命令行接口）"></a>CLI（Command Line Interface，即命令行接口）</h2><p>　　cli是php的命令行运行模式，大家经常会使用它，但是可能并没有注意到（例如：我们在linux下经常使用 “php -m”查找PHP安装了那些扩展就是PHP命令行运行模式；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，我们来看看PHP的架构图：&lt;br&gt;&lt;img src=&quot;/uploads/2017/12/php_core_framework.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="PHP原理" scheme="http://yoursite.com/categories/PHP%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="PHP原理" scheme="http://yoursite.com/tags/PHP%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>茅台投资者：最烦被说一夜暴富 这一天我等了十年【转】</title>
    <link href="http://yoursite.com/2017/12/13/%E8%8C%85%E5%8F%B0%E6%8A%95%E8%B5%84%E8%80%85%EF%BC%9A%E6%9C%80%E7%83%A6%E8%A2%AB%E8%AF%B4%E4%B8%80%E5%A4%9C%E6%9A%B4%E5%AF%8C-%E8%BF%99%E4%B8%80%E5%A4%A9%E6%88%91%E7%AD%89%E4%BA%86%E5%8D%81%E5%B9%B4%E3%80%90%E8%BD%AC%E3%80%91/"/>
    <id>http://yoursite.com/2017/12/13/茅台投资者：最烦被说一夜暴富-这一天我等了十年【转】/</id>
    <published>2017-12-13T03:35:40.000Z</published>
    <updated>2017-12-13T05:27:10.220Z</updated>
    
    <content type="html"><![CDATA[<p><em>随记…</em><br><a id="more"></a><br><img src="/uploads/2017/12/essaies_01.JPEG" alt=""><br><img src="/uploads/2017/12/essaies_02.JPEG" alt=""><br>吴东勤参加茅台股东大会时的自拍。</p><p>茅台股票的异常波动造就了一个经济新名词“茅房困境”：我手里有钱，是拿来买房子，还是拿来买茅台？</p><p>这确实是个问题。</p><p>11月16日，“贵州茅台”以719.11元的收盘价，成为A股有史以来第一只突破700元的股票。当天，其总市值冲破9000亿元。</p><p>茅台自己倒是被吓到了。11月16日晚间茅台公司发布风险提示公告：希望广大投资者和消费者理性看待，审慎决策。</p><p>紧接着20日，上交所会员部出了份通报函，批评个别券商对茅台的评估报告客观依据不足，风险揭示不全面、不充分。</p><p>此后茅台股票一路走跌。11月28日，贵州茅台以648.23元收盘，上涨4.34%。</p><p>从年初的每股334.56元到此后一路走高，不到一年时间，贵州茅台股价累计上涨超100%。转眼又连续下跌，短短几个交易日，市值蒸发千亿。</p><p>股市从没有新事物，只有贪婪和恐惧的交替。那些投资茅台的人，他们有着怎样的故事呢？</p><p>给儿子留十套茅台生肖</p><p>茅台风波迭起的这几天，浙江舟山投资者吴东勤显得相当淡定，依旧保持着每天晚上喝一点的习惯，不多，两盅，茅台。</p><p>在吴东勤15平方米的办公室里有一面堆了将近50箱还没拆封的茅台生肖酒，旁边的架子上还陈列着限量的茅台酒和特供酒，都是近两年陆续收藏的。</p><p>他正在装修的新房子里甚至专门为茅台酒留了一间房，做陈列和收藏用。</p><p>“我以十年为一个周期做资产配置，每年有15%收益率就已经很开心了，茅台今年涨了多少！我不希望它（涨得）太快。”吴东勤会计学出身，喜欢讨论复利：每年15%收益率，意味着差不多5年以后他的投资就能够翻倍。</p><p>事实上，茅台的增长速度远远高于他的预期。“我从150元/股的价格开始买起，最低买到过118元/股，满仓以后就没有再交易。”即使不算分红收益，从开始重仓茅台，一年多时间吴东勤的账户资金已经翻了两番不止。</p><p>而他收藏的茅台生肖酒比买入时已经涨了3倍多。</p><p>这算暴利吗？“暴利？小票（指小市值股票）才赚得更多。”他说，“创业板我买过乐视，第一家上A股的网络视频公司，两个月不到赚了一倍。现在看呢？我曾问过自己一个问题，‘这家公司5年后会怎么样’，答案是‘不知道’，所以我抛掉了。”</p><p>当时的股市几乎是一匹脱缰的野马。“什么时候见顶，谁知道？我不够聪明，所以这个钱你们赚吧，我不赚了。”从那波断崖式下跌的行情里全身而退，吴东勤庆幸自己比较“傻”。“说到底股票投资赚的是三笔钱：一笔是价格低于价值，被低估的钱；一笔是企业发展，市值提高，增值的钱；还有一笔就是价值被高估，泡沫化的钱。我能赚到前两笔就足够满足了。”赚第一笔靠智商，赚到第二笔要耐心，而泡沫化的钱，迟早都要还回去。</p><p>“我自己是做实业的，知道实业企业一年能有10%~15%的净利润有多么难。用实业的思维去看一家公司的时候，我们在投资回报上的要求会非常理性。”吴东勤希望可以通过投资实现家庭致富，但这是一个漫长的过程，他并不急，他的计划是20年。“以后给儿子留十套茅台生肖酒，他人生的第一桶金就有了。”</p><p>一夜暴富？这一天我等了十年</p><p>仲阳和吴东勤同在一个茅粉群里，加群的门槛之一是至少持有5000股茅台。</p><p>一开始只是一起讨论股票的网友，投资理念相合，约着喝了顿酒，就成了朋友。他持有茅台的时间比吴东勤更长。</p><p>“最烦别人说茅台‘一夜暴富’，这一天我等了十年。”他买入时是2007年春，现在已是2017年冬，“当时茅台股价已经在100元附近徘徊，也是高价股了。”</p><p>以当时的“高价”买入，原本就存了长期持有的打算。“给儿子结婚准备的”，对好奇他十年不卖的朋友，仲阳总是这么解释，虽然他儿子今年初中还没毕业。</p><p>“我不会说自己锁仓十年都是那么快乐，我是凡人，2008年大熊市的惊涛骇浪，2012年秋后白酒板块的大溃退，都很彷徨。”仲阳说，其实最近这几天他也有点纠结要不要减仓：一方面作为十几年的资深“茅粉”，很清楚这家公司的经营状况并没有出现问题，并且正在进入一轮快速发展周期；另一方面他又多少有点担心历史重演，“我经历过两次股价60%以上的回撤，不想再坐一次电梯。”</p><p>他说，股票市场短期看是一台投票器，长期看一定是称重仪。“买股票就是做股东买企业，我要用足够的时间把企业的成长转化为我的财富。”这让他在茅台股价超过400元时决定继续做一个茅台的守望者，他很文艺地说，因为“几乎所有包括投资在内的伟大事业都是一场孤独的旅行”，最好不多看、不多说，也不胡思乱想。</p><p>话虽如此，实际很难做到，尤其是茅台股价在极短时间内冲破700元。“机构也好、基金也好都有短期业绩指标，他们不可能像我一样有耐心去等待一家企业成长，（他们）收一茬韭菜就走，能让他们兴奋的只有收益率。”仲阳说起来就生气，直言中国资本市场出现的很多问题每个参与者都有责任，不要抱怨我们没有伟大的公司，因为在他们成为“伟大”之前就已经被一轮轮收割。他忍不住骂了一句，“那些短视的公募基金！”</p><p>他决定还是再看看，作为小股东分享了一家企业十年成长的红利，很难说抛就抛。“有感情了。”为了分析这只股票，他甚至专门去研究茅台的历史，了解其酿造过程、搞清楚了每种茅台酒的区别，甚至身边朋友买茅台酒他都要叫人家去茅台电商买，除了“保真”以外，因为这样茅台股份能稍多一部分营收。尽管那几箱酒的买卖影响也未必多大，但他觉得这是投资者应尽之责。</p><p>700元以上可能会考虑减持茅台</p><p>跟仲阳碰面当天，茅台还没有破700元，另一位投资者“西湖边的男2015”在其个人微博上表态，“以股价700为界，本人在未来6个月内也将择机减持茅台股票；并使本人所持有的茅台仓位降到占全部持仓市值的6~7成。”</p><p>“西湖边的男2015”姓许，也是资深茅粉，微博网友习惯称呼他“西湖兄”。两人相识，用仲阳的话说，都是“经历过上甘岭的人”。圈内把在2012年秋后白酒板块的大溃退中坚持下来戏称为“守住上甘岭”。</p><p>“西湖边的男2015”手里的茅台股票是圈里比较多的，“按目前的市值来算早已过亿”，所以在圈里人看来适度减仓很正常。</p><p>11月14日，发微博当天，他说对茅台股价现状的看法是，“不再便宜，但也谈不上极端高估”。</p><p>11月16日，茅台股价破700元。</p><p>原本想约“西湖边的男2015”见面聊聊，结果他人正在大洋彼岸。“我这人散淡惯了。”他说。</p><p>一周之后，他发微博又谈起茅台，当然说的也不仅仅是茅台。谈及减持茅台的初衷，除了仓位原因，他说，“700元以上的茅台股价作为参照，去找寻在未来一个时期投资收益高于茅台的投资标的，是可能的。”当然，他口中的“未来一个时期”是5年，或者10年。大多数希望短期获利的人没有这份耐心。</p><p>他想要完成茅台的调仓，实际上并未完成。“这次市场并没有在700元以上给我提供充裕的调仓时间。好在，我善于等待，我不急。”</p><p>不要抱怨我们没有伟大的公司，因为在他们成为“伟大”之前就已经被一轮轮收割。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;随记…&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随记" scheme="http://yoursite.com/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="随记" scheme="http://yoursite.com/tags/%E9%9A%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Apache-多站点伪静态配置</title>
    <link href="http://yoursite.com/2017/12/13/Apache-%E5%A4%9A%E7%AB%99%E7%82%B9%E4%BC%AA%E9%9D%99%E6%80%81%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/12/13/Apache-多站点伪静态配置/</id>
    <published>2017-12-13T03:07:22.000Z</published>
    <updated>2017-12-13T03:14:58.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Apache伪静态配置"><a href="#一、Apache伪静态配置" class="headerlink" title="一、Apache伪静态配置"></a>一、Apache伪静态配置</h2><p>1、开启http.conf中的rewrite模块<br>LoadModule rewrite_module modules/mod_rewrite.so  #前的注释去掉即可<br>检测：可使用phpinfo() 查看mod_rewrite模块是否加载<br>2、允许指定目录使用.htaccess<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DocumentRoot &quot;D:/xampp/htdocs&quot;</span><br><span class="line">&lt;Directory &quot;D:/xampp/htdocs&quot;&gt;</span><br><span class="line">Options Indexes FollowSymLinks Includes ExecCGI</span><br><span class="line">AllowOverride All</span><br><span class="line">Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p><p>3、上面两步操作完之后，后面即可在 /htdocs目录下使用.htaccess文件<br><a id="more"></a></p><h2 id="二、多站点伪静态配置"><a href="#二、多站点伪静态配置" class="headerlink" title="二、多站点伪静态配置"></a>二、多站点伪静态配置</h2><blockquote><p>前提：根目录下有多个站点，且http.conf 配置文件中的网站根目录不能开启.htaccess文件识别。（否则，根目录开启.htaccess文件识别，那根目录下的子目录都会生效。）此处指的多站点配置伪静态是指对根目录下的某些站点配置。</p></blockquote><p>因此多站点配置可分为两种方式：</p><ol><li>根目录开启识别.htaccess文件</li><li>根目录下各子站开启识别.htaccess文件</li></ol><p>多站点配置伪静态，首先需要有多站点配置。此处不予说明，前提配置与上面相同，直接上代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerAdmin webmaster@admin.com</span><br><span class="line">    DocumentRoot &quot;D:/xampp/htdocs/CI&quot;</span><br><span class="line">    ServerName myblog.com</span><br><span class="line">    ServerAlias www.myblog.com</span><br><span class="line">    &lt;Directory &quot;D:/xampp/htdocs/CI&quot;&gt;</span><br><span class="line">        Options Indexes FollowSymLinks Includes ExecCGI</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require all granted</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">    ErrorLog &quot;logs/myblog.com-error.log&quot;</span><br><span class="line">    CustomLog &quot;logs/myblog-access.log&quot; common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p><p>说明：</p><ul><li>此处的<directory>节点必须要写，否则站点下的.htaccess文件不生效。</directory></li><li>有几个站点可以配置几个站点，都是同理。</li></ul><h2 id="三、遇到的问题及操作记录"><a href="#三、遇到的问题及操作记录" class="headerlink" title="三、遇到的问题及操作记录"></a>三、遇到的问题及操作记录</h2><p>1、启动Apache报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">15:10:01  [Apache] Error: Apache shutdown unexpectedly.</span><br><span class="line">15:10:01  [Apache] This may be due to a blocked port, missing dependencies, </span><br><span class="line">15:10:01  [Apache] improper privileges, a crash, or a shutdown by another method.</span><br><span class="line">15:10:01  [Apache] Press the Logs button to view error logs and check</span><br><span class="line">15:10:01  [Apache] the Windows Event Viewer for more clues</span><br><span class="line">15:10:01  [Apache] If you need more help, copy and post this</span><br><span class="line">15:10:01  [Apache] entire log window on the forums</span><br></pre></td></tr></table></figure></p><p>解决办法：</p><ol><li>有错误可知最可能的原因就是端口被占用，因此可围绕端口占用查找<br>windows下查看端口情况及被占用情况命令：<br>列出所有端口的情况： netstat -ano<br>查找指定端口的情况： netstat -ano | findstr “80”<br>还可使用xampp管理界面直接查看使用端口情况，或者使用任务管理器查看进程，比对pid。</li><li>此处，经查我的错误不是端口被占用，可<strong>在命令行下面执行httpd.exe</strong>，查看输出结果。<br>提示错误：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D:\xampp\apache\bin&gt;httpd.exe</span><br><span class="line">AH00526: Syntax error on line 47 of D:/xampp/apache/conf/extra/httpd-vhosts.conf:</span><br><span class="line">ServerName takes one argument, The hostname and port of the server</span><br></pre></td></tr></table></figure></li></ol><p>可知是由于httpd-vhosts.conf配置文件修改错误，更改后重启成功。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Apache伪静态配置&quot;&gt;&lt;a href=&quot;#一、Apache伪静态配置&quot; class=&quot;headerlink&quot; title=&quot;一、Apache伪静态配置&quot;&gt;&lt;/a&gt;一、Apache伪静态配置&lt;/h2&gt;&lt;p&gt;1、开启http.conf中的rewrite模块&lt;br&gt;LoadModule rewrite_module modules/mod_rewrite.so  #前的注释去掉即可&lt;br&gt;检测：可使用phpinfo() 查看mod_rewrite模块是否加载&lt;br&gt;2、允许指定目录使用.htaccess&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DocumentRoot &amp;quot;D:/xampp/htdocs&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Directory &amp;quot;D:/xampp/htdocs&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Options Indexes FollowSymLinks Includes ExecCGI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AllowOverride All&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Require all granted&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3、上面两步操作完之后，后面即可在 /htdocs目录下使用.htaccess文件&lt;br&gt;
    
    </summary>
    
      <category term="Apache" scheme="http://yoursite.com/categories/Apache/"/>
    
    
      <category term="Apache" scheme="http://yoursite.com/tags/Apache/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令之grep</title>
    <link href="http://yoursite.com/2017/12/12/Linux%E5%91%BD%E4%BB%A4%E4%B9%8Bgrep/"/>
    <id>http://yoursite.com/2017/12/12/Linux命令之grep/</id>
    <published>2017-12-12T10:27:29.000Z</published>
    <updated>2017-12-12T10:28:26.894Z</updated>
    
    <content type="html"><![CDATA[<p>　grep命令文件过滤分割与合并 grep（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。<br><a id="more"></a><br><strong>常用选项：</strong><br>-n    在显示符合范本样式的那一列之前，标示出该列的编号。<br>-v    反转查找。<br>-i    忽略字符大小写的差别。</p><p><strong>常见用法：</strong><br>1、在文件中搜索一个单词，命令会返回一个包含“match_pattern”的文本行：<br>grep match_pattern file_name<br>grep “match_pattern” file_name</p><p>2、在多个文件中查找：<br>grep “match_pattern” file_1 file_2 file_3 …<br>grep “match_pattern” ./*.php</p><p>3、输出除之外的所有行 -v 选项：<br>grep -v “match_pattern” file_name</p><p>4、输出包含匹配字符串的行数 -n 选项：<br>grep “text” -n file_name<br>或<br>cat file_name | grep “text” -n </p><p>#多个文件<br>grep “text” -n file_1 file_2</p><p>5、忽略匹配样式中的字符大小写：<br>echo “hello world” | grep -i “HELLO”<br>hello</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　grep命令文件过滤分割与合并 grep（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux命令" scheme="http://yoursite.com/tags/Linux%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>CGI、FastCGI、PHP-CGI、PHP-FPM详解</title>
    <link href="http://yoursite.com/2017/12/12/CGI%E3%80%81FastCGI%E3%80%81PHP-CGI%E3%80%81PHP-FPM%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/12/12/CGI、FastCGI、PHP-CGI、PHP-FPM详解/</id>
    <published>2017-12-12T07:05:11.000Z</published>
    <updated>2017-12-12T10:48:31.117Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><p>　CGI全称是“公共网关接口”(Common Gateway Interface)，HTTP服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。<br>　CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php,perl,tcl等<br><a id="more"></a><br><img src="/uploads/2017/12/cgi_01.jpg" alt=""></p><h2 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h2><p>　FastCGI像是一个常驻(long-live)型的CGI，它可以一直执行着，只要激活后，不会每次都要花费时间去fork一次(这是CGI最为人诟病的fork-and-execute 模式)。它还支持分布式的运算, 即 FastCGI 程序可以在网站服务器以外的主机上执行并且接受来自其它网站服务器来的请求。<br>　FastCGI是语言无关的、可伸缩架构的CGI开放扩展，其主要行为是将CGI解释器进程保持在内存中并因此获得较高的性能。众所周知，CGI解释器的反复加载是CGI性能低下的主要原因，如果CGI解释器保持在内存中并接受FastCGI进程管理器调度，则可以提供良好的性能、伸缩性、Fail-Over特性等等。<br>　FastCGI也可以称为是一种协议标准，比如下面要说的php-fpm就是支持解析php的一个fastCGI进程管理器/引擎。<br><img src="/uploads/2017/12/fastcgi_01.jpg" alt=""></p><blockquote><p><strong>FastCGI特点</strong></p><ol><li>FastCGI具有语言无关性.</li><li>FastCGI在进程中的应用程序，独立于核心web服务器运行，提供了一个比API更安全的环境。APIs把应用程序的代码与核心的web服务器链接在一起，这意味着在一个错误的API的应用程序可能会损坏其他应用程序或核心服务器。 恶意的API的应用程序代码甚至可以窃取另一个应用程序或核心服务器的密钥。</li><li>FastCGI技术目前支持语言有：C/C++、Java、Perl、Tcl、Python、SmallTalk、Ruby等。相关模块在Apache, ISS, Lighttpd等流行的服务器上也是可用的。</li><li>FastCGI的不依赖于任何Web服务器的内部架构，因此即使服务器技术的变化, FastCGI依然稳定不变。</li></ol><p><strong>FastCGI的工作原理</strong></p><ol><li>Web Server启动时载入FastCGI进程管理器（IIS ISAPI或Apache Module)</li><li>FastCGI进程管理器自身初始化，启动多个CGI解释器进程(可见多个php-cgi)并等待来自Web Server的连接。</li><li>当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi。</li><li>FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器(运行在Web Server中)的下一个连接。 在CGI模式中，php-cgi在此便退出了。</li></ol></blockquote><p>　在上述情况中，你可以想象CGI通常有多慢。每一个Web请求PHP都必须重新解析php.ini、重新载入全部扩展并重初始化全部数据结构。使用FastCGI，所有这些都只在进程启动时发生一次。一个额外的好处是，持续数据库连接(Persistent database connection)可以工作。</p><blockquote><p><strong>FastCGI的不足</strong><br>　因为是多进程，所以比CGI多线程消耗更多的服务器内存，PHP-CGI解释器每进程消耗7至25兆内存，将这个数字乘以50或100就是很大的内存数。<br>　Nginx 0.8.46+PHP 5.2.14(FastCGI)服务器在3万并发连接下，开启的10个Nginx进程消耗150M内存（15M<em>10=150M），开启的64个php-cgi进程消耗1280M内存（20M</em>64=1280M），加上系统自身消耗的内存，总共消耗不到2GB内存。如果服务器内存较小，完全可以只开启25个php-cgi进程，这样php-cgi消耗的总内存数才500M。<br>上面的数据摘自Nginx 0.8.x + PHP 5.2.13(FastCGI)搭建胜过Apache十倍的Web服务器(第6版)</p></blockquote><h2 id="php-cgi"><a href="#php-cgi" class="headerlink" title="php-cgi"></a>php-cgi</h2><p>　php-cgi是php提供给web serve也就是http前端服务器的cgi协议接口程序，当每次接到http前端服务器的请求都会开启一个php-cgi进程进行处理，而且开启的php-cgi的过程中会先要重载配置，数据结构以及初始化运行环境，如果更新了php配置，那么就需要重启php-cgi才能生效，例如phpstudy就是这种情况。</p><h2 id="PHP-CGI"><a href="#PHP-CGI" class="headerlink" title="PHP-CGI"></a>PHP-CGI</h2><p>PHP-CGI是PHP自带的FastCGI管理器。</p><blockquote><p><strong>PHP-CGI的不足：</strong></p><ol><li>php-cgi变更php.ini配置后需重启php-cgi才能让新的php-ini生效，不可以平滑重启。</li><li>直接杀死php-cgi进程，php就不能运行了。(PHP-FPM和Spawn-FCGI就没有这个问题，守护进程会平滑从新生成新的子进程。）</li></ol></blockquote><h2 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h2><p>PHP-FPM是一个PHP FastCGI管理器（FastCGI Process Manager），是只用于PHP的，可以在<a href="http://php-fpm.org/download下载得到。" target="_blank" rel="noopener">http://php-fpm.org/download下载得到。</a><br>PHP-FPM其实是PHP源代码的一个补丁，旨在将FastCGI进程管理整合进PHP包中。必须将它patch到你的PHP源代码中，在编译安装PHP后才可以使用。<br>PHP5.3.3已经集成php-fpm了，不再是第三方的包了。PHP-FPM提供了更好的PHP进程管理方式，可以有效控制内存和进程、可以平滑重载PHP配置，比spawn-fcgi具有更多有点，所以被PHP官方收录了。在./configure的时候带 –enable-fpm参数即可开启PHP-FPM。</p><h2 id="Spawn-FCGI"><a href="#Spawn-FCGI" class="headerlink" title="Spawn-FCGI"></a>Spawn-FCGI</h2><p>Spawn-FCGI是一个通用的FastCGI管理服务器，它是lighttpd中的一部份，很多人都用Lighttpd的Spawn-FCGI进行FastCGI模式下的管理工作。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>　　fastCGI是nginx和php之间的一个通信接口，该接口实际处理过程通过启动php-fpm进程来解析php脚本，即php-fpm相当于一个动态应用服务器，从而实现nginx动态解析php。因此，如果nginx服务器需要支持php解析，需要在nginx.conf中增加php的配置：将php脚本转发到fastCGI进程监听的IP地址和端口（php-fpm.conf中指定）。同时，php安装的时候，需要开启支持fastCGI选项，并且编译安装php-fpm补丁/扩展，同时，需要启动php-fpm进程，才可以解析nginx通过fastCGI转发过来的php脚本。</p><blockquote><p>php-fpm是一个完全独立的程序,不依赖php-cgi,也不依赖php.因为php-fpm是一个内置了php解释器的FastCGI服务,启动时能够自行读取php.ini配置和php-fpm.conf配置.</p><p>附:PHP FastCGI进程管理器PHP-FPM的架构<br>一个master进程,支持多个pool,每个pool由master进程监听不同的端口,pool中有多个worker进程.<br>每个worker进程都内置PHP解释器,并且进程常驻后台,支持prefork动态增加.<br>每个worker进程支持在运行时编译脚本并在内存中缓存生成的opcode来提升性能.<br>每个worker进程支持配置响应指定请求数后自动重启,master进程会重启挂掉的worker进程.<br>每个worker进程能保持一个到MySQL/Memcached/Redis的持久连接,实现”连接池”,避免重复建立连接,对程序透明.<br>master进程采用epoll模型异步接收和分发请求,listen监听端口,epoll_wait等待连接,<br>然后分发给对应pool里的worker进程,worker进程accpet请求后poll处理连接,<br>如果worker进程不够用,master进程会prefork更多进程,<br>如果prefork达到了pm.max_children上限,worker进程又全都繁忙,<br>这时master进程会把请求挂起到连接队列backlog里(默认值是511).</p></blockquote><p>　web server（比如说nginx）只是内容的分发者。比如，如果请求/index.html，那么web server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。好了，如果现在请求的是/index.php，根据配置文件，nginx知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。Nginx会传哪些数据给PHP解析器呢？url要有吧，查询字符串也得有吧，POST数据也要有，HTTP header不能少吧，好的，CGI就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。仔细想想，你在PHP代码中使用的用户从哪里来的。</p><p>　当web server收到/index.php这个请求后，会启动对应的CGI程序，这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。</p><p>　好了，CGI是个协议，跟进程什么的没关系。那fastcgi又是什么呢？Fastcgi是用来提高CGI程序性能的。</p><p>　提高性能，那么CGI程序的性能问题在哪呢？”PHP解析器会解析php.ini文件，初始化执行环境”，就是这里了。标准的CGI对每个请求都会执行这些步骤（不闲累啊！启动进程很累的说！），所以处理每个时间的时间会比较长。这明显不合理嘛！那么Fastcgi是怎么做的呢？首先，Fastcgi会先启一个master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master会传递给一个worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当worker不够用时，master可以根据配置预先启动几个worker等着；当然空闲worker太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是fastcgi的对进程的管理。</p><p>　那PHP-FPM又是什么呢？是一个实现了Fastcgi的程序，被PHP官方收了。</p><p>　大家都知道，PHP的解释器是php-cgi。php-cgi只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理（皇上，臣妾真的做不到啊！）所以就出现了一些能够调度php-cgi进程的程序，比如说由lighthttpd分离出来的spawn-fcgi。好了PHP-FPM也是这么个东东，在长时间的发展后，逐渐得到了大家的认可（要知道，前几年大家可是抱怨PHP-FPM稳定性太差的），也越来越流行。</p><p>　fastcgi是一个协议，php-fpm实现了这个协议</p><p>　php-fpm的 管理对象 是php-cgi。但不能说php-fpm是fastcgi进程的管理器，因为前面说了fastcgi是个协议，</p><p>　以前php-fpm没有包含在PHP内核里面，要使用这个功能，需要找到与源码版本相同的php-fpm对内核打补丁，然后再编译。</p><p>　后来PHP内核集成了PHP-FPM之后就方便多了，使用–enalbe-fpm这个编译参数即可。</p><p>　有的说，修改了php.ini配置文件后，没办法 平滑重启，所以就诞生了php-fpm</p><p>　是的，修改php.ini之后，php-cgi进程的确是没办法平滑重启的。php-fpm对此的处理机制是新的worker用新的配置，已经存在的worker处理完手上的活就可以歇着了，通过这种机制来平滑过度。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CGI&quot;&gt;&lt;a href=&quot;#CGI&quot; class=&quot;headerlink&quot; title=&quot;CGI&quot;&gt;&lt;/a&gt;CGI&lt;/h2&gt;&lt;p&gt;　CGI全称是“公共网关接口”(Common Gateway Interface)，HTTP服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。&lt;br&gt;　CGI可以用任何一种语言编写，只要这种语言具有标准输入、输出和环境变量。如php,perl,tcl等&lt;br&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="PHP原理" scheme="http://yoursite.com/tags/PHP%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PHP底层的运行机制与原理【摘】</title>
    <link href="http://yoursite.com/2017/12/11/PHP%E5%BA%95%E5%B1%82%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E4%B8%8E%E5%8E%9F%E7%90%86%E3%80%90%E6%91%98%E3%80%91/"/>
    <id>http://yoursite.com/2017/12/11/PHP底层的运行机制与原理【摘】/</id>
    <published>2017-12-11T08:27:41.000Z</published>
    <updated>2017-12-13T09:30:28.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP简单运行过程："><a href="#PHP简单运行过程：" class="headerlink" title="PHP简单运行过程："></a>PHP简单运行过程：</h2><p>　我们从未手动开启过PHP的相关进程，它是随着Apache的启动而运行的；<br>　PHP通过mod_php5.so模块和Apache相连（具体说来是SAPI，即服务器应用程序编程接口）；<br>　PHP总共有三个模块：内核、Zend引擎、以及扩展层；<br>　PHP内核用来处理请求、文件流、错误处理等相关操作；<br>　Zend引擎（ZE）用以将源文件转换成机器语言，然后在虚拟机上运行它；<br>　扩展层是一组函数、类库和流，PHP使用它们来执行一些特定的操作。比如，我们需要mysql扩展来连接MySQL数据库；<br>　当ZE执行程序时可能会需要连接若干扩展，这时ZE将控制权交给扩展，等处理完特定任务后再返还；<br>　最后，ZE将程序运行结果返回给PHP内核，它再将结果传送给SAPI层，最终输出到浏览器上。<br><a id="more"></a></p><h2 id="PHP的执行流程-amp-opcode"><a href="#PHP的执行流程-amp-opcode" class="headerlink" title="PHP的执行流程&amp;opcode"></a>PHP的执行流程&amp;opcode</h2><p>　我们先来看看PHP代码的执行所经过的流程。<br><img src="/uploads/2017/12/php_opcode.jpg" alt=""><br>　从图上可以看到，PHP实现了一个典型的动态语言执行过程：拿到一段代码后，经过词法解析、语法解析等阶段后，源程序会被翻译成一个个指令(opcodes)，然后ZEND虚拟机顺次执行这些指令完成操作。PHP本身是用C实现的，因此最终调用的也都是C的函数，实际上，我们可以把PHP看做是一个C开发的软件。<br>　PHP的执行的核心是翻译出来的一条一条指令，也即opcode。<br>　Opcode是PHP程序执行的最基本单位。一个opcode由两个参数(op1,op2)、返回值和处理函数组成。PHP程序最终被翻译为一组opcode处理函数的顺序执行。</p><h2 id="PHP的四层体系"><a href="#PHP的四层体系" class="headerlink" title="PHP的四层体系"></a>PHP的四层体系</h2><p>PHP的核心架构如下图：<br><img src="/uploads/2017/12/php_core_framework.jpg" alt=""></p><p>从图上可以看出，PHP从下到上是一个4层体系：</p><ul><li>Zend引擎：Zend整体用纯C实现，是PHP的内核部分，它将PHP代码翻译（词法、语法解析等一系列编译过程）为可执行opcode的处理并实现相应的处理方法、实现了基本的数据结构（如hashtable、oo）、内存分配及管理、提供了相应的api方法供外部调用，是一切的核心，所有的外围功能均围绕Zend实现。</li><li>Extensions：围绕着Zend引擎，extensions通过组件式的方式提供各种基础服务，我们常见的各种内置函数（如array系列）、标准库等都是通过extension来实现，用户也可以根据需要实现自己的extension以达到功能扩展、性能优化等目的（如贴吧正在使用的PHP中间层、富文本解析就是extension的典型应用）。</li><li>Sapi：Sapi全称是Server Application Programming Interface，也就是服务端应用编程接口，Sapi通过一系列钩子函数，使得PHP可以和外围交互数据，这是PHP非常优雅和成功的一个设计，通过sapi成功的将PHP本身和上层应用解耦隔离，PHP可以不再考虑如何针对不同应用进行兼容，而应用本身也可以针对自己的特点实现不同的处理方式。</li><li>上层应用：这就是我们平时编写的PHP程序，通过不同的sapi方式得到各种各样的应用模式，如通过webserver实现web应用、在命令行下以脚本方式运行等等。</li></ul><p><strong>构架思想：</strong><br>引擎(Zend)+组件(ext)的模式降低内部耦合<br>中间层(sapi)隔绝web server和PHP</p><hr><p>如果php是一辆车，那么</p><p>车的框架就是php本身</p><p>Zend是车的引擎（发动机）</p><p>Ext下面的各种组件就是车的轮子</p><p>Sapi可以看做是公路，车可以跑在不同类型的公路上</p><p>而一次php程序的执行就是汽车跑在公路上。</p><p>因此，我们需要：性能优异的引擎+合适的车轮+正确的跑道</p><h2 id="Sapi"><a href="#Sapi" class="headerlink" title="Sapi"></a>Sapi</h2><p>　如前所述，Sapi通过通过一系列的接口，使得外部应用可以和PHP交换数据并可以根据不同应用特点实现特定的处理方法，我们常见的一些sapi有：</p><ul><li>apache2handler：这是以apache作为webserver，采用mod_PHP模式运行时候的处理方式，也是现在应用最广泛的一种。</li><li>cgi：这是webserver和PHP直接的另一种交互方式，也就是大名鼎鼎的fastcgi协议，在最近今年fastcgi+PHP得到越来越多的应用，也是异步webserver所唯一支持的方式。</li><li>cli：命令行调用的应用模式</li></ul><h2 id="LAMP架构"><a href="#LAMP架构" class="headerlink" title="LAMP架构"></a>LAMP架构</h2><p><img src="/uploads/2017/12/php_lamp_01.png" alt=""><br>从下往上四层：</p><ol><li>liunx 属于操作系统的底层</li><li>apache服务器，属于次服务器，沟通linux和PHP</li><li>php:属于服务端编程语言，通过php_module 模块 和apache关联</li><li>mysql和其他web服务：属于应用服务，通过PHP的Extensions外 挂模块和mysql关联</li></ol><p><strong>参考文章：</strong><br><a href="https://www.cnblogs.com/hongfei/archive/2012/06/12/2547119.html" target="_blank" rel="noopener">PHP的执行原理/执行流程</a><br><a href="http://www.nowamagic.net/librarys/veda/detail/102" target="_blank" rel="noopener">PHP底层的运行机制与原理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PHP简单运行过程：&quot;&gt;&lt;a href=&quot;#PHP简单运行过程：&quot; class=&quot;headerlink&quot; title=&quot;PHP简单运行过程：&quot;&gt;&lt;/a&gt;PHP简单运行过程：&lt;/h2&gt;&lt;p&gt;　我们从未手动开启过PHP的相关进程，它是随着Apache的启动而运行的；&lt;br&gt;　PHP通过mod_php5.so模块和Apache相连（具体说来是SAPI，即服务器应用程序编程接口）；&lt;br&gt;　PHP总共有三个模块：内核、Zend引擎、以及扩展层；&lt;br&gt;　PHP内核用来处理请求、文件流、错误处理等相关操作；&lt;br&gt;　Zend引擎（ZE）用以将源文件转换成机器语言，然后在虚拟机上运行它；&lt;br&gt;　扩展层是一组函数、类库和流，PHP使用它们来执行一些特定的操作。比如，我们需要mysql扩展来连接MySQL数据库；&lt;br&gt;　当ZE执行程序时可能会需要连接若干扩展，这时ZE将控制权交给扩展，等处理完特定任务后再返还；&lt;br&gt;　最后，ZE将程序运行结果返回给PHP内核，它再将结果传送给SAPI层，最终输出到浏览器上。&lt;br&gt;
    
    </summary>
    
      <category term="PHP原理" scheme="http://yoursite.com/categories/PHP%E5%8E%9F%E7%90%86/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="PHP原理" scheme="http://yoursite.com/tags/PHP%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库导入导出命令</title>
    <link href="http://yoursite.com/2017/12/11/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/12/11/MySQL数据库导入导出命令/</id>
    <published>2017-12-11T07:26:44.000Z</published>
    <updated>2017-12-11T07:37:51.450Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导出（mysqldump）"><a href="#导出（mysqldump）" class="headerlink" title="导出（mysqldump）"></a>导出（mysqldump）</h2><p>1、只导出结构，不导出数据</p><p>#mysqldump 数据库名 -u root -p  -d &gt; xxx.sql </p><p>2、只导出数据，不导出结构</p><p>#mysqldump 数据库名 -uroot -p  -t　&gt;　xxx.sql　<br><a id="more"></a><br>3、既导出数据，也导出结构</p><p>#mysqldump　数据库名　-uroot　-p　&gt;　xxx.sql　</p><p>4、导出指定表</p><p>#mysqldump　-uroot　-p　数据库名　–table　表名　&gt;　xxx.sql　</p><p>5、导出数据库，忽略其中的某些表</p><p>#mysqldump -uroot -p  数据库名 –ignore-table 数据库名.表名1  –ignore-table 数据库名.表名2….  &gt; xxx.sql</p><h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><p>由于mysqldump导出的是完整的SQL语句，所以用mysql客户程序很容易就能把数据导入了：</p><p>#mysql -hlocalhost -P3306 -uroot -p　数据库名　&lt;　文件名 </p><p>#source　/tmp/xxx.sql　</p><h2 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h2><p>#mysqldump　数据库名　&gt;数据库备份名 </p><p>#mysqldump　-A　-u用户名　-p密码　数据库名&gt;数据库备份名 </p><p>#mysqldump　-d　-A　–add-drop-table　-uroot　-p　&gt;xxx.sql </p><h2 id="Mysqldump参数大全（参数来源于mysql5-5-19源码）"><a href="#Mysqldump参数大全（参数来源于mysql5-5-19源码）" class="headerlink" title="Mysqldump参数大全（参数来源于mysql5.5.19源码）"></a>Mysqldump参数大全（参数来源于mysql5.5.19源码）</h2><p>参数<br>参数说明</p><p><strong>–all-databases  , -A</strong></p><p>导出全部数据库。</p><p>mysqldump  -uroot -p –all-databases</p><p><strong>–all-tablespaces  , -Y</strong></p><p>导出全部表空间。</p><p>mysqldump  -uroot -p –all-databases –all-tablespaces</p><p><strong>–no-tablespaces  , -y</strong></p><p>不导出任何表空间信息。</p><p>mysqldump  -uroot -p –all-databases –no-tablespaces</p><p><strong>–add-drop-database</strong></p><p>每个数据库创建之前添加drop数据库语句。</p><p>mysqldump  -uroot -p –all-databases –add-drop-database</p><p><strong>–add-drop-table</strong></p><p>每个数据表创建之前添加drop数据表语句。(默认为打开状态，使用–skip-add-drop-table取消选项)</p><p>mysqldump  -uroot -p –all-databases  (默认添加drop语句)</p><p>mysqldump  -uroot -p –all-databases –skip-add-drop-table  (取消drop语句)</p><p><strong>–add-locks</strong></p><p>在每个表导出之前增加LOCK TABLES并且之后UNLOCK  TABLE。(默认为打开状态，使用–skip-add-locks取消选项)</p><p>mysqldump  -uroot -p –all-databases  (默认添加LOCK语句)</p><p>mysqldump  -uroot -p –all-databases –skip-add-locks   (取消LOCK语句)</p><p><strong>–allow-keywords</strong></p><p>允许创建是关键词的列名字。这由表名前缀于每个列名做到。</p><p>mysqldump  -uroot -p –all-databases –allow-keywords</p><p><strong>–apply-slave-statements</strong></p><p>在’CHANGE MASTER’前添加’STOP SLAVE’，并且在导出的最后添加’START SLAVE’。</p><p>mysqldump  -uroot -p –all-databases –apply-slave-statements</p><p><strong>–character-sets-dir</strong></p><p>字符集文件的目录</p><p>mysqldump  -uroot -p –all-databases  –character-sets-dir=/usr/local/mysql/share/mysql/charsets</p><p><strong>–comments</strong></p><p>附加注释信息。默认为打开，可以用–skip-comments取消</p><p>mysqldump  -uroot -p –all-databases  (默认记录注释)</p><p>mysqldump  -uroot -p –all-databases –skip-comments   (取消注释)</p><p><strong>–compatible</strong></p><p>导出的数据将和其它数据库或旧版本的MySQL 相兼容。值可以为ansi、mysql323、mysql40、postgresql、oracle、mssql、db2、maxdb、no_key_options、no_tables_options、no_field_options等，</p><p>要使用几个值，用逗号将它们隔开。它并不保证能完全兼容，而是尽量兼容。</p><p>mysqldump  -uroot -p –all-databases –compatible=ansi</p><p><strong>–compact</strong></p><p>导出更少的输出信息(用于调试)。去掉注释和头尾等结构。可以使用选项：–skip-add-drop-table  –skip-add-locks –skip-comments –skip-disable-keys</p><p>mysqldump  -uroot -p –all-databases –compact</p><p><strong>–complete-insert,  -c</strong></p><p>使用完整的insert语句(包含列名称)。这么做能提高插入效率，但是可能会受到max_allowed_packet参数的影响而导致插入失败。</p><p>mysqldump  -uroot -p –all-databases –complete-insert</p><p><strong>–compress, -C</strong></p><p>在客户端和服务器之间启用压缩传递所有信息</p><p>mysqldump  -uroot -p –all-databases –compress</p><p><strong>–create-options,  -a</strong></p><p>在CREATE TABLE语句中包括所有MySQL特性选项。(默认为打开状态)</p><p>mysqldump  -uroot -p –all-databases</p><p><strong>–databases,  -B</strong></p><p>导出几个数据库。参数后面所有名字参量都被看作数据库名。</p><p>mysqldump  -uroot -p –databases test mysql</p><p><strong>–debug</strong></p><p>输出debug信息，用于调试。默认值为：d:t:o,/tmp/mysqldump.trace</p><p>mysqldump  -uroot -p –all-databases –debug</p><p>mysqldump  -uroot -p –all-databases –debug=” d:t:o,/tmp/debug.trace”</p><p><strong>–debug-check</strong></p><p>检查内存和打开文件使用说明并退出。</p><p>mysqldump  -uroot -p –all-databases –debug-check</p><p><strong>–debug-info</strong></p><p>输出调试信息并退出</p><p>mysqldump  -uroot -p –all-databases –debug-info</p><p><strong>–default-character-set</strong></p><p>设置默认字符集，默认值为utf8</p><p>mysqldump  -uroot -p –all-databases –default-character-set=latin1</p><p><strong>–delayed-insert</strong></p><p>采用延时插入方式（INSERT DELAYED）导出数据</p><p>mysqldump  -uroot -p –all-databases –delayed-insert</p><p><strong>–delete-master-logs</strong></p><p>master备份后删除日志. 这个参数将自动激活–master-data。</p><p>mysqldump  -uroot -p –all-databases –delete-master-logs</p><p><strong>–disable-keys</strong></p><p>对于每个表，用/<em>!40000 ALTER TABLE tbl_name DISABLE KEYS </em>/;和/<em>!40000 ALTER TABLE tbl_name ENABLE KEYS </em>/;语句引用INSERT语句。这样可以更快地导入dump出来的文件，因为它是在插入所有行后创建索引的。该选项只适合MyISAM表，默认为打开状态。</p><p>mysqldump  -uroot -p –all-databases </p><p><strong>–dump-slave</strong></p><p>该选项将导致主的binlog位置和文件名追加到导出数据的文件中。设置为1时，将会以CHANGE MASTER命令输出到数据文件；设置为2时，在命令前增加说明信息。该选项将会打开–lock-all-tables，除非–single-transaction被指定。该选项会自动关闭–lock-tables选项。默认值为0。</p><p>mysqldump  -uroot -p –all-databases –dump-slave=1</p><p>mysqldump  -uroot -p –all-databases –dump-slave=2</p><p><strong>–events, -E</strong></p><p>导出事件。</p><p>mysqldump  -uroot -p –all-databases –events</p><p><strong>–extended-insert,  -e</strong></p><p>使用具有多个VALUES列的INSERT语法。这样使导出文件更小，并加速导入时的速度。默认为打开状态，使用–skip-extended-insert取消选项。</p><p>mysqldump  -uroot -p –all-databases</p><p>mysqldump  -uroot -p –all-databases–skip-extended-insert   (取消选项)</p><p><strong>–fields-terminated-by</strong></p><p>导出文件中忽略给定字段。与–tab选项一起使用，不能用于–databases和–all-databases选项</p><p>mysqldump  -uroot -p test test –tab=”/home/mysql” –fields-terminated-by=”#”</p><p><strong>–fields-enclosed-by</strong></p><p>输出文件中的各个字段用给定字符包裹。与–tab选项一起使用，不能用于–databases和–all-databases选项</p><p>mysqldump  -uroot -p test test –tab=”/home/mysql” –fields-enclosed-by=”#”</p><p><strong>–fields-optionally-enclosed-by</strong></p><p>输出文件中的各个字段用给定字符选择性包裹。与–tab选项一起使用，不能用于–databases和–all-databases选项</p><p>mysqldump  -uroot -p test test –tab=”/home/mysql”  –fields-enclosed-by=”#” –fields-optionally-enclosed-by  =”#”</p><p><strong>–fields-escaped-by</strong></p><p>输出文件中的各个字段忽略给定字符。与–tab选项一起使用，不能用于–databases和–all-databases选项</p><p>mysqldump  -uroot -p mysql user –tab=”/home/mysql” –fields-escaped-by=”#”</p><p><strong>–flush-logs</strong></p><p>开始导出之前刷新日志。</p><p>请注意：假如一次导出多个数据库(使用选项–databases或者–all-databases)，将会逐个数据库刷新日志。除使用–lock-all-tables或者–master-data外。在这种情况下，日志将会被刷新一次，相应的所以表同时被锁定。因此，如果打算同时导出和刷新日志应该使用–lock-all-tables 或者–master-data 和–flush-logs。</p><p>mysqldump  -uroot -p –all-databases –flush-logs</p><p><strong>–flush-privileges</strong></p><p>在导出mysql数据库之后，发出一条FLUSH  PRIVILEGES 语句。为了正确恢复，该选项应该用于导出mysql数据库和依赖mysql数据库数据的任何时候。</p><p>mysqldump  -uroot -p –all-databases –flush-privileges</p><p><strong>–force</strong></p><p>在导出过程中忽略出现的SQL错误。</p><p>mysqldump  -uroot -p –all-databases –force</p><p><strong>–help</strong></p><p>显示帮助信息并退出。</p><p>mysqldump  –help</p><p><strong>–hex-blob</strong></p><p>使用十六进制格式导出二进制字符串字段。如果有二进制数据就必须使用该选项。影响到的字段类型有BINARY、VARBINARY、BLOB。</p><p>mysqldump  -uroot -p –all-databases –hex-blob</p><p><strong>–host, -h</strong></p><p>需要导出的主机信息</p><p>mysqldump  -uroot -p –host=localhost –all-databases</p><p><strong>–ignore-table</strong></p><p>不导出指定表。指定忽略多个表时，需要重复多次，每次一个表。每个表必须同时指定数据库和表名。例如：–ignore-table=database.table1 –ignore-table=database.table2 ……</p><p>mysqldump  -uroot -p –host=localhost –all-databases –ignore-table=mysql.user</p><p><strong>–include-master-host-port</strong></p><p>在–dump-slave产生的’CHANGE  MASTER TO..’语句中增加’MASTER_HOST=<host>，MASTER_PORT=<port>‘  </port></host></p><p>mysqldump  -uroot -p –host=localhost –all-databases –include-master-host-port</p><p><strong>–insert-ignore</strong></p><p>在插入行时使用INSERT IGNORE语句.</p><p>mysqldump  -uroot -p –host=localhost –all-databases –insert-ignore</p><p><strong>–lines-terminated-by</strong></p><p>输出文件的每行用给定字符串划分。与–tab选项一起使用，不能用于–databases和–all-databases选项。</p><p>mysqldump  -uroot -p –host=localhost test test –tab=”/tmp/mysql”  –lines-terminated-by=”##”</p><p><strong>–lock-all-tables,  -x</strong></p><p>提交请求锁定所有数据库中的所有表，以保证数据的一致性。这是一个全局读锁，并且自动关闭–single-transaction 和–lock-tables 选项。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –lock-all-tables</p><p><strong>–lock-tables,  -l</strong></p><p>开始导出前，锁定所有表。用READ  LOCAL锁定表以允许MyISAM表并行插入。对于支持事务的表例如InnoDB和BDB，–single-transaction是一个更好的选择，因为它根本不需要锁定表。</p><p>请注意当导出多个数据库时，–lock-tables分别为每个数据库锁定表。因此，该选项不能保证导出文件中的表在数据库之间的逻辑一致性。不同数据库表的导出状态可以完全不同。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –lock-tables</p><p><strong>–log-error</strong></p><p>附加警告和错误信息到给定文件</p><p>mysqldump  -uroot -p –host=localhost –all-databases  –log-error=/tmp/mysqldump_error_log.err</p><p><strong>–master-data</strong></p><p>该选项将binlog的位置和文件名追加到输出文件中。如果为1，将会输出CHANGE MASTER 命令；如果为2，输出的CHANGE  MASTER命令前添加注释信息。该选项将打开–lock-all-tables 选项，除非–single-transaction也被指定（在这种情况下，全局读锁在开始导出时获得很短的时间；其他内容参考下面的–single-transaction选项）。该选项自动关闭–lock-tables选项。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –master-data=1;</p><p>mysqldump  -uroot -p –host=localhost –all-databases –master-data=2;</p><p><strong>–max_allowed_packet</strong></p><p>服务器发送和接受的最大包长度。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –max_allowed_packet=10240</p><p><strong>–net_buffer_length</strong></p><p>TCP/IP和socket连接的缓存大小。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –net_buffer_length=1024</p><p><strong>–no-autocommit</strong></p><p>使用autocommit/commit 语句包裹表。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –no-autocommit</p><p><strong>–no-create-db,  -n</strong></p><p>只导出数据，而不添加CREATE DATABASE 语句。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –no-create-db</p><p><strong>–no-create-info,  -t</strong></p><p>只导出数据，而不添加CREATE TABLE 语句。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –no-create-info</p><p><strong>–no-data, -d</strong></p><p>不导出任何数据，只导出数据库表结构。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –no-data</p><p><strong>–no-set-names,  -N</strong></p><p>等同于–skip-set-charset</p><p>mysqldump  -uroot -p –host=localhost –all-databases –no-set-names</p><p><strong>–opt</strong></p><p>等同于–add-drop-table,  –add-locks, –create-options, –quick, –extended-insert, –lock-tables,  –set-charset, –disable-keys 该选项默认开启,  可以用–skip-opt禁用.</p><p>mysqldump  -uroot -p –host=localhost –all-databases –opt</p><p><strong>–order-by-primary</strong></p><p>如果存在主键，或者第一个唯一键，对每个表的记录进行排序。在导出MyISAM表到InnoDB表时有效，但会使得导出工作花费很长时间。 </p><p>mysqldump  -uroot -p –host=localhost –all-databases –order-by-primary</p><p><strong>–password, -p</strong></p><p>连接数据库密码</p><p><strong>–pipe(windows系统可用)</strong></p><p>使用命名管道连接mysql</p><p>mysqldump  -uroot -p –host=localhost –all-databases –pipe</p><p><strong>–port, -P</strong></p><p>连接数据库端口号</p><p><strong>–protocol</strong></p><p>使用的连接协议，包括：tcp, socket, pipe, memory.</p><p>mysqldump  -uroot -p –host=localhost –all-databases –protocol=tcp</p><p><strong>–quick, -q</strong></p><p>不缓冲查询，直接导出到标准输出。默认为打开状态，使用–skip-quick取消该选项。</p><p>mysqldump  -uroot -p –host=localhost –all-databases </p><p>mysqldump  -uroot -p –host=localhost –all-databases –skip-quick</p><p><strong>–quote-names,-Q</strong></p><p>使用（`）引起表和列名。默认为打开状态，使用–skip-quote-names取消该选项。</p><p>mysqldump  -uroot -p –host=localhost –all-databases</p><p>mysqldump  -uroot -p –host=localhost –all-databases –skip-quote-names</p><p><strong>–replace</strong></p><p>使用REPLACE INTO 取代INSERT INTO.</p><p>mysqldump  -uroot -p –host=localhost –all-databases –replace</p><p><strong>–result-file,  -r</strong></p><p>直接输出到指定文件中。该选项应该用在使用回车换行对（\r\n）换行的系统上（例如：DOS，Windows）。该选项确保只有一行被使用。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –result-file=/tmp/mysqldump_result_file.txt</p><p><strong>–routines, -R</strong></p><p>导出存储过程以及自定义函数。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –routines</p><p><strong>–set-charset</strong></p><p>添加’SET NAMES  default_character_set’到输出文件。默认为打开状态，使用–skip-set-charset关闭选项。</p><p>mysqldump  -uroot -p –host=localhost –all-databases </p><p>mysqldump  -uroot -p –host=localhost –all-databases –skip-set-charset</p><p><strong>–single-transaction</strong></p><p>该选项在导出数据之前提交一个BEGIN SQL语句，BEGIN 不会阻塞任何应用程序且能保证导出时数据库的一致性状态。它只适用于多版本存储引擎，仅InnoDB。本选项和–lock-tables 选项是互斥的，因为LOCK  TABLES 会使任何挂起的事务隐含提交。要想导出大表的话，应结合使用–quick 选项。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –single-transaction</p><p><strong>–dump-date</strong></p><p>将导出时间添加到输出文件中。默认为打开状态，使用–skip-dump-date关闭选项。</p><p>mysqldump  -uroot -p –host=localhost –all-databases</p><p>mysqldump  -uroot -p –host=localhost –all-databases –skip-dump-date</p><p><strong>–skip-opt</strong></p><p>禁用–opt选项.</p><p>mysqldump  -uroot -p –host=localhost –all-databases –skip-opt</p><p><strong>–socket,-S</strong></p><p>指定连接mysql的socket文件位置，默认路径/tmp/mysql.sock</p><p>mysqldump  -uroot -p –host=localhost –all-databases –socket=/tmp/mysqld.sock</p><p><strong>–tab,-T</strong></p><p>为每个表在给定路径创建tab分割的文本文件。注意：仅仅用于mysqldump和mysqld服务器运行在相同机器上。</p><p>mysqldump  -uroot -p –host=localhost test test –tab=”/home/mysql”</p><p><strong>–tables</strong></p><p>覆盖–databases (-B)参数，指定需要导出的表名。</p><p>mysqldump  -uroot -p –host=localhost –databases test –tables test</p><p><strong>–triggers</strong></p><p>导出触发器。该选项默认启用，用–skip-triggers禁用它。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –triggers</p><p><strong>–tz-utc</strong></p><p>在导出顶部设置时区TIME_ZONE=’+00:00’ ，以保证在不同时区导出的TIMESTAMP 数据或者数据被移动其他时区时的正确性。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –tz-utc</p><p><strong>–user, -u</strong></p><p>指定连接的用户名。</p><p><strong>–verbose, –v</strong></p><p>输出多种平台信息。</p><p><strong>–version, -V</strong></p><p>输出mysqldump版本信息并退出</p><p><strong>–where, -w</strong></p><p>只转储给定的WHERE条件选择的记录。请注意如果条件包含命令解释符专用空格或字符，一定要将条件引用起来。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –where=” user=’root’”</p><p><strong>–xml, -X</strong></p><p>导出XML格式.</p><p>mysqldump  -uroot -p –host=localhost –all-databases –xml</p><p><strong>–plugin_dir</strong></p><p>客户端插件的目录，用于兼容不同的插件版本。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –plugin_dir=”/usr/local/lib/plugin”</p><p><strong>–default_auth</strong></p><p>客户端插件默认使用权限。</p><p>mysqldump  -uroot -p –host=localhost –all-databases –default-auth=”/usr/local/lib/plugin/<plugin>”</plugin></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;导出（mysqldump）&quot;&gt;&lt;a href=&quot;#导出（mysqldump）&quot; class=&quot;headerlink&quot; title=&quot;导出（mysqldump）&quot;&gt;&lt;/a&gt;导出（mysqldump）&lt;/h2&gt;&lt;p&gt;1、只导出结构，不导出数据&lt;/p&gt;
&lt;p&gt;#mysqldump 数据库名 -u root -p  -d &amp;gt; xxx.sql &lt;/p&gt;
&lt;p&gt;2、只导出数据，不导出结构&lt;/p&gt;
&lt;p&gt;#mysqldump 数据库名 -uroot -p  -t　&amp;gt;　xxx.sql　&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Shell基础知识手册</title>
    <link href="http://yoursite.com/2017/12/11/Shell%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2017/12/11/Shell基础知识手册/</id>
    <published>2017-12-11T02:31:18.000Z</published>
    <updated>2017-12-11T03:35:11.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>1、变量命名</strong></p><pre><code>1. 只能使用数字、字母和下划线，且不能以数字开头2. 变量名区分大小写3. 建议命令要通俗易懂</code></pre><font color="red"><strong>注意：</strong></font><ul><li>变量不需要声明，初始化不需要指定类型</li><li><p>变量赋值是通过等号（=）进行赋值，在变量、等号和值之间不能出现空格</p><a id="more"></a><p><strong>2、变量分类</strong></p><ol><li><p>本地变量</p><ul><li>只对当前shell进程有效的，对当前进程的子进程和其它shell进程无效。</li><li>定义：VAR_NAME=VALUE</li><li>变量引用：${VAR_NAME} 或者 $VAR_NAME</li><li>取消变量：unset VAR_NAME</li><li>相当于java中的私有变量(private)，只能当前类使用，子类和其他类都无法使用。</li></ul></li><li><p>环境变量</p><ul><li>自定义的环境变量对当前shell进程及其子shell进程有效，对其它的shell进程无效</li><li>定义：export VAR_NAME=VALUE</li><li>对所有shell进程都有效需要配置到配置文件中：/etc/profile</li><li>相当于java中的protected修饰符,对当前类，子孙类，以及同一个包下面可以共用。<br><em>（和windows中的环境变量比较类似）</em></li></ul></li><li><p>局部变量</p><ul><li>在函数中调用，函数执行结束，变量就会消失</li><li>对shell脚本中某代码片段有效</li><li>定义：local VAR_NAME=VALUE</li><li>相当于java代码中某一个方法中定义的局部变量，只对这个方法有效。</li></ul></li><li><p>位置变量<br> 比如脚本中的参数：</p><pre><code>$0：脚本自身$1：脚本的第一个参数$2：脚本的第二个参数</code></pre><p> 相当于java中main函数中的args参数，可以获取外部参数。</p></li><li><p>特殊变量<br> $?：接收上一条命令的返回状态码<br> <em>（返回状态码在0-255之间）</em><br> $#：参数个数<br> $*：或者$@：所有的参数<br> $$：获取当前shell的进程号（PID）(可以实现脚本自杀)(或者使用exit命令直接退出也可以使用exit [num])</p></li></ol></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><strong>1、算术运算符</strong></p><pre><code>格式：let varName=算术表达式varName=$[算术表达式]varName=$((算术表达式))varName=\`expr $num1 + $num2\`</code></pre><font color="red">（使用这种格式要注意两个数字和+号中间要有空格。）</font><p><strong>2、逻辑运算符</strong><br>　if [ 条件A &amp;&amp; 条件B ] 在shell中怎么写?<br>　if [ 条件A &amp;&amp; 条件B ];then    是不对的<br>（1）需要用到shell中的逻辑操作符<br>　-a 与<br>　-o 或<br>　！ 非<br>　如if [ 条件A -a 条件B ]<br>（2）if [ 条件A ] &amp;&amp; [条件B ]<br>（3）if((A&amp;&amp;B))<br>（4）if [[ A&amp;&amp;B ]]</p><h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><p><img src="/uploads/2017/12/shell_string_01.png" alt=""></p><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><p><strong>定义：</strong></p><pre><code>declare -a：表示定义普通数组</code></pre><p><strong>特点：</strong></p><pre><code>1. 支持稀疏格式2. 仅支持一维数组</code></pre><p><strong>数组赋值方式：</strong></p><pre><code>1. 一次对一个元素赋值a[0]=$RANDOM2. 一次对多个元素赋值a=(a b c d)3. 按索引进行赋值a=([0]=a [3]=b [1]=c)</code></pre><p><strong>数组操作</strong></p><pre><code>1. 使用read命令read -a ARRAY_NAME查看元素　${ARRAY[index]}：查看数组指定角标的元素  　${ARRAY}：查看数组的第一个元素  　${ARRAY[*]}或者${ARRAY[@]}：查看数组的所有元素  2. 获取数组的长度：　${#ARRAY[*]}  　${#ARRAY[@]} 3. 获取数组内元素的长度：　${#ARRAY[0]}4. 从数组中获取某一片段之内的元素（操作类似于字符串操作）　格式：    ${ARRAY[@]:offset:length}  　注释：　　offset：偏移的元素个数　　length：取出的元素的个数　　${ARRAY[@]:offset:length}：取出偏移量后的指定个数的元素　　${ARRAY[@]:offset}：取出数组中偏移量后的所有元素5. 数组删除元素：　unset ARRAY[index] </code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p><strong>if判断</strong></p><pre><code>单分支： if 测试条件;then     选择分支 fi双分支： if 测试条件  then   选择分支1   else   选择分支2 fi 多分支： if 条件1; then           分支1 elif 条件2; then           分支2 elif 条件3; then           分支3          ... else           分支n fi</code></pre><p><strong>Case判断</strong><br><em>（有多个测试条件时，case语句会使得语法结构更清晰）</em></p><pre><code>格式：case 变量引用 in    PATTERN1)        分支1        ;;    PATTERN2)        分支2        ;;    ...    *)        分支n        ;;esac注释：PATTERN :类同于文件名通配机制，但支持使用|表示或者a|b：a或者b*：匹配任意长度的任意字符?：匹配任意单个字符[a-z]：指定范围内的任意单个字符</code></pre><h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><p><strong>for循环</strong><br>　通过使用一个变量去遍历给定列表中的每个元素，在每次变量赋值时执行一次循环体，直至赋值完成所有元素退出循环<br><em>（注意：for i in {0..9} 等于for i in {0..9..1} , 第三个参数为跨步。）</em></p><pre><code>格式1：for ((i=0;i&lt;10;i++))do  ...Done格式2：for i in 0 1 2 3 4 5 6 7 8 9do...Done格式3：for i in {0..9}do  ...done</code></pre><p><strong>while循环</strong><br>　适用于循环次数未知，或不便用for直接生成较大的列表时</p><pre><code>格式：while 测试条件do循环体done</code></pre><p><strong>循环控制命令</strong></p><pre><code>循环控制命令——breakbreak命令是在处理过程中跳出循环的一种简单方法，可以使用break命令退出任何类型的循环，包括while循环和for循环循环控制命令——continuecontinue命令是一种提前停止循环内命令，而不完全终止循环的方法，这就需要在循环内设置shell不执行命令的条件</code></pre><p><strong>条件</strong><br>　bash条件测试</p><pre><code>格式：    test EXPR    [ EXPR ]：注意中括号和表达式之间的空格整型测试：    -gt：大于：    -lt：小于    -ge：大于等于    -le：小于等于    -eq：等于    -ne：不等于例如[ $num1 -gt $num2 ]或者test $num1 -gt $num2字符串测试：    =：等于，例如判断变量是否为空 [ &quot;$str&quot; =  &quot;&quot; ] 或者[ -z $str ]    !=：不等于</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre><code>格式：function 函数名(){...}1. 引用自定义函数文件时，使用source  func.sh2. 有利于代码的重用性3. 函数传递参数（可以使用类似于Java中的args，args[1]代表Shell中的$1）4. 函数的返回值，只能是数字5. 函数的调用： 函数名</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1、变量命名&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 只能使用数字、字母和下划线，且不能以数字开头
2. 变量名区分大小写
3. 建议命令要通俗易懂
&lt;/code&gt;&lt;/pre&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/font&gt;

&lt;ul&gt;
&lt;li&gt;变量不需要声明，初始化不需要指定类型&lt;/li&gt;
&lt;li&gt;&lt;p&gt;变量赋值是通过等号（=）进行赋值，在变量、等号和值之间不能出现空格&lt;/p&gt;
    
    </summary>
    
      <category term="Shell" scheme="http://yoursite.com/categories/Shell/"/>
    
    
      <category term="Shell" scheme="http://yoursite.com/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Git Error: Failed to connect to github.com port 443: Timed out</title>
    <link href="http://yoursite.com/2017/12/08/Git-Error-Failed-to-connect-to-github-com-port-443-Timed-out/"/>
    <id>http://yoursite.com/2017/12/08/Git-Error-Failed-to-connect-to-github-com-port-443-Timed-out/</id>
    <published>2017-12-08T06:39:58.000Z</published>
    <updated>2017-12-08T06:46:51.686Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误信息："><a href="#错误信息：" class="headerlink" title="错误信息："></a>错误信息：</h3><blockquote><p>fatal: unable to access ‘<a href="https://github.com/bluce-ben/bluce-ben.github.io.git/" target="_blank" rel="noopener">https://github.com/bluce-ben/bluce-ben.github.io.git/</a>‘: Failed to connect to github.com port 443: Timed out<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">http://hexo.io/docs/troubleshooting.html</a><br>Error: fatal: unable to access ‘<a href="https://github.com/bluce-ben/bluce-ben.github.io.git/" target="_blank" rel="noopener">https://github.com/bluce-ben/bluce-ben.github.io.git/</a>‘: Failed to connect to github.com port 443: Timed out<br><a id="more"></a><br>　依据错误可清晰知道是因为无法连接Git导致的超时错误。而我配置的Hexo+GitHub Pages中使用的Git仓库就是 HTTPS 协议的，所以是使用443端口，也由此我 hexo deploy 部署Git失败。</p></blockquote><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p><em>在百度搜索到一个解决方案，现整理如下。</em><br><strong>1、测试git是否成功连接GitHub，使用：</strong><br>　<code>ssh -T git@github.com</code></p><blockquote><p>连接失败：ssh: connect to host github.com port 22: Connection timed out<br>连接成功：Hi bluce-ben! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p><strong>2、修改Git配置文件，首先找到git的安装目录，找到/etc/ssh/ssh_config文件</strong><br>　打开该文件并将下列配置添加末尾：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User git</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure></p><p>　保存修改。<br><em>（注：如果保存失败提示没有权限，可用 Notepad++打开会提示使用管理员权限，点击确定即可。）</em></p><p><strong>3、再次测试是否成功连接GitHub。成功后再次 hexo deploy 部署GitHub即可。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;错误信息：&quot;&gt;&lt;a href=&quot;#错误信息：&quot; class=&quot;headerlink&quot; title=&quot;错误信息：&quot;&gt;&lt;/a&gt;错误信息：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;fatal: unable to access ‘&lt;a href=&quot;https://github.com/bluce-ben/bluce-ben.github.io.git/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/bluce-ben/bluce-ben.github.io.git/&lt;/a&gt;‘: Failed to connect to github.com port 443: Timed out&lt;br&gt;FATAL Something’s wrong. Maybe you can find the solution here: &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://hexo.io/docs/troubleshooting.html&lt;/a&gt;&lt;br&gt;Error: fatal: unable to access ‘&lt;a href=&quot;https://github.com/bluce-ben/bluce-ben.github.io.git/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/bluce-ben/bluce-ben.github.io.git/&lt;/a&gt;‘: Failed to connect to github.com port 443: Timed out&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
      <category term="Git问题" scheme="http://yoursite.com/categories/Git/Git%E9%97%AE%E9%A2%98/"/>
    
      <category term="Hexo问题" scheme="http://yoursite.com/categories/Hexo/Hexo%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Git问题" scheme="http://yoursite.com/tags/Git%E9%97%AE%E9%A2%98/"/>
    
      <category term="Hexo问题" scheme="http://yoursite.com/tags/Hexo%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>总结-MySQL数据库设计</title>
    <link href="http://yoursite.com/2017/12/08/%E6%80%BB%E7%BB%93-MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2017/12/08/总结-MySQL数据库设计/</id>
    <published>2017-12-08T05:13:28.000Z</published>
    <updated>2017-12-08T05:28:56.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是数据库设计"><a href="#一、什么是数据库设计" class="headerlink" title="一、什么是数据库设计"></a>一、什么是数据库设计</h2><p><strong>１、数据库设计概念</strong><br>　数据库设计就是根据业务系统的具体需求，结合所选择的DBMS，为这个业务系统构造出最优的数据存储模型。并建立好数据库中表的结构，以及表与表之间的关联关系的过程。使之能有效的对应用系统中的数据进行存储，并可以高效的对已经存储的数据进行查询访问。<br><strong>２、设计对比</strong></p><table><thead><tr><th>优良的设计</th><th>槽糕的设计</th></tr></thead><tbody><tr><td>减少数据冗余</td><td>存在大量的数据冗余</td></tr><tr><td>避免数据维护异常</td><td>存在数据插入、更新、删除异常</td></tr><tr><td>节约存储空间(偶尔会用空间换时间)</td><td>浪费大量存储空间</td></tr><tr><td>高效的访问</td><td>访问数据低效</td></tr></tbody></table><a id="more"></a><h2 id="二、数据库设计的步骤"><a href="#二、数据库设计的步骤" class="headerlink" title="二、数据库设计的步骤"></a>二、数据库设计的步骤</h2><p><strong>1). 需求分析</strong><br>　需求分析主要完成的内容：业务系统中有哪些数据？这些数据又有哪些属性？数据和属性的各自特点有哪些？<br><strong>2). 逻辑设计</strong><br>　使用ER图设计工具对数据库进行ER图逻辑建模：首先将需求转化为数据库的逻辑模型，其次，通过ER图形式将逻辑模型描述展示出来，最后这个逻辑设计与所选择的DBMS无关，也就是说这个逻辑设计应该适合所有的DBMS。<br><strong>3). 物理设计</strong><br>　这个阶段是进入到与DBMS相关的阶段，因此首先需要选择DBMS，并且将第二步的逻辑模型转为物理模型。<br>　这个阶段会涉及到数据库中建表，选择字段类型的问题。在MySQL中遵循以下原则：<br>　列的数据类型一方面影响相应数据的存储空间的开销，另一方面也会影响数据查询性能。当一个列可以选择多种数据类型时，应该优先考虑数字类型，其次是日期或二进制，最后是字符串类型。对于相同级别的数据类型，在满足业务的情况下，应该优先选择占用空间小的数据类型。<br>　mysql中部分字段空间占用情况：<br><img src="/uploads/2017/12/mysql_database_01.jpg" alt=""><br><em>额外注意几点：</em></p><ul><li>在对数据进行比较(where、join 、order by)操作时，同样的数据，字符串处理比数字处理更慢。</li><li>在MySql中，UTF-8占用3个字节。</li></ul><p><strong>4). 维护优化</strong></p><ul><li>针对新的需求建立新的数据库表(这里补充说明下，在进行数据库最初的设计过程中，不建议在表中预留不确定的字段，这并不能实现数据库良好的扩展性问题，它的代价与后期新加一个字段一样，甚至更大)</li><li>索引优化</li><li>大表拆分：拆分又分为两种方式 <ul><li>水平拆分：控制表的长度，即数据的行数。会将每个表中的数据量减少。</li><li>垂直拆分：数据库中的存储是以页为单位的，当每一行的宽度比较小时(列数比较少时)，每页中存储的内容就多，IO效率就高(数据中的数据是存放在磁盘上，每次IO的内容越多越好)。因此常常对于非常宽的表，进行表的垂直拆分。拆表后的数据量不应该发生变化，但是表的数量增加，每张表的宽度减少。</li></ul></li></ul><h2 id="三、数据库中的几大范式"><a href="#三、数据库中的几大范式" class="headerlink" title="三、数据库中的几大范式"></a>三、数据库中的几大范式</h2><p><strong>第一范式(1NF)</strong></p><blockquote><p>概念：数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。<br>作用：确保每列保持原子性 （每个表中的字段不可再拆分）<br>举例：本来正常情况下，设计地址，只需要一个字段，但是若在实际业务系统中需要访问其中的国家、省、市时，此时就应该将地址这个字段进行拆分才符合1NF。</p></blockquote><p><strong>第二范式(2NF)</strong></p><blockquote><p>概念：基于1NF基础之上，第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。此外：所有单关键字段的表都符合第二范式。<br>作用：确保表中的每列都和主键相关（一个表中只能有一个主键）</p></blockquote><p><strong>第三范式(3NF)</strong></p><blockquote><p>概念：基于2NF基础上的，如果数据表中不存在非关键字段对任意候选关键字段的传递函数依赖则符合第三范式。<br>作用：确保每列都和主键列直接相关,而不是间接相关 （表中字段都与主键直接相关）</p></blockquote><h2 id="四、高手的境界都是无招胜有招"><a href="#四、高手的境界都是无招胜有招" class="headerlink" title="四、高手的境界都是无招胜有招"></a>四、高手的境界都是无招胜有招</h2><p>　为了设计出优良的数据库，我们需要遵循数据库的范式，但是有时候如果你设计的数据库完全遵循了这些范式，反而会降低你的某些性能。这里提几点： </p><ul><li>数据库连接会带来一部分性能损失，因此有时候为了减少冗余，将数据存放在多张表中，往往会降低查询性能，而互联网的世界，读写比例大概是3:1甚至4:1 </li><li>减少表与表之间的关联数量(减少了对磁盘的IO)，增加数据的读取效率。 </li><li>反范式化一定要适度。凡事过度适得其反。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、什么是数据库设计&quot;&gt;&lt;a href=&quot;#一、什么是数据库设计&quot; class=&quot;headerlink&quot; title=&quot;一、什么是数据库设计&quot;&gt;&lt;/a&gt;一、什么是数据库设计&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;１、数据库设计概念&lt;/strong&gt;&lt;br&gt;　数据库设计就是根据业务系统的具体需求，结合所选择的DBMS，为这个业务系统构造出最优的数据存储模型。并建立好数据库中表的结构，以及表与表之间的关联关系的过程。使之能有效的对应用系统中的数据进行存储，并可以高效的对已经存储的数据进行查询访问。&lt;br&gt;&lt;strong&gt;２、设计对比&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;优良的设计&lt;/th&gt;
&lt;th&gt;槽糕的设计&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;减少数据冗余&lt;/td&gt;
&lt;td&gt;存在大量的数据冗余&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;避免数据维护异常&lt;/td&gt;
&lt;td&gt;存在数据插入、更新、删除异常&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;节约存储空间(偶尔会用空间换时间)&lt;/td&gt;
&lt;td&gt;浪费大量存储空间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;高效的访问&lt;/td&gt;
&lt;td&gt;访问数据低效&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>总结-MySQL常用函数</title>
    <link href="http://yoursite.com/2017/12/08/%E6%80%BB%E7%BB%93-MySQL%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2017/12/08/总结-MySQL常用函数/</id>
    <published>2017-12-08T03:59:00.000Z</published>
    <updated>2017-12-08T04:44:06.451Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、聚合函数-常用于GROUP-BY从句的SELECT查询中"><a href="#一、聚合函数-常用于GROUP-BY从句的SELECT查询中" class="headerlink" title="一、聚合函数(常用于GROUP BY从句的SELECT查询中)"></a>一、聚合函数(常用于GROUP BY从句的SELECT查询中)</h3><p>　下面五个函数会忽略值为NULL的行</p><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>AVG(col)</td><td>返回指定列的平均值</td></tr><tr><td>COUNT(col)</td><td>返回指定列中非NULL值/行的个数（当函数参数为星号*时不会忽略）</td></tr><tr><td>MIN(col)</td><td>返回指定列的最小值</td></tr><tr><td>MAX(col)</td><td>返回指定列的最大值</td></tr><tr><td>SUM(col)</td><td>返回指定列的所有值之和</td></tr><tr><td>GROUP_CONCAT(col)</td><td>返回由属于一组的列值连接组合而成的结果</td></tr></tbody></table><a id="more"></a><h3 id="二、数学函数"><a href="#二、数学函数" class="headerlink" title="二、数学函数"></a>二、数学函数</h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr><td>BIN(x)</td><td>返回x的二进制（OCT返回八进制，HEX返回十六进制）</td></tr><tr><td>EXP(x)</td><td>返回值e（自然对数的底）的x次方</td></tr><tr><td>GREATEST(x1,x2,…,xn)</td><td>返回集合中最大的值</td></tr><tr><td>LEAST(x1,x2,…,xn)</td><td>返回集合中最小的值</td></tr><tr><td>LN(x)</td><td>返回x的自然对数</td></tr><tr><td>LOG(x,y)</td><td>返回x的以y为底的对数</td></tr><tr><td>MOD(x,y)</td><td>返回x/y的模（余数）</td></tr><tr><td>PI()</td><td>返回pi的值（圆周率）</td></tr><tr><td>RAND()</td><td>返回0到1内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</td></tr><tr><td>FLOOR(x)</td><td>返回小于x的最大整数值，（去掉小数取整）</td></tr><tr><td>CEILING(x)</td><td>返回大于x的最小整数值，（进一取整）</td></tr><tr><td>ROUND(x,y)</td><td>返回参数x的四舍五入的有y位小数的值，（四舍五入）</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数字x截短为y位小数的结果</td></tr><tr><td>SIGN(x)</td><td>返回代表数字x的符号的值（正数返回1，负数返回-1，0返回0）</td></tr><tr><td>SQRT(x)</td><td>返回一个数的平方根</td></tr></tbody></table><h3 id="三、字符串函数"><a href="#三、字符串函数" class="headerlink" title="三、字符串函数"></a>三、字符串函数</h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>ASCII(char)</td><td>返回字符的ASCII码值</td></tr><tr><td>BIT_LENGTH(str)</td><td>返回字符串的比特长度</td></tr><tr><td>CONCAT(s1,s2…,sn)</td><td>将s1,s2…,sn连接成字符串</td></tr><tr><td>CONCAT_WS(sep,s1,s2…,sn)</td><td>将s1,s2…,sn连接成字符串，并用sep字符间隔</td></tr><tr><td>INSERT(str,x,y,instr)</td><td>将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果</td></tr><tr><td>FIND_IN_SET(str,list)</td><td>分析逗号分隔的list列表，如果发现str，返回str在list中的位置</td></tr><tr><td>LCASE(str)或LOWER(str)</td><td>返回将字符串str中所有字符改变为小写后的结果</td></tr><tr><td>UCASE(str)或UPPER(str)</td><td>返回将字符串str中所有字符转变为大写后的结果</td></tr><tr><td>LEFT(str,x)</td><td>返回字符串str中最左边的x个字符</td></tr><tr><td>RIGHT(str,x)</td><td>返回字符串str中最右边的x个字符</td></tr><tr><td>LENGTH(str)</td><td>返回字符串str中的字符数</td></tr><tr><td>POSITION(substr,str)</td><td>返回子串substr在字符串str中第一次出现的位置</td></tr><tr><td>QUOTE(str)</td><td>用反斜杠转义str中的单引号</td></tr><tr><td>REPEAT(str,srchstr,rplcstr)</td><td>返回字符串str重复x次的结果</td></tr><tr><td>REVERSE(str)</td><td>返回颠倒字符串str的结果</td></tr><tr><td>LTRIM(str)</td><td>去掉字符串str开头的空格</td></tr><tr><td>RTRIM(str)</td><td>去掉字符串str尾部的空格</td></tr><tr><td>TRIM(str)</td><td>去除字符串首部和尾部的所有空格</td></tr></tbody></table><h3 id="四、日期和时间函数"><a href="#四、日期和时间函数" class="headerlink" title="四、日期和时间函数"></a>四、日期和时间函数</h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>DATE_ADD(date,INTERVAL int keyword)</td><td>返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化),如：SELECTDATE_ADD(CURRENT_DATE,INTERVAL 6 MONTH);</td></tr><tr><td>DATE_SUB(date,INTERVAL int keyword)</td><td>返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化),如：SELECTDATE_SUB(CURRENT_DATE,INTERVAL 6 MONTH);</td></tr><tr><td>DATE_FORMAT(date,fmt)</td><td>依照指定的fmt格式格式化日期date值</td></tr><tr><td>FROM_UNIXTIME(ts,fmt)</td><td>根据指定的fmt格式，格式化UNIX时间戳ts</td></tr><tr><td>MONTHNAME(date)</td><td>返回date的月份名(英语月份，如October)</td></tr><tr><td>DAYNAME(date)</td><td>返回date的星期名(英语星期几，如Saturday)</td></tr><tr><td>NOW()</td><td>返回当前的日期和时间 如：2016-10-08 18:57:39</td></tr><tr><td>CURDATE()或CURRENT_DATE()</td><td>返回当前的日期</td></tr><tr><td>CURTIME()或CURRENT_TIME()</td><td>返回当前的时间</td></tr><tr><td>QUARTER(date)</td><td>返回date在一年中的季度(1~4)</td></tr><tr><td>WEEK(date)</td><td>返回日期date为一年中第几周(0~53)</td></tr><tr><td>DAYOFYEAR(date)</td><td>返回date是一年的第几天(1~366)</td></tr><tr><td>DAYOFMONTH(date)</td><td>返回date是一个月的第几天(1~31)</td></tr><tr><td>DAYOFWEEK(date)</td><td>返回date所代表的一星期中的第几天(1~7)</td></tr><tr><td>YEAR(date)</td><td>返回日期date的年份(1000~9999)</td></tr><tr><td>MONTH(date)</td><td>返回date的月份值(1~12)</td></tr><tr><td>DAY(date)</td><td>返回date的天数部分</td></tr><tr><td>HOUR(time)</td><td>返回time的小时值(0~23)</td></tr><tr><td>MINUTE(time)</td><td>返回time的分钟值(0~59)</td></tr><tr><td>SECOND(time)</td><td>返回time的秒值（0-59）</td></tr><tr><td>DATE(datetime)</td><td>返回datetime的日期值</td></tr><tr><td>TIME(datetime)</td><td>返回datetime的时间值</td></tr></tbody></table><h3 id="五、加密函数"><a href="#五、加密函数" class="headerlink" title="五、加密函数"></a>五、加密函数</h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>AES_ENCRYPT(str,key)</td><td>返回用密钥key对字符串str利用高级加密标准算法加密后的结果，调用AES_ENCRYPT的结果是一个二进制字符串，以BLOB类型存储</td></tr><tr><td>AES_DECRYPT(str,key)</td><td>返回用密钥key对字符串str利用高级加密标准算法解密后的结果</td></tr><tr><td>DECODE(str,key)</td><td>使用key作为密钥解密加密字符串str</td></tr><tr><td>ENCRYPT(str,salt)</td><td>使用UNIXcrypt()函数，用关键词salt(一个可以惟一确定口令的字符串，就像钥匙一样)加密字符串str</td></tr><tr><td>ENCODE(str,key)</td><td>使用key作为密钥加密字符串str，调用ENCODE()的结果是一个二进制字符串，它以BLOB类型存储</td></tr><tr><td>MD5()</td><td>计算字符串str的MD5校验和</td></tr><tr><td>PASSWORD(str)</td><td>返回字符串str的加密版本，这个加密过程是不可逆转的，和UNIX密码加密过程使用不同的算法。</td></tr><tr><td>SHA()</td><td>计算字符串str的安全散列算法(SHA)校验和</td></tr></tbody></table><h3 id="六、格式化函数"><a href="#六、格式化函数" class="headerlink" title="六、格式化函数"></a>六、格式化函数</h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>DATE_FORMAT(date,fmt)</td><td>依照字符串fmt格式化日期date值</td></tr><tr><td>FORMAT(x,y)</td><td>把x格式化为以逗号隔开的数字序列，y是结果的小数位数</td></tr><tr><td>INET_ATON(ip)</td><td>返回IP地址的数字表示</td></tr><tr><td>INET_NTOA(num)</td><td>返回数字所代表的IP地址</td></tr><tr><td>TIME_FORMAT(time,fmt)</td><td>依照字符串fmt格式化时间time值,其中最简单的是FORMAT()函数，它可以把大的数值格式化为以逗号间隔的易读的序列。</td></tr></tbody></table><h3 id="七、数据类型转换函数"><a href="#七、数据类型转换函数" class="headerlink" title="七、数据类型转换函数"></a>七、数据类型转换函数</h3><p>　CAST()函数，将一个值转换为指定的数据类型（类型有：BINARY,CHAR,DATE,TIME,DATETIME,SIGNED,UNSIGNED）<br><code>SELECT CAST(NOW() AS SIGNED INTEGER),CURDATE()+0;</code></p><h3 id="八、系统信息函数"><a href="#八、系统信息函数" class="headerlink" title="八、系统信息函数"></a>八、系统信息函数</h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>DATABASE()</td><td>返回当前数据库名</td></tr><tr><td>BENCHMARK(count,expr)</td><td>将表达式expr重复运行count次</td></tr><tr><td>CONNECTION_ID()</td><td>返回当前客户的连接ID</td></tr><tr><td>FOUND_ROWS()</td><td>返回最后一个SELECT查询进行检索的总行数</td></tr><tr><td>USER()或SYSTEM_USER()</td><td>返回当前登陆用户名</td></tr><tr><td>VERSION()</td><td>返回MySQL服务器的版本</td></tr></tbody></table><h3 id="九、条件判断函数"><a href="#九、条件判断函数" class="headerlink" title="九、条件判断函数"></a>九、条件判断函数</h3><table><thead><tr><th>函数名</th><th>说明</th></tr></thead><tbody><tr><td>isnull(expr)</td><td>如expr为null，那么isnull()的返回值为1，否则返回值为0。</td></tr><tr><td>ifnull(expr1,expr2)</td><td>假如expr1不为NULL，则IFNULL()的返回值为expr1; 否则其返回值为expr2。IFNULL()的返回值是数字或是字符串，具体情况取决于其所使用的语境。</td></tr><tr><td>nullif(expr1,expr2)</td><td>如果expr1=expr2成立，那么返回值为NULL，否则返回值为expr1。</td></tr><tr><td>IF(expr1,expr2,expr3)</td><td>如果 expr1 是TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL)，则 IF()的返回值为expr2; 否则返回值则为 expr3。IF() 的返回值为数字值或字符串值，具体情况视其所在语境而定。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、聚合函数-常用于GROUP-BY从句的SELECT查询中&quot;&gt;&lt;a href=&quot;#一、聚合函数-常用于GROUP-BY从句的SELECT查询中&quot; class=&quot;headerlink&quot; title=&quot;一、聚合函数(常用于GROUP BY从句的SELECT查询中)&quot;&gt;&lt;/a&gt;一、聚合函数(常用于GROUP BY从句的SELECT查询中)&lt;/h3&gt;&lt;p&gt;　下面五个函数会忽略值为NULL的行&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AVG(col)&lt;/td&gt;
&lt;td&gt;返回指定列的平均值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;COUNT(col)&lt;/td&gt;
&lt;td&gt;返回指定列中非NULL值/行的个数（当函数参数为星号*时不会忽略）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MIN(col)&lt;/td&gt;
&lt;td&gt;返回指定列的最小值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MAX(col)&lt;/td&gt;
&lt;td&gt;返回指定列的最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUM(col)&lt;/td&gt;
&lt;td&gt;返回指定列的所有值之和&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GROUP_CONCAT(col)&lt;/td&gt;
&lt;td&gt;返回由属于一组的列值连接组合而成的结果&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>总结-MySQL主从复制、读写分离配置详解</title>
    <link href="http://yoursite.com/2017/12/08/%E6%80%BB%E7%BB%93-MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E3%80%81%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/12/08/总结-MySQL主从复制、读写分离配置详解/</id>
    <published>2017-12-08T03:23:55.000Z</published>
    <updated>2017-12-08T06:48:14.212Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MySQL主从同步的机制："><a href="#MySQL主从同步的机制：" class="headerlink" title="MySQL主从同步的机制："></a>MySQL主从同步的机制：</h2><p><img src="/uploads/2017/12/mysql_master_slave_01.jpg" alt=""><br><a id="more"></a></p><blockquote><ol><li>Slave 上面的IO线程连接上 Master，并请求从指定日志文件的指定位置(或者从最开始的日志)之后的日志内容;</li><li>Master 接收到来自 Slave 的 IO 线程的请求后，通过负责复制的 IO线程根据请求信息读取指定日志指定位置之后的日志信息，返回给 Slave 端的 IO线程。返回信息中除了日志所包含的信息之外，还包括本次返回的信息在 Master 端的 Binary Log 文件的名称以及在 BinaryLog 中的位置;</li><li>Slave 的 IO 线程接收到信息后，将接收到的日志内容依次写入到 Slave 端的RelayLog文件(MySQL-relay-bin.xxxxxx)的最末端，并将读取到的Master端的bin-log的文件名和位置记录到master-info文件中，以便在下一次读取的时候能够清楚的高速Master“我需要从某个bin-log的哪个位置开始往后的日志内容，请发给我”</li><li>Slave 的 SQL 线程检测到 Relay Log 中新增加了内容后，会马上解析该 Log 文件中的内容成为在 Master端真实执行时候的那些可执行的 Query 语句，并在自身执行这些 Query。这样，实际上就是在 Master 端和 Slave端执行了同样的 Query，所以两端的数据是完全一样的。</li></ol></blockquote><h2 id="MySQL主从同步的作用"><a href="#MySQL主从同步的作用" class="headerlink" title="MySQL主从同步的作用"></a>MySQL主从同步的作用</h2><p>Ø  可以作为一种备份机制，相当于热备份<br>Ø  可以用来做读写分离，均衡数据库负载</p><h2 id="MySQL主从同步的步骤"><a href="#MySQL主从同步的步骤" class="headerlink" title="MySQL主从同步的步骤"></a>MySQL主从同步的步骤</h2><p>1、在Master MySQL上创建一个用户‘repl’，并允许其他Slave服务器可以通过远程访问Master，通过该用户读取二进制日志，实现数据同步。</p><blockquote><p>mysql&gt;create user repl; //创建新用户<br>//repl用户必须具有REPLICATION SLAVE权限，除此之外没有必要添加不必要的权限，密码为mysql。说明一下192.168.0.%，这个配置是指明repl用户所在服务器，这里%是通配符，表示192.168.0.0-192.168.0.255的Server都可以以repl用户登陆主服务器。当然你也可以指定固定Ip。<br>mysql&gt; GRANT REPLICATION SLAVE ON <em>.</em> TO ‘repl’@’192.168.0.%’ IDENTIFIED BY ‘mysql’;</p></blockquote><p>2、主数据库服务器配置<br>　进入主数据库服务器安装目录,打开my.ini,在文件末尾增加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#数据库ID号， 为1时表示为Master,其中master_id必须为1到232–1之间的一个正整数值;   </span><br><span class="line">server-id = 1  </span><br><span class="line">#启用二进制日志；  </span><br><span class="line">log-bin=mysql-bin  </span><br><span class="line">#需要同步的二进制数据库名；  </span><br><span class="line">binlog-do-db=minishop  </span><br><span class="line">#不同步的二进制数据库名,如果不设置可以将其注释掉;  </span><br><span class="line">binlog-ignore-db=information_schema  </span><br><span class="line">binlog-ignore-db=mysql  </span><br><span class="line">binlog-ignore-db=personalsite  </span><br><span class="line">binlog-ignore-db=test  </span><br><span class="line">#设定生成的log文件名；  </span><br><span class="line">log-bin=&quot;D:/Database/materlog&quot;  </span><br><span class="line">#把更新的记录写到二进制文件中； （注：此处不限制，是对所有操作进行记录日志）</span><br><span class="line">#log-slave-updates</span><br></pre></td></tr></table></figure></p><p>　保存文件。重启Mysql服务。</p><font color="red">注：主数据库配置文件命令详解：</font><table><thead><tr><th>log-bin=mysql-bin</th><th>启动二进制日志系统</th></tr></thead><tbody><tr><td>binlog-do-db=test</td><td>二进制需要同步的数据库名</td></tr><tr><td>server-id = 1</td><td>本机数据库ID 标示为主，该部分还应有一个server-id=Master_id选项，其中master_id必须为1到232–1之间的一个正整数值</td></tr><tr><td>log-bin=/var/log/mysql/updatelog</td><td>设定生成log文件名，这里的路径没有mysql目录要手动创建并给于它mysql用户的权限。</td></tr><tr><td>binlog-ignore-db=mysql</td><td>避免同步mysql用户配置，以免不必要的麻烦</td></tr></tbody></table><p>查看日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW MASTER STATUS;</span><br><span class="line">+-------------------+----------+--------------+------------------+</span><br><span class="line">| File | Position | Binlog_Do_DB | Binlog_Ignore_DB |</span><br><span class="line">+-------------------+----------+--------------+------------------+</span><br><span class="line">| master-bin.000001 | 0| | |</span><br><span class="line">+-------------------+----------+--------------+------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p><em>（注：此处的日志文件File、Position下面需要用到）</em><br>3、从数据库服务器配置<br>　进入从数据库服务器安装目录,打开my.ini,在文件末尾增加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#如果需要增加Slave库则，此id往后顺延；  </span><br><span class="line">server-id = 2    </span><br><span class="line">log-bin=mysql-bin  </span><br><span class="line">#如果发现主服务器断线，重新连接的时间差；  </span><br><span class="line">master-connect-retry=60  </span><br><span class="line">#不需要备份的数据库；   </span><br><span class="line">replicate-ignore-db=mysql  </span><br><span class="line">#需要备份的数据库  </span><br><span class="line">replicate-do-db=minishop  </span><br><span class="line">#log-slave-update</span><br></pre></td></tr></table></figure></p><p>　保存文件。重启Mysql服务。<br>4、连接Master<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;change master to </span><br><span class="line">-&gt;master_host=&apos;192.168.0.104&apos;, //Master 服务器Ip</span><br><span class="line">-&gt;master_port=3306,</span><br><span class="line">-&gt;master_user=&apos;repl&apos;,</span><br><span class="line">-&gt;master_password=&apos;mysql&apos;, </span><br><span class="line">-&gt;master_log_file=&apos;master-bin.000001&apos;,//Master服务器产生的日志</span><br><span class="line">-&gt;master_log_pos=0;</span><br></pre></td></tr></table></figure></p><font color="red">从服务器配置命令详解：</font><table><thead><tr><th>server-id = 2</th><th>从服务器ID号，不要和主ID相同 ，如果设置多个从服务器，每个从服务器必须有一个唯一的server-id值，必须与主服务器的以及其它从服务器的不相同。可以认为server-id值类似于IP地址：这些ID值能唯一识别复制服务器群集中的每个服务器实例。</th></tr></thead><tbody><tr><td>master-host = 172.31.70.51</td><td>指定主服务器IP地址</td></tr><tr><td>master-user = replication</td><td>指定在主服务器上可以进行同步的用户名</td></tr><tr><td>master-password = 123456</td><td>密码</td></tr><tr><td>master-port = 3306</td><td>同步所用的端口</td></tr><tr><td>master-connect-retry=60</td><td>断点重新连接时间</td></tr><tr><td>replicate-ignore-db=mysql</td><td>屏蔽对mysql库的同步，以免有麻烦</td></tr><tr><td>replicate-do-db=test</td><td>同步数据库名称</td></tr></tbody></table><p>5、启动Slave<br><code>start slave;</code><br>查看从服务器状态<br><code>mysql&gt; show slave status \G;</code><br><img src="/uploads/2017/12/mysql_master_slave_02.png" alt=""><br>OK所有配置都完成了。</p><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>　完成MySQL的主从配置，实现数据的实时同步，采用架构的方式实现MySQL的读写分离。<br>　统一认证平台完成数据的增删改的操作，保存数据到MySQL的Master的数据库中，Salve数据库从Master数据库中实时同步数据，应用系统从Salve数据库中读取书据。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MySQL主从同步的机制：&quot;&gt;&lt;a href=&quot;#MySQL主从同步的机制：&quot; class=&quot;headerlink&quot; title=&quot;MySQL主从同步的机制：&quot;&gt;&lt;/a&gt;MySQL主从同步的机制：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/uploads/2017/12/mysql_master_slave_01.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://yoursite.com/categories/MySQL/"/>
    
      <category term="架构" scheme="http://yoursite.com/categories/MySQL/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
      <category term="架构" scheme="http://yoursite.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
</feed>
